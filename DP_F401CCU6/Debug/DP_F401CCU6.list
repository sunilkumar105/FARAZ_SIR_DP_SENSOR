
DP_F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000444c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b7c  08004b7c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b84  08004b84  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004b8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000068  08004bf4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004bf4  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aeb9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b71  00000000  00000000  0002af94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b5  00000000  00000000  0002d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163b6  00000000  00000000  0002dcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc07  00000000  00000000  0004408b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087318  00000000  00000000  0004fc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002db8  00000000  00000000  000d6fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000d9d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045d4 	.word	0x080045d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080045d4 	.word	0x080045d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d008      	beq.n	80005ac <NRF24_csn+0x20>
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <NRF24_csn+0x38>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <NRF24_csn+0x3c>)
 80005a0:	8811      	ldrh	r1, [r2, #0]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fd7b 	bl	80020a0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005aa:	e007      	b.n	80005bc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <NRF24_csn+0x38>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <NRF24_csn+0x3c>)
 80005b2:	8811      	ldrh	r1, [r2, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fd72 	bl	80020a0 <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000088 	.word	0x20000088
 80005c8:	2000008c 	.word	0x2000008c

080005cc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <NRF24_ce+0x20>
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <NRF24_ce+0x38>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <NRF24_ce+0x3c>)
 80005e0:	8811      	ldrh	r1, [r2, #0]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fd5b 	bl	80020a0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80005ea:	e007      	b.n	80005fc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <NRF24_ce+0x38>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <NRF24_ce+0x3c>)
 80005f2:	8811      	ldrh	r1, [r2, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fd52 	bl	80020a0 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000088 	.word	0x20000088
 8000608:	2000008e 	.word	0x2000008e

0800060c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ffb8 	bl	800058c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 031f 	and.w	r3, r3, #31
 8000622:	b2db      	uxtb	r3, r3
 8000624:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000626:	f107 010c 	add.w	r1, r7, #12
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	2201      	movs	r2, #1
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <NRF24_read_register+0x4c>)
 8000630:	f002 fa4b 	bl	8002aca <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	1c59      	adds	r1, r3, #1
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	2201      	movs	r2, #1
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <NRF24_read_register+0x4c>)
 8000640:	f002 fb7f 	bl	8002d42 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000644:	7b7b      	ldrb	r3, [r7, #13]
 8000646:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff9f 	bl	800058c <NRF24_csn>
	return retData;
 800064e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000090 	.word	0x20000090

0800065c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff ff8d 	bl	800058c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 031f 	and.w	r3, r3, #31
 8000678:	b2db      	uxtb	r3, r3
 800067a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800067c:	f107 010c 	add.w	r1, r7, #12
 8000680:	2364      	movs	r3, #100	; 0x64
 8000682:	2201      	movs	r2, #1
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <NRF24_read_registerN+0x4c>)
 8000686:	f002 fa20 	bl	8002aca <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	b29a      	uxth	r2, r3
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	6839      	ldr	r1, [r7, #0]
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <NRF24_read_registerN+0x4c>)
 8000694:	f002 fb55 	bl	8002d42 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ff77 	bl	800058c <NRF24_csn>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000090 	.word	0x20000090

080006ac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	460a      	mov	r2, r1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff65 	bl	800058c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f043 0320 	orr.w	r3, r3, #32
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80006d0:	f107 010c 	add.w	r1, r7, #12
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2202      	movs	r2, #2
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <NRF24_write_register+0x40>)
 80006da:	f002 f9f6 	bl	8002aca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff54 	bl	800058c <NRF24_csn>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000090 	.word	0x20000090

080006f0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff43 	bl	800058c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	b2db      	uxtb	r3, r3
 800070e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000710:	f107 010c 	add.w	r1, r7, #12
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	2201      	movs	r2, #1
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <NRF24_write_registerN+0x4c>)
 800071a:	f002 f9d6 	bl	8002aca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	b29a      	uxth	r2, r3
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	6839      	ldr	r1, [r7, #0]
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <NRF24_write_registerN+0x4c>)
 8000728:	f002 f9cf 	bl	8002aca <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff ff2d 	bl	800058c <NRF24_csn>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000090 	.word	0x20000090

08000740 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000744:	21ff      	movs	r1, #255	; 0xff
 8000746:	20e1      	movs	r0, #225	; 0xe1
 8000748:	f7ff ffb0 	bl	80006ac <NRF24_write_register>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000754:	21ff      	movs	r1, #255	; 0xff
 8000756:	20e2      	movs	r0, #226	; 0xe2
 8000758:	f7ff ffa8 	bl	80006ac <NRF24_write_register>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000760:	b082      	sub	sp, #8
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	61fb      	str	r3, [r7, #28]
 800076c:	460b      	mov	r3, r1
 800076e:	807b      	strh	r3, [r7, #2]
 8000770:	4613      	mov	r3, r2
 8000772:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000774:	4b66      	ldr	r3, [pc, #408]	; (8000910 <NRF24_begin+0x1b0>)
 8000776:	4618      	mov	r0, r3
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	2258      	movs	r2, #88	; 0x58
 800077e:	4619      	mov	r1, r3
 8000780:	f003 fad8 	bl	8003d34 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000784:	4a63      	ldr	r2, [pc, #396]	; (8000914 <NRF24_begin+0x1b4>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800078a:	4a63      	ldr	r2, [pc, #396]	; (8000918 <NRF24_begin+0x1b8>)
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000790:	4a62      	ldr	r2, [pc, #392]	; (800091c <NRF24_begin+0x1bc>)
 8000792:	883b      	ldrh	r3, [r7, #0]
 8000794:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff fef8 	bl	800058c <NRF24_csn>
	NRF24_ce(0);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff15 	bl	80005cc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80007a2:	2005      	movs	r0, #5
 80007a4:	f001 f9ee 	bl	8001b84 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007a8:	2108      	movs	r1, #8
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff7e 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80007b0:	213f      	movs	r1, #63	; 0x3f
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ff7a 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80007b8:	2103      	movs	r1, #3
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff ff76 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80007c0:	2103      	movs	r1, #3
 80007c2:	2003      	movs	r0, #3
 80007c4:	f7ff ff72 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80007c8:	2103      	movs	r1, #3
 80007ca:	2004      	movs	r0, #4
 80007cc:	f7ff ff6e 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80007d0:	2102      	movs	r1, #2
 80007d2:	2005      	movs	r0, #5
 80007d4:	f7ff ff6a 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80007d8:	210f      	movs	r1, #15
 80007da:	2006      	movs	r0, #6
 80007dc:	f7ff ff66 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80007e0:	210e      	movs	r1, #14
 80007e2:	2007      	movs	r0, #7
 80007e4:	f7ff ff62 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80007e8:	2100      	movs	r1, #0
 80007ea:	2008      	movs	r0, #8
 80007ec:	f7ff ff5e 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80007f0:	2100      	movs	r1, #0
 80007f2:	2009      	movs	r0, #9
 80007f4:	f7ff ff5a 	bl	80006ac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80007f8:	23e7      	movs	r3, #231	; 0xe7
 80007fa:	733b      	strb	r3, [r7, #12]
 80007fc:	23e7      	movs	r3, #231	; 0xe7
 80007fe:	72fb      	strb	r3, [r7, #11]
 8000800:	23e7      	movs	r3, #231	; 0xe7
 8000802:	72bb      	strb	r3, [r7, #10]
 8000804:	23e7      	movs	r3, #231	; 0xe7
 8000806:	727b      	strb	r3, [r7, #9]
 8000808:	23e7      	movs	r3, #231	; 0xe7
 800080a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2205      	movs	r2, #5
 8000812:	4619      	mov	r1, r3
 8000814:	200a      	movs	r0, #10
 8000816:	f7ff ff6b 	bl	80006f0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800081a:	23c2      	movs	r3, #194	; 0xc2
 800081c:	733b      	strb	r3, [r7, #12]
 800081e:	23c2      	movs	r3, #194	; 0xc2
 8000820:	72fb      	strb	r3, [r7, #11]
 8000822:	23c2      	movs	r3, #194	; 0xc2
 8000824:	72bb      	strb	r3, [r7, #10]
 8000826:	23c2      	movs	r3, #194	; 0xc2
 8000828:	727b      	strb	r3, [r7, #9]
 800082a:	23c2      	movs	r3, #194	; 0xc2
 800082c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2205      	movs	r2, #5
 8000834:	4619      	mov	r1, r3
 8000836:	200b      	movs	r0, #11
 8000838:	f7ff ff5a 	bl	80006f0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800083c:	21c3      	movs	r1, #195	; 0xc3
 800083e:	200c      	movs	r0, #12
 8000840:	f7ff ff34 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000844:	21c4      	movs	r1, #196	; 0xc4
 8000846:	200d      	movs	r0, #13
 8000848:	f7ff ff30 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800084c:	21c5      	movs	r1, #197	; 0xc5
 800084e:	200e      	movs	r0, #14
 8000850:	f7ff ff2c 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000854:	21c6      	movs	r1, #198	; 0xc6
 8000856:	200f      	movs	r0, #15
 8000858:	f7ff ff28 	bl	80006ac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800085c:	23e7      	movs	r3, #231	; 0xe7
 800085e:	733b      	strb	r3, [r7, #12]
 8000860:	23e7      	movs	r3, #231	; 0xe7
 8000862:	72fb      	strb	r3, [r7, #11]
 8000864:	23e7      	movs	r3, #231	; 0xe7
 8000866:	72bb      	strb	r3, [r7, #10]
 8000868:	23e7      	movs	r3, #231	; 0xe7
 800086a:	727b      	strb	r3, [r7, #9]
 800086c:	23e7      	movs	r3, #231	; 0xe7
 800086e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2205      	movs	r2, #5
 8000876:	4619      	mov	r1, r3
 8000878:	2010      	movs	r0, #16
 800087a:	f7ff ff39 	bl	80006f0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800087e:	2100      	movs	r1, #0
 8000880:	2011      	movs	r0, #17
 8000882:	f7ff ff13 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000886:	2100      	movs	r1, #0
 8000888:	2012      	movs	r0, #18
 800088a:	f7ff ff0f 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800088e:	2100      	movs	r1, #0
 8000890:	2013      	movs	r0, #19
 8000892:	f7ff ff0b 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000896:	2100      	movs	r1, #0
 8000898:	2014      	movs	r0, #20
 800089a:	f7ff ff07 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2015      	movs	r0, #21
 80008a2:	f7ff ff03 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80008a6:	2100      	movs	r1, #0
 80008a8:	2016      	movs	r0, #22
 80008aa:	f7ff feff 	bl	80006ac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80008ae:	f000 f99b 	bl	8000be8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80008b2:	2100      	movs	r1, #0
 80008b4:	201c      	movs	r0, #28
 80008b6:	f7ff fef9 	bl	80006ac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	201d      	movs	r0, #29
 80008be:	f7ff fef5 	bl	80006ac <NRF24_write_register>
	printRadioSettings();
 80008c2:	f000 f9ab 	bl	8000c1c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80008c6:	210f      	movs	r1, #15
 80008c8:	200f      	movs	r0, #15
 80008ca:	f000 f859 	bl	8000980 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80008ce:	2003      	movs	r0, #3
 80008d0:	f000 f8cb 	bl	8000a6a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 f901 	bl	8000adc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 f944 	bl	8000b68 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80008e0:	f000 f896 	bl	8000a10 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80008e4:	2020      	movs	r0, #32
 80008e6:	f000 f87b 	bl	80009e0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80008ea:	f000 f974 	bl	8000bd6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80008ee:	204c      	movs	r0, #76	; 0x4c
 80008f0:	f000 f861 	bl	80009b6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80008f4:	f7ff ff24 	bl	8000740 <NRF24_flush_tx>
	NRF24_flush_rx();
 80008f8:	f7ff ff2a 	bl	8000750 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80008fc:	f000 f95c 	bl	8000bb8 <NRF24_powerDown>
	
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800090a:	b002      	add	sp, #8
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000090 	.word	0x20000090
 8000914:	20000088 	.word	0x20000088
 8000918:	2000008c 	.word	0x2000008c
 800091c:	2000008e 	.word	0x2000008e

08000920 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe51 	bl	80005cc <NRF24_ce>
	NRF24_flush_tx();
 800092a:	f7ff ff09 	bl	8000740 <NRF24_flush_tx>
	NRF24_flush_rx();
 800092e:	f7ff ff0f 	bl	8000750 <NRF24_flush_rx>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000942:	463b      	mov	r3, r7
 8000944:	2205      	movs	r2, #5
 8000946:	4619      	mov	r1, r3
 8000948:	200a      	movs	r0, #10
 800094a:	f7ff fed1 	bl	80006f0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800094e:	463b      	mov	r3, r7
 8000950:	2205      	movs	r2, #5
 8000952:	4619      	mov	r1, r3
 8000954:	2010      	movs	r0, #16
 8000956:	f7ff fecb 	bl	80006f0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800095a:	2320      	movs	r3, #32
 800095c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <NRF24_openWritingPipe+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	7bfa      	ldrb	r2, [r7, #15]
 8000964:	4293      	cmp	r3, r2
 8000966:	bf28      	it	cs
 8000968:	4613      	movcs	r3, r2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	2011      	movs	r0, #17
 8000970:	f7ff fe9c 	bl	80006ac <NRF24_write_register>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000084 	.word	0x20000084

08000980 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	460a      	mov	r2, r1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	4613      	mov	r3, r2
 800098e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	b25a      	sxtb	r2, r3
 8000996:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	2004      	movs	r0, #4
 80009aa:	f7ff fe7f 	bl	80006ac <NRF24_write_register>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80009c0:	237f      	movs	r3, #127	; 0x7f
 80009c2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80009c4:	7bfa      	ldrb	r2, [r7, #15]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4293      	cmp	r3, r2
 80009ca:	bf28      	it	cs
 80009cc:	4613      	movcs	r3, r2
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	2005      	movs	r0, #5
 80009d4:	f7ff fe6a 	bl	80006ac <NRF24_write_register>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80009ea:	2320      	movs	r3, #32
 80009ec:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4293      	cmp	r3, r2
 80009f4:	bf28      	it	cs
 80009f6:	4613      	movcs	r3, r2
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <NRF24_setPayloadSize+0x2c>)
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000084 	.word	0x20000084

08000a10 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000a14:	201d      	movs	r0, #29
 8000a16:	f7ff fdf9 	bl	800060c <NRF24_read_register>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f023 0304 	bic.w	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	201d      	movs	r0, #29
 8000a26:	f7ff fe41 	bl	80006ac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	201c      	movs	r0, #28
 8000a2e:	f7ff fe3d 	bl	80006ac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000a32:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <NRF24_disableDynamicPayloads+0x2c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000085 	.word	0x20000085

08000a40 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000a50:	213f      	movs	r1, #63	; 0x3f
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fe2a 	bl	80006ac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000a58:	e003      	b.n	8000a62 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fe25 	bl	80006ac <NRF24_write_register>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a74:	2006      	movs	r0, #6
 8000a76:	f7ff fdc9 	bl	800060c <NRF24_read_register>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	f023 0306 	bic.w	r3, r3, #6
 8000a84:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d104      	bne.n	8000a96 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	f043 0306 	orr.w	r3, r3, #6
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e019      	b.n	8000aca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d104      	bne.n	8000aa6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e011      	b.n	8000aca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d104      	bne.n	8000ab6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e009      	b.n	8000aca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d103      	bne.n	8000aca <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f043 0306 	orr.w	r3, r3, #6
 8000ac8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff fdec 	bl	80006ac <NRF24_write_register>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000aea:	2006      	movs	r0, #6
 8000aec:	f7ff fd8e 	bl	800060c <NRF24_read_register>
 8000af0:	4603      	mov	r3, r0
 8000af2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <NRF24_setDataRate+0x88>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000b00:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d107      	bne.n	8000b18 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <NRF24_setDataRate+0x88>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	73bb      	strb	r3, [r7, #14]
 8000b16:	e00d      	b.n	8000b34 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d107      	bne.n	8000b2e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <NRF24_setDataRate+0x88>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	73bb      	strb	r3, [r7, #14]
 8000b2c:	e002      	b.n	8000b34 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <NRF24_setDataRate+0x88>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	4619      	mov	r1, r3
 8000b38:	2006      	movs	r0, #6
 8000b3a:	f7ff fdb7 	bl	80006ac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000b3e:	2006      	movs	r0, #6
 8000b40:	f7ff fd64 	bl	800060c <NRF24_read_register>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	7bbb      	ldrb	r3, [r7, #14]
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d102      	bne.n	8000b54 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e002      	b.n	8000b5a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <NRF24_setDataRate+0x88>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000086 	.word	0x20000086

08000b68 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fd4a 	bl	800060c <NRF24_read_register>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f023 030c 	bic.w	r3, r3, #12
 8000b7e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00f      	beq.n	8000ba6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d104      	bne.n	8000b96 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e007      	b.n	8000ba6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fd7e 	bl	80006ac <NRF24_write_register>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fd25 	bl	800060c <NRF24_read_register>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f023 0302 	bic.w	r3, r3, #2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fd6d 	bl	80006ac <NRF24_write_register>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bda:	2170      	movs	r1, #112	; 0x70
 8000bdc:	2007      	movs	r0, #7
 8000bde:	f7ff fd65 	bl	80006ac <NRF24_write_register>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fccc 	bl	800058c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000bf4:	2350      	movs	r3, #80	; 0x50
 8000bf6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000bf8:	2373      	movs	r3, #115	; 0x73
 8000bfa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bfc:	1d39      	adds	r1, r7, #4
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	2202      	movs	r2, #2
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <NRF24_ACTIVATE_cmd+0x30>)
 8000c04:	f001 ff61 	bl	8002aca <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fcbf 	bl	800058c <NRF24_csn>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000090 	.word	0x20000090

08000c1c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	b0a1      	sub	sp, #132	; 0x84
 8000c20:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	49c3      	ldr	r1, [pc, #780]	; (8000f34 <printRadioSettings+0x318>)
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 f82f 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fad4 	bl	80001e0 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f107 0108 	add.w	r1, r7, #8
 8000c40:	230a      	movs	r3, #10
 8000c42:	48bd      	ldr	r0, [pc, #756]	; (8000f38 <printRadioSettings+0x31c>)
 8000c44:	f002 fcad 	bl	80035a2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fcdf 	bl	800060c <NRF24_read_register>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <printRadioSettings+0x5e>
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	49b2      	ldr	r1, [pc, #712]	; (8000f3c <printRadioSettings+0x320>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 f80a 	bl	8003c8c <siprintf>
 8000c78:	e00c      	b.n	8000c94 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	49b0      	ldr	r1, [pc, #704]	; (8000f40 <printRadioSettings+0x324>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 f803 	bl	8003c8c <siprintf>
 8000c86:	e005      	b.n	8000c94 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	49ad      	ldr	r1, [pc, #692]	; (8000f44 <printRadioSettings+0x328>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 fffc 	bl	8003c8c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff faa1 	bl	80001e0 <strlen>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	f107 0108 	add.w	r1, r7, #8
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	48a3      	ldr	r0, [pc, #652]	; (8000f38 <printRadioSettings+0x31c>)
 8000caa:	f002 fc7a 	bl	80035a2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fcac 	bl	800060c <NRF24_read_register>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cbe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bfcc      	ite	gt
 8000cc6:	2301      	movgt	r3, #1
 8000cc8:	2300      	movle	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cd2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bfcc      	ite	gt
 8000cda:	2301      	movgt	r3, #1
 8000cdc:	2300      	movle	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ce2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ce6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bfcc      	ite	gt
 8000cee:	2301      	movgt	r3, #1
 8000cf0:	2300      	movle	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cfa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bfcc      	ite	gt
 8000d02:	2301      	movgt	r3, #1
 8000d04:	2300      	movle	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d0e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bfcc      	ite	gt
 8000d16:	2301      	movgt	r3, #1
 8000d18:	2300      	movle	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d22:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bfcc      	ite	gt
 8000d2a:	2301      	movgt	r3, #1
 8000d2c:	2300      	movle	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f107 0008 	add.w	r0, r7, #8
 8000d34:	9303      	str	r3, [sp, #12]
 8000d36:	9402      	str	r4, [sp, #8]
 8000d38:	9101      	str	r1, [sp, #4]
 8000d3a:	9200      	str	r2, [sp, #0]
 8000d3c:	4633      	mov	r3, r6
 8000d3e:	462a      	mov	r2, r5
 8000d40:	4981      	ldr	r1, [pc, #516]	; (8000f48 <printRadioSettings+0x32c>)
 8000d42:	f002 ffa3 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fa48 	bl	80001e0 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f107 0108 	add.w	r1, r7, #8
 8000d58:	230a      	movs	r3, #10
 8000d5a:	4877      	ldr	r0, [pc, #476]	; (8000f38 <printRadioSettings+0x31c>)
 8000d5c:	f002 fc21 	bl	80035a2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d60:	2002      	movs	r0, #2
 8000d62:	f7ff fc53 	bl	800060c <NRF24_read_register>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d70:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bfcc      	ite	gt
 8000d78:	2301      	movgt	r3, #1
 8000d7a:	2300      	movle	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d84:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bfcc      	ite	gt
 8000d8c:	2301      	movgt	r3, #1
 8000d8e:	2300      	movle	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d98:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bfcc      	ite	gt
 8000da0:	2301      	movgt	r3, #1
 8000da2:	2300      	movle	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000da8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dac:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bfcc      	ite	gt
 8000db4:	2301      	movgt	r3, #1
 8000db6:	2300      	movle	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dc0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bfcc      	ite	gt
 8000dc8:	2301      	movgt	r3, #1
 8000dca:	2300      	movle	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000dd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dd4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bfcc      	ite	gt
 8000ddc:	2301      	movgt	r3, #1
 8000dde:	2300      	movle	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f107 0008 	add.w	r0, r7, #8
 8000de6:	9303      	str	r3, [sp, #12]
 8000de8:	9402      	str	r4, [sp, #8]
 8000dea:	9101      	str	r1, [sp, #4]
 8000dec:	9200      	str	r2, [sp, #0]
 8000dee:	4633      	mov	r3, r6
 8000df0:	462a      	mov	r2, r5
 8000df2:	4956      	ldr	r1, [pc, #344]	; (8000f4c <printRadioSettings+0x330>)
 8000df4:	f002 ff4a 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff f9ef 	bl	80001e0 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	f107 0108 	add.w	r1, r7, #8
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	484a      	ldr	r0, [pc, #296]	; (8000f38 <printRadioSettings+0x31c>)
 8000e0e:	f002 fbc8 	bl	80035a2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000e12:	2003      	movs	r0, #3
 8000e14:	f7ff fbfa 	bl	800060c <NRF24_read_register>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e26:	3302      	adds	r3, #2
 8000e28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e2c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4946      	ldr	r1, [pc, #280]	; (8000f50 <printRadioSettings+0x334>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 ff28 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff f9cd 	bl	80001e0 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f107 0108 	add.w	r1, r7, #8
 8000e4e:	230a      	movs	r3, #10
 8000e50:	4839      	ldr	r0, [pc, #228]	; (8000f38 <printRadioSettings+0x31c>)
 8000e52:	f002 fba6 	bl	80035a2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e56:	2005      	movs	r0, #5
 8000e58:	f7ff fbd8 	bl	800060c <NRF24_read_register>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4939      	ldr	r1, [pc, #228]	; (8000f54 <printRadioSettings+0x338>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 ff0b 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f9b0 	bl	80001e0 <strlen>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	f107 0108 	add.w	r1, r7, #8
 8000e88:	230a      	movs	r3, #10
 8000e8a:	482b      	ldr	r0, [pc, #172]	; (8000f38 <printRadioSettings+0x31c>)
 8000e8c:	f002 fb89 	bl	80035a2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e90:	2006      	movs	r0, #6
 8000e92:	f7ff fbbb 	bl	800060c <NRF24_read_register>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <printRadioSettings+0x29a>
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	492a      	ldr	r1, [pc, #168]	; (8000f58 <printRadioSettings+0x33c>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 feec 	bl	8003c8c <siprintf>
 8000eb4:	e005      	b.n	8000ec2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4928      	ldr	r1, [pc, #160]	; (8000f5c <printRadioSettings+0x340>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fee5 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff f98a 	bl	80001e0 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f107 0108 	add.w	r1, r7, #8
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	4818      	ldr	r0, [pc, #96]	; (8000f38 <printRadioSettings+0x31c>)
 8000ed8:	f002 fb63 	bl	80035a2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee0:	f003 0306 	and.w	r3, r3, #6
 8000ee4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000ee8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eec:	085b      	lsrs	r3, r3, #1
 8000eee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <printRadioSettings+0x2ec>
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4918      	ldr	r1, [pc, #96]	; (8000f60 <printRadioSettings+0x344>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fec3 	bl	8003c8c <siprintf>
 8000f06:	e03b      	b.n	8000f80 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d106      	bne.n	8000f1e <printRadioSettings+0x302>
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4913      	ldr	r1, [pc, #76]	; (8000f64 <printRadioSettings+0x348>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 feb8 	bl	8003c8c <siprintf>
 8000f1c:	e030      	b.n	8000f80 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000f1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d122      	bne.n	8000f6c <printRadioSettings+0x350>
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	490f      	ldr	r1, [pc, #60]	; (8000f68 <printRadioSettings+0x34c>)
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fead 	bl	8003c8c <siprintf>
 8000f32:	e025      	b.n	8000f80 <printRadioSettings+0x364>
 8000f34:	080045ec 	.word	0x080045ec
 8000f38:	200000e8 	.word	0x200000e8
 8000f3c:	08004620 	.word	0x08004620
 8000f40:	0800463c 	.word	0x0800463c
 8000f44:	08004658 	.word	0x08004658
 8000f48:	0800466c 	.word	0x0800466c
 8000f4c:	080046b0 	.word	0x080046b0
 8000f50:	080046fc 	.word	0x080046fc
 8000f54:	08004718 	.word	0x08004718
 8000f58:	0800472c 	.word	0x0800472c
 8000f5c:	08004744 	.word	0x08004744
 8000f60:	0800475c 	.word	0x0800475c
 8000f64:	08004770 	.word	0x08004770
 8000f68:	08004784 	.word	0x08004784
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000f6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d105      	bne.n	8000f80 <printRadioSettings+0x364>
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	49d7      	ldr	r1, [pc, #860]	; (80012d8 <printRadioSettings+0x6bc>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fe86 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f92b 	bl	80001e0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f107 0108 	add.w	r1, r7, #8
 8000f92:	230a      	movs	r3, #10
 8000f94:	48d1      	ldr	r0, [pc, #836]	; (80012dc <printRadioSettings+0x6c0>)
 8000f96:	f002 fb04 	bl	80035a2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f7ff fb5b 	bl	800065c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fa6:	793b      	ldrb	r3, [r7, #4]
 8000fa8:	461c      	mov	r4, r3
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	461d      	mov	r5, r3
 8000fae:	78bb      	ldrb	r3, [r7, #2]
 8000fb0:	787a      	ldrb	r2, [r7, #1]
 8000fb2:	7839      	ldrb	r1, [r7, #0]
 8000fb4:	f107 0008 	add.w	r0, r7, #8
 8000fb8:	9102      	str	r1, [sp, #8]
 8000fba:	9201      	str	r2, [sp, #4]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	462b      	mov	r3, r5
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	49c7      	ldr	r1, [pc, #796]	; (80012e0 <printRadioSettings+0x6c4>)
 8000fc4:	f002 fe62 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f907 	bl	80001e0 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f107 0108 	add.w	r1, r7, #8
 8000fda:	230a      	movs	r3, #10
 8000fdc:	48bf      	ldr	r0, [pc, #764]	; (80012dc <printRadioSettings+0x6c0>)
 8000fde:	f002 fae0 	bl	80035a2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f7ff fb37 	bl	800065c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fee:	793b      	ldrb	r3, [r7, #4]
 8000ff0:	461c      	mov	r4, r3
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	78bb      	ldrb	r3, [r7, #2]
 8000ff8:	787a      	ldrb	r2, [r7, #1]
 8000ffa:	7839      	ldrb	r1, [r7, #0]
 8000ffc:	f107 0008 	add.w	r0, r7, #8
 8001000:	9102      	str	r1, [sp, #8]
 8001002:	9201      	str	r2, [sp, #4]
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	462b      	mov	r3, r5
 8001008:	4622      	mov	r2, r4
 800100a:	49b6      	ldr	r1, [pc, #728]	; (80012e4 <printRadioSettings+0x6c8>)
 800100c:	f002 fe3e 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f8e3 	bl	80001e0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f107 0108 	add.w	r1, r7, #8
 8001022:	230a      	movs	r3, #10
 8001024:	48ad      	ldr	r0, [pc, #692]	; (80012dc <printRadioSettings+0x6c0>)
 8001026:	f002 fabc 	bl	80035a2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800102a:	463b      	mov	r3, r7
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	200c      	movs	r0, #12
 8001032:	f7ff fb13 	bl	800065c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001036:	783b      	ldrb	r3, [r7, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	49aa      	ldr	r1, [pc, #680]	; (80012e8 <printRadioSettings+0x6cc>)
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fe23 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8c8 	bl	80001e0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	230a      	movs	r3, #10
 800105a:	48a0      	ldr	r0, [pc, #640]	; (80012dc <printRadioSettings+0x6c0>)
 800105c:	f002 faa1 	bl	80035a2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001060:	463b      	mov	r3, r7
 8001062:	2201      	movs	r2, #1
 8001064:	4619      	mov	r1, r3
 8001066:	200d      	movs	r0, #13
 8001068:	f7ff faf8 	bl	800065c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800106c:	783b      	ldrb	r3, [r7, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	499d      	ldr	r1, [pc, #628]	; (80012ec <printRadioSettings+0x6d0>)
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fe08 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f8ad 	bl	80001e0 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	f107 0108 	add.w	r1, r7, #8
 800108e:	230a      	movs	r3, #10
 8001090:	4892      	ldr	r0, [pc, #584]	; (80012dc <printRadioSettings+0x6c0>)
 8001092:	f002 fa86 	bl	80035a2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001096:	463b      	mov	r3, r7
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	200e      	movs	r0, #14
 800109e:	f7ff fadd 	bl	800065c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010a2:	783b      	ldrb	r3, [r7, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4991      	ldr	r1, [pc, #580]	; (80012f0 <printRadioSettings+0x6d4>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fded 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f892 	bl	80001e0 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f107 0108 	add.w	r1, r7, #8
 80010c4:	230a      	movs	r3, #10
 80010c6:	4885      	ldr	r0, [pc, #532]	; (80012dc <printRadioSettings+0x6c0>)
 80010c8:	f002 fa6b 	bl	80035a2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80010cc:	463b      	mov	r3, r7
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	200f      	movs	r0, #15
 80010d4:	f7ff fac2 	bl	800065c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010d8:	783b      	ldrb	r3, [r7, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4984      	ldr	r1, [pc, #528]	; (80012f4 <printRadioSettings+0x6d8>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fdd2 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f877 	bl	80001e0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	230a      	movs	r3, #10
 80010fc:	4877      	ldr	r0, [pc, #476]	; (80012dc <printRadioSettings+0x6c0>)
 80010fe:	f002 fa50 	bl	80035a2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001102:	463b      	mov	r3, r7
 8001104:	2205      	movs	r2, #5
 8001106:	4619      	mov	r1, r3
 8001108:	2010      	movs	r0, #16
 800110a:	f7ff faa7 	bl	800065c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800110e:	793b      	ldrb	r3, [r7, #4]
 8001110:	461c      	mov	r4, r3
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	461d      	mov	r5, r3
 8001116:	78bb      	ldrb	r3, [r7, #2]
 8001118:	787a      	ldrb	r2, [r7, #1]
 800111a:	7839      	ldrb	r1, [r7, #0]
 800111c:	f107 0008 	add.w	r0, r7, #8
 8001120:	9102      	str	r1, [sp, #8]
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	462b      	mov	r3, r5
 8001128:	4622      	mov	r2, r4
 800112a:	4973      	ldr	r1, [pc, #460]	; (80012f8 <printRadioSettings+0x6dc>)
 800112c:	f002 fdae 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f853 	bl	80001e0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f107 0108 	add.w	r1, r7, #8
 8001142:	230a      	movs	r3, #10
 8001144:	4865      	ldr	r0, [pc, #404]	; (80012dc <printRadioSettings+0x6c0>)
 8001146:	f002 fa2c 	bl	80035a2 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800114a:	2011      	movs	r0, #17
 800114c:	f7ff fa5e 	bl	800060c <NRF24_read_register>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001156:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4966      	ldr	r1, [pc, #408]	; (80012fc <printRadioSettings+0x6e0>)
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fd91 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f836 	bl	80001e0 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f107 0108 	add.w	r1, r7, #8
 800117c:	230a      	movs	r3, #10
 800117e:	4857      	ldr	r0, [pc, #348]	; (80012dc <printRadioSettings+0x6c0>)
 8001180:	f002 fa0f 	bl	80035a2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001184:	2012      	movs	r0, #18
 8001186:	f7ff fa41 	bl	800060c <NRF24_read_register>
 800118a:	4603      	mov	r3, r0
 800118c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001190:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001194:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4958      	ldr	r1, [pc, #352]	; (8001300 <printRadioSettings+0x6e4>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fd74 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f819 	bl	80001e0 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f107 0108 	add.w	r1, r7, #8
 80011b6:	230a      	movs	r3, #10
 80011b8:	4848      	ldr	r0, [pc, #288]	; (80012dc <printRadioSettings+0x6c0>)
 80011ba:	f002 f9f2 	bl	80035a2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80011be:	2013      	movs	r0, #19
 80011c0:	f7ff fa24 	bl	800060c <NRF24_read_register>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	494b      	ldr	r1, [pc, #300]	; (8001304 <printRadioSettings+0x6e8>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fd57 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7fe fffc 	bl	80001e0 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f107 0108 	add.w	r1, r7, #8
 80011f0:	230a      	movs	r3, #10
 80011f2:	483a      	ldr	r0, [pc, #232]	; (80012dc <printRadioSettings+0x6c0>)
 80011f4:	f002 f9d5 	bl	80035a2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80011f8:	2014      	movs	r0, #20
 80011fa:	f7ff fa07 	bl	800060c <NRF24_read_register>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001204:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001208:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	493d      	ldr	r1, [pc, #244]	; (8001308 <printRadioSettings+0x6ec>)
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fd3a 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4618      	mov	r0, r3
 800121e:	f7fe ffdf 	bl	80001e0 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	f107 0108 	add.w	r1, r7, #8
 800122a:	230a      	movs	r3, #10
 800122c:	482b      	ldr	r0, [pc, #172]	; (80012dc <printRadioSettings+0x6c0>)
 800122e:	f002 f9b8 	bl	80035a2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001232:	2015      	movs	r0, #21
 8001234:	f7ff f9ea 	bl	800060c <NRF24_read_register>
 8001238:	4603      	mov	r3, r0
 800123a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800123e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4930      	ldr	r1, [pc, #192]	; (800130c <printRadioSettings+0x6f0>)
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fd1d 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ffc2 	bl	80001e0 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f107 0108 	add.w	r1, r7, #8
 8001264:	230a      	movs	r3, #10
 8001266:	481d      	ldr	r0, [pc, #116]	; (80012dc <printRadioSettings+0x6c0>)
 8001268:	f002 f99b 	bl	80035a2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800126c:	2016      	movs	r0, #22
 800126e:	f7ff f9cd 	bl	800060c <NRF24_read_register>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001278:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800127c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4922      	ldr	r1, [pc, #136]	; (8001310 <printRadioSettings+0x6f4>)
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fd00 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffa5 	bl	80001e0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 0108 	add.w	r1, r7, #8
 800129e:	230a      	movs	r3, #10
 80012a0:	480e      	ldr	r0, [pc, #56]	; (80012dc <printRadioSettings+0x6c0>)
 80012a2:	f002 f97e 	bl	80035a2 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80012a6:	201c      	movs	r0, #28
 80012a8:	f7ff f9b0 	bl	800060c <NRF24_read_register>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfcc      	ite	gt
 80012be:	2301      	movgt	r3, #1
 80012c0:	2300      	movle	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bfcc      	ite	gt
 80012d2:	2301      	movgt	r3, #1
 80012d4:	2300      	movle	r3, #0
 80012d6:	e01d      	b.n	8001314 <printRadioSettings+0x6f8>
 80012d8:	08004798 	.word	0x08004798
 80012dc:	200000e8 	.word	0x200000e8
 80012e0:	080047ac 	.word	0x080047ac
 80012e4:	080047dc 	.word	0x080047dc
 80012e8:	0800480c 	.word	0x0800480c
 80012ec:	08004834 	.word	0x08004834
 80012f0:	0800485c 	.word	0x0800485c
 80012f4:	08004884 	.word	0x08004884
 80012f8:	080048ac 	.word	0x080048ac
 80012fc:	080048d8 	.word	0x080048d8
 8001300:	080048f4 	.word	0x080048f4
 8001304:	08004910 	.word	0x08004910
 8001308:	0800492c 	.word	0x0800492c
 800130c:	08004948 	.word	0x08004948
 8001310:	08004964 	.word	0x08004964
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001318:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfcc      	ite	gt
 8001324:	2301      	movgt	r3, #1
 8001326:	2300      	movle	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800132c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001330:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001334:	2b00      	cmp	r3, #0
 8001336:	bfcc      	ite	gt
 8001338:	2301      	movgt	r3, #1
 800133a:	2300      	movle	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001340:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001344:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001348:	2b00      	cmp	r3, #0
 800134a:	bfcc      	ite	gt
 800134c:	2301      	movgt	r3, #1
 800134e:	2300      	movle	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800135c:	2b00      	cmp	r3, #0
 800135e:	bfcc      	ite	gt
 8001360:	2301      	movgt	r3, #1
 8001362:	2300      	movle	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f107 0008 	add.w	r0, r7, #8
 800136a:	9303      	str	r3, [sp, #12]
 800136c:	9402      	str	r4, [sp, #8]
 800136e:	9101      	str	r1, [sp, #4]
 8001370:	9200      	str	r2, [sp, #0]
 8001372:	4633      	mov	r3, r6
 8001374:	462a      	mov	r2, r5
 8001376:	4936      	ldr	r1, [pc, #216]	; (8001450 <printRadioSettings+0x834>)
 8001378:	f002 fc88 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ff2d 	bl	80001e0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f107 0108 	add.w	r1, r7, #8
 800138e:	230a      	movs	r3, #10
 8001390:	4830      	ldr	r0, [pc, #192]	; (8001454 <printRadioSettings+0x838>)
 8001392:	f002 f906 	bl	80035a2 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001396:	201d      	movs	r0, #29
 8001398:	f7ff f938 	bl	800060c <NRF24_read_register>
 800139c:	4603      	mov	r3, r0
 800139e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80013a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <printRadioSettings+0x7a0>
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4929      	ldr	r1, [pc, #164]	; (8001458 <printRadioSettings+0x83c>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fc69 	bl	8003c8c <siprintf>
 80013ba:	e005      	b.n	80013c8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4926      	ldr	r1, [pc, #152]	; (800145c <printRadioSettings+0x840>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fc62 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff07 	bl	80001e0 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	f107 0108 	add.w	r1, r7, #8
 80013da:	230a      	movs	r3, #10
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <printRadioSettings+0x838>)
 80013de:	f002 f8e0 	bl	80035a2 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80013e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <printRadioSettings+0x7e0>
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <printRadioSettings+0x844>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fc49 	bl	8003c8c <siprintf>
 80013fa:	e005      	b.n	8001408 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4918      	ldr	r1, [pc, #96]	; (8001464 <printRadioSettings+0x848>)
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fc42 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fee7 	bl	80001e0 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f107 0108 	add.w	r1, r7, #8
 800141a:	230a      	movs	r3, #10
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <printRadioSettings+0x838>)
 800141e:	f002 f8c0 	bl	80035a2 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4910      	ldr	r1, [pc, #64]	; (8001468 <printRadioSettings+0x84c>)
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fc2f 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fed4 	bl	80001e0 <strlen>
 8001438:	4603      	mov	r3, r0
 800143a:	b29a      	uxth	r2, r3
 800143c:	f107 0108 	add.w	r1, r7, #8
 8001440:	230a      	movs	r3, #10
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <printRadioSettings+0x838>)
 8001444:	f002 f8ad 	bl	80035a2 <HAL_UART_Transmit>
}
 8001448:	bf00      	nop
 800144a:	3774      	adds	r7, #116	; 0x74
 800144c:	46bd      	mov	sp, r7
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	08004980 	.word	0x08004980
 8001454:	200000e8 	.word	0x200000e8
 8001458:	080049cc 	.word	0x080049cc
 800145c:	080049e4 	.word	0x080049e4
 8001460:	080049fc 	.word	0x080049fc
 8001464:	08004a18 	.word	0x08004a18
 8001468:	080045ec 	.word	0x080045ec

0800146c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800146c:	b084      	sub	sp, #16
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
 8001472:	f107 0c08 	add.w	ip, r7, #8
 8001476:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <nrf24_DebugUART_Init+0x2c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	2244      	movs	r2, #68	; 0x44
 8001484:	4619      	mov	r1, r3
 8001486:	f002 fc55 	bl	8003d34 <memcpy>
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001492:	b004      	add	sp, #16
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200000e8 	.word	0x200000e8

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fafe 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f816 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f000 f8de 	bl	8001668 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014ac:	f000 f87c 	bl	80015a8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80014b0:	f000 f8b0 	bl	8001614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	nrf_init();
 80014b4:	f000 f956 	bl	8001764 <nrf_init>
	Switch_to_Transmitt_mode();
 80014b8:	f000 f988 	bl	80017cc <Switch_to_Transmitt_mode>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		send_DP_sensor_value_to_gateway();
//		HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY();
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 80014bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <main+0x34>)
 80014c2:	f000 fe06 	bl	80020d2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80014c6:	2064      	movs	r0, #100	; 0x64
 80014c8:	f000 fb5c 	bl	8001b84 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 80014cc:	e7f6      	b.n	80014bc <main+0x20>
 80014ce:	bf00      	nop
 80014d0:	40020800 	.word	0x40020800

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2230      	movs	r2, #48	; 0x30
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fbf2 	bl	8003ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <SystemClock_Config+0xcc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <SystemClock_Config+0xcc>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <SystemClock_Config+0xcc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <SystemClock_Config+0xd0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001520:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <SystemClock_Config+0xd0>)
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <SystemClock_Config+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153c:	2310      	movs	r3, #16
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001540:	2302      	movs	r3, #2
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001544:	2300      	movs	r3, #0
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001548:	2308      	movs	r3, #8
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800154c:	2348      	movs	r3, #72	; 0x48
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001554:	2304      	movs	r3, #4
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fdd3 	bl	8002108 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001568:	f000 f8f6 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	230f      	movs	r3, #15
 800156e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2302      	movs	r3, #2
 8001572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2102      	movs	r1, #2
 8001588:	4618      	mov	r0, r3
 800158a:	f001 f835 	bl	80025f8 <HAL_RCC_ClockConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001594:	f000 f8e0 	bl	8001758 <Error_Handler>
  }
}
 8001598:	bf00      	nop
 800159a:	3750      	adds	r7, #80	; 0x50
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_SPI2_Init+0x64>)
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <MX_SPI2_Init+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_SPI2_Init+0x64>)
 80015b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_SPI2_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_SPI2_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_SPI2_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_SPI2_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_SPI2_Init+0x64>)
 80015d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_SPI2_Init+0x64>)
 80015dc:	2220      	movs	r2, #32
 80015de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <MX_SPI2_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_SPI2_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <MX_SPI2_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_SPI2_Init+0x64>)
 80015f4:	220a      	movs	r2, #10
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_SPI2_Init+0x64>)
 80015fa:	f001 f9dd 	bl	80029b8 <HAL_SPI_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001604:	f000 f8a8 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000012c 	.word	0x2000012c
 8001610:	40003800 	.word	0x40003800

08001614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART2_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800164c:	f001 ff5c 	bl	8003508 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f000 f87f 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000184 	.word	0x20000184
 8001664:	40004400 	.word	0x40004400

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b32      	ldr	r3, [pc, #200]	; (800174c <MX_GPIO_Init+0xe4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a31      	ldr	r2, [pc, #196]	; (800174c <MX_GPIO_Init+0xe4>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <MX_GPIO_Init+0xe4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_GPIO_Init+0xe4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2a      	ldr	r2, [pc, #168]	; (800174c <MX_GPIO_Init+0xe4>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <MX_GPIO_Init+0xe4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <MX_GPIO_Init+0xe4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <MX_GPIO_Init+0xe4>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_GPIO_Init+0xe4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_GPIO_Init+0xe4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MX_GPIO_Init+0xe4>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_GPIO_Init+0xe4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f4:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016f6:	f000 fcd3 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_PIN_Pin|CE_PIN_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001700:	4814      	ldr	r0, [pc, #80]	; (8001754 <MX_GPIO_Init+0xec>)
 8001702:	f000 fccd 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_GPIO_Init+0xe8>)
 8001720:	f000 fb3a 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_PIN_Pin CE_PIN_Pin */
  GPIO_InitStruct.Pin = CSN_PIN_Pin|CE_PIN_Pin;
 8001724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_GPIO_Init+0xec>)
 800173e:	f000 fb2b 	bl	8001d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40020800 	.word	0x40020800
 8001754:	40020000 	.word	0x40020000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <nrf_init>:
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
#define NRF_SPI_PORT hspi2

void nrf_init(void) {
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	b097      	sub	sp, #92	; 0x5c
 8001768:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(CE_PIN_GPIO_Port, CSN_PIN_Pin, CE_PIN_Pin, NRF_SPI_PORT);
 800176a:	4c15      	ldr	r4, [pc, #84]	; (80017c0 <nrf_init+0x5c>)
 800176c:	4668      	mov	r0, sp
 800176e:	1d23      	adds	r3, r4, #4
 8001770:	2254      	movs	r2, #84	; 0x54
 8001772:	4619      	mov	r1, r3
 8001774:	f002 fade 	bl	8003d34 <memcpy>
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001782:	4810      	ldr	r0, [pc, #64]	; (80017c4 <nrf_init+0x60>)
 8001784:	f7fe ffec 	bl	8000760 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001788:	4e0f      	ldr	r6, [pc, #60]	; (80017c8 <nrf_init+0x64>)
 800178a:	466d      	mov	r5, sp
 800178c:	f106 0410 	add.w	r4, r6, #16
 8001790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	602b      	str	r3, [r5, #0]
 80017a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017a4:	f7ff fe62 	bl	800146c <nrf24_DebugUART_Init>
	NRF24_setAutoAck(true);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff f949 	bl	8000a40 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 80017ae:	2020      	movs	r0, #32
 80017b0:	f7ff f916 	bl	80009e0 <NRF24_setPayloadSize>
//	NRF24_stopListening();
//	NRF24_openWritingPipe(target_pipe_addr);
//	NRF24_setChannel(node_channel_addr);
	printRadioSettings();
 80017b4:	f7ff fa32 	bl	8000c1c <printRadioSettings>
}
 80017b8:	bf00      	nop
 80017ba:	3704      	adds	r7, #4
 80017bc:	46bd      	mov	sp, r7
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c0:	2000012c 	.word	0x2000012c
 80017c4:	40020000 	.word	0x40020000
 80017c8:	20000184 	.word	0x20000184

080017cc <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	NRF24_stopListening();
 80017d0:	f7ff f8a6 	bl	8000920 <NRF24_stopListening>
	NRF24_openWritingPipe(target_pipe_addr);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <Switch_to_Transmitt_mode+0x24>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f8ab 	bl	8000938 <NRF24_openWritingPipe>
	NRF24_setChannel(target_channel_addr);
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <Switch_to_Transmitt_mode+0x28>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f8e5 	bl	80009b6 <NRF24_setChannel>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000008 	.word	0x20000008

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <HAL_MspInit+0x4c>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <HAL_MspInit+0x4c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_SPI_MspInit+0x84>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d12c      	bne.n	80018c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_SPI_MspInit+0x88>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <HAL_SPI_MspInit+0x88>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_SPI_MspInit+0x88>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_SPI_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_SPI_MspInit+0x88>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_SPI_MspInit+0x88>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b4:	2305      	movs	r3, #5
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <HAL_SPI_MspInit+0x8c>)
 80018c0:	f000 fa6a 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40003800 	.word	0x40003800
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020400 	.word	0x40020400

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_UART_MspInit+0x84>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12b      	bne.n	8001952 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_UART_MspInit+0x88>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_UART_MspInit+0x88>)
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_UART_MspInit+0x88>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_UART_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_UART_MspInit+0x88>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_UART_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001932:	230c      	movs	r3, #12
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001942:	2307      	movs	r3, #7
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_UART_MspInit+0x8c>)
 800194e:	f000 fa23 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40004400 	.word	0x40004400
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 f8c6 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f002 f976 	bl	8003cdc <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20010000 	.word	0x20010000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	200001c8 	.word	0x200001c8
 8001a24:	20000318 	.word	0x20000318

08001a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a68:	4c0b      	ldr	r4, [pc, #44]	; (8001a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a76:	f7ff ffd7 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f002 f935 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7e:	f7ff fd0d 	bl	800149c <main>
  bx  lr    
 8001a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a90:	08004b8c 	.word	0x08004b8c
  ldr r2, =_sbss
 8001a94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a98:	20000318 	.word	0x20000318

08001a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_Init+0x40>)
 8001aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_Init+0x40>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x40>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f931 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fe90 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f93b 	bl	8001d7e <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f911 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000014 	.word	0x20000014
 8001b40:	20000010 	.word	0x20000010

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000014 	.word	0x20000014
 8001b68:	200001cc 	.word	0x200001cc

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200001cc 	.word	0x200001cc

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000014 	.word	0x20000014

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff47 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff5c 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffb0 	bl	8001cec <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e159      	b.n	8002068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 8148 	bne.w	8002062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d005      	beq.n	8001dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d130      	bne.n	8001e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 0201 	and.w	r2, r3, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d017      	beq.n	8001e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d123      	bne.n	8001edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	69b9      	ldr	r1, [r7, #24]
 8001ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a2 	beq.w	8002062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a56      	ldr	r2, [pc, #344]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b54      	ldr	r3, [pc, #336]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3a:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a49      	ldr	r2, [pc, #292]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x202>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_GPIO_Init+0x2f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x1fe>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a46      	ldr	r2, [pc, #280]	; (8002094 <HAL_GPIO_Init+0x2fc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x1f6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a45      	ldr	r2, [pc, #276]	; (8002098 <HAL_GPIO_Init+0x300>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x1f2>
 8001f86:	2304      	movs	r3, #4
 8001f88:	e008      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e004      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f002 0203 	and.w	r2, r2, #3
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fac:	4935      	ldr	r1, [pc, #212]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_GPIO_Init+0x304>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fde:	4a2f      	ldr	r2, [pc, #188]	; (800209c <HAL_GPIO_Init+0x304>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_GPIO_Init+0x304>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002008:	4a24      	ldr	r2, [pc, #144]	; (800209c <HAL_GPIO_Init+0x304>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_GPIO_Init+0x304>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002032:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_GPIO_Init+0x304>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_GPIO_Init+0x304>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_GPIO_Init+0x304>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3301      	adds	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b0f      	cmp	r3, #15
 800206c:	f67f aea2 	bls.w	8001db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	40013800 	.word	0x40013800
 8002088:	40020000 	.word	0x40020000
 800208c:	40020400 	.word	0x40020400
 8002090:	40020800 	.word	0x40020800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40021000 	.word	0x40021000
 800209c:	40013c00 	.word	0x40013c00

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	041a      	lsls	r2, r3, #16
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	400b      	ands	r3, r1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e267      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d075      	beq.n	8002212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d00c      	beq.n	800214c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b85      	ldr	r3, [pc, #532]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213a:	2b08      	cmp	r3, #8
 800213c:	d112      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b82      	ldr	r3, [pc, #520]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b7e      	ldr	r3, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05b      	beq.n	8002210 <HAL_RCC_OscConfig+0x108>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d157      	bne.n	8002210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e242      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x74>
 800216e:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b70      	ldr	r3, [pc, #448]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6f      	ldr	r2, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6c      	ldr	r2, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 80021a0:	4b69      	ldr	r3, [pc, #420]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a68      	ldr	r2, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a65      	ldr	r2, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fcd4 	bl	8001b6c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fcd0 	bl	8001b6c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e207      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xc0>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fcc0 	bl	8001b6c <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fcbc 	bl	8001b6c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1f3      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0xe8>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1c7      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4937      	ldr	r1, [pc, #220]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x244>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff fc75 	bl	8001b6c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fc71 	bl	8001b6c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1a8      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4925      	ldr	r1, [pc, #148]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_OscConfig+0x244>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff fc54 	bl	8001b6c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff fc50 	bl	8001b6c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e187      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d036      	beq.n	8002360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_RCC_OscConfig+0x248>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7ff fc34 	bl	8001b6c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fc30 	bl	8001b6c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e167      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800231c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x200>
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_OscConfig+0x248>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff fc1d 	bl	8001b6c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	e00e      	b.n	8002354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002336:	f7ff fc19 	bl	8001b6c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d907      	bls.n	8002354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e150      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002348:	40023800 	.word	0x40023800
 800234c:	42470000 	.word	0x42470000
 8002350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b88      	ldr	r3, [pc, #544]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ea      	bne.n	8002336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8097 	beq.w	800249c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a7c      	ldr	r2, [pc, #496]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b77      	ldr	r3, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b74      	ldr	r3, [pc, #464]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a73      	ldr	r2, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fbd9 	bl	8001b6c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff fbd5 	bl	8001b6c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e10c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2ea>
 80023e4:	4b64      	ldr	r3, [pc, #400]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a63      	ldr	r2, [pc, #396]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x30c>
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a5e      	ldr	r2, [pc, #376]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a5b      	ldr	r2, [pc, #364]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 8002414:	4b58      	ldr	r3, [pc, #352]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	4b55      	ldr	r3, [pc, #340]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a54      	ldr	r2, [pc, #336]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 0304 	bic.w	r3, r3, #4
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7ff fb9a 	bl	8001b6c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7ff fb96 	bl	8001b6c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0cb      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCC_OscConfig+0x334>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7ff fb84 	bl	8001b6c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7ff fb80 	bl	8001b6c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0b5      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a38      	ldr	r2, [pc, #224]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a1 	beq.w	80025e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d05c      	beq.n	800256c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d141      	bne.n	800253e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb54 	bl	8001b6c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fb50 	bl	8001b6c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e087      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	3b01      	subs	r3, #1
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	491b      	ldr	r1, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fb29 	bl	8001b6c <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff fb25 	bl	8001b6c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e05c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x416>
 800253c:	e054      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fb12 	bl	8001b6c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff fb0e 	bl	8001b6c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e045      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x444>
 800256a:	e03d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e038      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002578:	40023800 	.word	0x40023800
 800257c:	40007000 	.word	0x40007000
 8002580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4ec>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d121      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d11a      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fa40 	bl	8001b6c <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff fa3c 	bl	8001b6c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f9a0 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08004b30 	.word	0x08004b30
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	20000010 	.word	0x20000010

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b090      	sub	sp, #64	; 0x40
 80027ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
 80027d0:	2300      	movs	r3, #0
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d00d      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	f200 80a1 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x16c>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x3a>
 80027f6:	e09b      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_GetSysClockFreq+0x184>)
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027fc:	e09b      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 8002800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002802:	e098      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d028      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	2200      	movs	r2, #0
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	627a      	str	r2, [r7, #36]	; 0x24
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800282c:	2100      	movs	r1, #0
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 8002830:	fb03 f201 	mul.w	r2, r3, r1
 8002834:	2300      	movs	r3, #0
 8002836:	fb00 f303 	mul.w	r3, r0, r3
 800283a:	4413      	add	r3, r2
 800283c:	4a43      	ldr	r2, [pc, #268]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 800283e:	fba0 1202 	umull	r1, r2, r0, r2
 8002842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002844:	460a      	mov	r2, r1
 8002846:	62ba      	str	r2, [r7, #40]	; 0x28
 8002848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284a:	4413      	add	r3, r2
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	2200      	movs	r2, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	61fa      	str	r2, [r7, #28]
 8002856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800285e:	f7fd fd17 	bl	8000290 <__aeabi_uldivmod>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4613      	mov	r3, r2
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286a:	e053      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	2200      	movs	r2, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	617a      	str	r2, [r7, #20]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800287e:	f04f 0b00 	mov.w	fp, #0
 8002882:	4652      	mov	r2, sl
 8002884:	465b      	mov	r3, fp
 8002886:	f04f 0000 	mov.w	r0, #0
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	0159      	lsls	r1, r3, #5
 8002890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002894:	0150      	lsls	r0, r2, #5
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	ebb2 080a 	subs.w	r8, r2, sl
 800289e:	eb63 090b 	sbc.w	r9, r3, fp
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028b6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ba:	eb63 0509 	sbc.w	r5, r3, r9
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	00eb      	lsls	r3, r5, #3
 80028c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028cc:	00e2      	lsls	r2, r4, #3
 80028ce:	4614      	mov	r4, r2
 80028d0:	461d      	mov	r5, r3
 80028d2:	eb14 030a 	adds.w	r3, r4, sl
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	eb45 030b 	adc.w	r3, r5, fp
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	2200      	movs	r2, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002908:	f7fd fcc2 	bl	8000290 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetSysClockFreq+0x184>)
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002938:	4618      	mov	r0, r3
 800293a:	3740      	adds	r7, #64	; 0x40
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400
 800294c:	017d7840 	.word	0x017d7840

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_RCC_GetHCLKFreq+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000000c 	.word	0x2000000c

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff0 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0a9b      	lsrs	r3, r3, #10
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	08004b40 	.word	0x08004b40

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff ffdc 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08004b40 	.word	0x08004b40

080029b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07b      	b.n	8002ac2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029da:	d009      	beq.n	80029f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
 80029e2:	e005      	b.n	80029f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe ff1c 	bl	8001848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f003 0104 	and.w	r1, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f003 0210 	and.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b088      	sub	sp, #32
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_SPI_Transmit+0x22>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e126      	b.n	8002d3a <HAL_SPI_Transmit+0x270>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002af4:	f7ff f83a 	bl	8001b6c <HAL_GetTick>
 8002af8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b0e:	e10b      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0x52>
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b20:	e102      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b68:	d10f      	bne.n	8002b8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d007      	beq.n	8002ba8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb0:	d14b      	bne.n	8002c4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_SPI_Transmit+0xf6>
 8002bba:	8afb      	ldrh	r3, [r7, #22]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d13e      	bne.n	8002c3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002be4:	e02b      	b.n	8002c3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d112      	bne.n	8002c1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	881a      	ldrh	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	1c9a      	adds	r2, r3, #2
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c18:	e011      	b.n	8002c3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1a:	f7fe ffa7 	bl	8001b6c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d803      	bhi.n	8002c32 <HAL_SPI_Transmit+0x168>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d102      	bne.n	8002c38 <HAL_SPI_Transmit+0x16e>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c3c:	e074      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ce      	bne.n	8002be6 <HAL_SPI_Transmit+0x11c>
 8002c48:	e04c      	b.n	8002ce4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x18e>
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d140      	bne.n	8002cda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c7e:	e02c      	b.n	8002cda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d113      	bne.n	8002cb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cb4:	e011      	b.n	8002cda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb6:	f7fe ff59 	bl	8001b6c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d803      	bhi.n	8002cce <HAL_SPI_Transmit+0x204>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d102      	bne.n	8002cd4 <HAL_SPI_Transmit+0x20a>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cd8:	e026      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1cd      	bne.n	8002c80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fbcb 	bl	8003484 <SPI_EndRxTxTransaction>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e000      	b.n	8002d28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b088      	sub	sp, #32
 8002d46:	af02      	add	r7, sp, #8
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5e:	d112      	bne.n	8002d86 <HAL_SPI_Receive+0x44>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f8f1 	bl	8002f64 <HAL_SPI_TransmitReceive>
 8002d82:	4603      	mov	r3, r0
 8002d84:	e0ea      	b.n	8002f5c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_SPI_Receive+0x52>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0e3      	b.n	8002f5c <HAL_SPI_Receive+0x21a>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9c:	f7fe fee6 	bl	8001b6c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002db2:	e0ca      	b.n	8002f4a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Receive+0x7e>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dc4:	e0c1      	b.n	8002f4a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	88fa      	ldrh	r2, [r7, #6]
 8002de4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0c:	d10f      	bne.n	8002e2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d007      	beq.n	8002e4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d162      	bne.n	8002f1a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e54:	e02e      	b.n	8002eb4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d115      	bne.n	8002e90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f103 020c 	add.w	r2, r3, #12
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e8e:	e011      	b.n	8002eb4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e90:	f7fe fe6c 	bl	8001b6c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d803      	bhi.n	8002ea8 <HAL_SPI_Receive+0x166>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d102      	bne.n	8002eae <HAL_SPI_Receive+0x16c>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002eb2:	e04a      	b.n	8002f4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1cb      	bne.n	8002e56 <HAL_SPI_Receive+0x114>
 8002ebe:	e031      	b.n	8002f24 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d113      	bne.n	8002ef6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ef4:	e011      	b.n	8002f1a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ef6:	f7fe fe39 	bl	8001b6c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d803      	bhi.n	8002f0e <HAL_SPI_Receive+0x1cc>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d102      	bne.n	8002f14 <HAL_SPI_Receive+0x1d2>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f18:	e017      	b.n	8002f4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1cd      	bne.n	8002ec0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	6839      	ldr	r1, [r7, #0]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fa45 	bl	80033b8 <SPI_EndRxTransaction>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
 8002f46:	e000      	b.n	8002f4a <HAL_SPI_Receive+0x208>
  }

error :
 8002f48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	; 0x30
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f72:	2301      	movs	r3, #1
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x26>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e18a      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x33c>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f92:	f7fe fdeb 	bl	8001b6c <HAL_GetTick>
 8002f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d00f      	beq.n	8002fd4 <HAL_SPI_TransmitReceive+0x70>
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fba:	d107      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x68>
 8002fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d003      	beq.n	8002fd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fd2:	e15b      	b.n	800328c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_SPI_TransmitReceive+0x82>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_SPI_TransmitReceive+0x82>
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fec:	e14e      	b.n	800328c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d003      	beq.n	8003002 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	887a      	ldrh	r2, [r7, #2]
 8003012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	887a      	ldrh	r2, [r7, #2]
 800302a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d007      	beq.n	8003056 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305e:	d178      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_TransmitReceive+0x10a>
 8003068:	8b7b      	ldrh	r3, [r7, #26]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d166      	bne.n	800313c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	881a      	ldrh	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	1c9a      	adds	r2, r3, #2
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003092:	e053      	b.n	800313c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d11b      	bne.n	80030da <HAL_SPI_TransmitReceive+0x176>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d016      	beq.n	80030da <HAL_SPI_TransmitReceive+0x176>
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d113      	bne.n	80030da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	881a      	ldrh	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	1c9a      	adds	r2, r3, #2
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d119      	bne.n	800311c <HAL_SPI_TransmitReceive+0x1b8>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d014      	beq.n	800311c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	b292      	uxth	r2, r2
 80030fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	1c9a      	adds	r2, r3, #2
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003118:	2301      	movs	r3, #1
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800311c:	f7fe fd26 	bl	8001b6c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003128:	429a      	cmp	r2, r3
 800312a:	d807      	bhi.n	800313c <HAL_SPI_TransmitReceive+0x1d8>
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003132:	d003      	beq.n	800313c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800313a:	e0a7      	b.n	800328c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1a6      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x130>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1a1      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x130>
 8003150:	e07c      	b.n	800324c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x1fc>
 800315a:	8b7b      	ldrh	r3, [r7, #26]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d16b      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003186:	e057      	b.n	8003238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d11c      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x26c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x26c>
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d114      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d119      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x2ae>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d014      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800320e:	2301      	movs	r3, #1
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003212:	f7fe fcab 	bl	8001b6c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321e:	429a      	cmp	r2, r3
 8003220:	d803      	bhi.n	800322a <HAL_SPI_TransmitReceive+0x2c6>
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d102      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x2cc>
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003236:	e029      	b.n	800328c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1a2      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x224>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d19d      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f917 	bl	8003484 <SPI_EndRxTxTransaction>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003268:	e010      	b.n	800328c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	e000      	b.n	800328c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800328a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800329c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3730      	adds	r7, #48	; 0x30
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032b8:	f7fe fc58 	bl	8001b6c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032c8:	f7fe fc50 	bl	8001b6c <HAL_GetTick>
 80032cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ce:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	015b      	lsls	r3, r3, #5
 80032d4:	0d1b      	lsrs	r3, r3, #20
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032de:	e054      	b.n	800338a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d050      	beq.n	800338a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032e8:	f7fe fc40 	bl	8001b6c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d902      	bls.n	80032fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d13d      	bne.n	800337a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800330c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003316:	d111      	bne.n	800333c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003320:	d004      	beq.n	800332c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	d107      	bne.n	800333c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003344:	d10f      	bne.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003364:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e017      	b.n	80033aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3b01      	subs	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d19b      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2000000c 	.word	0x2000000c

080033b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033cc:	d111      	bne.n	80033f2 <SPI_EndRxTransaction+0x3a>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d6:	d004      	beq.n	80033e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d107      	bne.n	80033f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033fa:	d12a      	bne.n	8003452 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003404:	d012      	beq.n	800342c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	2180      	movs	r1, #128	; 0x80
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff ff49 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d02d      	beq.n	8003478 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e026      	b.n	800347a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2200      	movs	r2, #0
 8003434:	2101      	movs	r1, #1
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff ff36 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01a      	beq.n	8003478 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e013      	b.n	800347a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2200      	movs	r2, #0
 800345a:	2101      	movs	r1, #1
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff ff23 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e000      	b.n	800347a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <SPI_EndRxTxTransaction+0x7c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <SPI_EndRxTxTransaction+0x80>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0d5b      	lsrs	r3, r3, #21
 800349c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d112      	bne.n	80034d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fef4 	bl	80032a8 <SPI_WaitFlagStateUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e00f      	b.n	80034f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3b01      	subs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d0f2      	beq.n	80034d6 <SPI_EndRxTxTransaction+0x52>
 80034f0:	e000      	b.n	80034f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80034f2:	bf00      	nop
  }

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000000c 	.word	0x2000000c
 8003504:	165e9f81 	.word	0x165e9f81

08003508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e03f      	b.n	800359a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe f9d2 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f929 	bl	80037a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08a      	sub	sp, #40	; 0x28
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d17c      	bne.n	80036bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x2c>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e075      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x3e>
 80035dc:	2302      	movs	r3, #2
 80035de:	e06e      	b.n	80036be <HAL_UART_Transmit+0x11c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	; 0x21
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f6:	f7fe fab9 	bl	8001b6c <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d108      	bne.n	8003624 <HAL_UART_Transmit+0x82>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e003      	b.n	800362c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003634:	e02a      	b.n	800368c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f840 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e036      	b.n	80036be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3302      	adds	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e007      	b.n	800367e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cf      	bne.n	8003636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f810 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b090      	sub	sp, #64	; 0x40
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d6:	e050      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d04c      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e6:	f7fe fa41 	bl	8001b6c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d241      	bcs.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003716:	637a      	str	r2, [r7, #52]	; 0x34
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	613b      	str	r3, [r7, #16]
   return(result);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	63bb      	str	r3, [r7, #56]	; 0x38
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800374a:	623a      	str	r2, [r7, #32]
 800374c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	69f9      	ldr	r1, [r7, #28]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	61bb      	str	r3, [r7, #24]
   return(result);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e00f      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	429a      	cmp	r2, r3
 8003796:	d09f      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3740      	adds	r7, #64	; 0x40
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b0c0      	sub	sp, #256	; 0x100
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	68d9      	ldr	r1, [r3, #12]
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	ea40 0301 	orr.w	r3, r0, r1
 80037cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037fc:	f021 010c 	bic.w	r1, r1, #12
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800380a:	430b      	orrs	r3, r1
 800380c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	6999      	ldr	r1, [r3, #24]
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	ea40 0301 	orr.w	r3, r0, r1
 800382a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <UART_SetConfig+0x2cc>)
 8003834:	429a      	cmp	r2, r3
 8003836:	d005      	beq.n	8003844 <UART_SetConfig+0xa0>
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b8d      	ldr	r3, [pc, #564]	; (8003a74 <UART_SetConfig+0x2d0>)
 8003840:	429a      	cmp	r2, r3
 8003842:	d104      	bne.n	800384e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7ff f8a4 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8003848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800384c:	e003      	b.n	8003856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384e:	f7ff f88b 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8003852:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003860:	f040 810c 	bne.w	8003a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800386e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	1891      	adds	r1, r2, r2
 800387c:	65b9      	str	r1, [r7, #88]	; 0x58
 800387e:	415b      	adcs	r3, r3
 8003880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003886:	4621      	mov	r1, r4
 8003888:	eb12 0801 	adds.w	r8, r2, r1
 800388c:	4629      	mov	r1, r5
 800388e:	eb43 0901 	adc.w	r9, r3, r1
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a6:	4690      	mov	r8, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	eb18 0303 	adds.w	r3, r8, r3
 80038b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038b4:	462b      	mov	r3, r5
 80038b6:	eb49 0303 	adc.w	r3, r9, r3
 80038ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038d2:	460b      	mov	r3, r1
 80038d4:	18db      	adds	r3, r3, r3
 80038d6:	653b      	str	r3, [r7, #80]	; 0x50
 80038d8:	4613      	mov	r3, r2
 80038da:	eb42 0303 	adc.w	r3, r2, r3
 80038de:	657b      	str	r3, [r7, #84]	; 0x54
 80038e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038e8:	f7fc fcd2 	bl	8000290 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <UART_SetConfig+0x2d4>)
 80038f2:	fba3 2302 	umull	r2, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	011c      	lsls	r4, r3, #4
 80038fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003904:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800390c:	4642      	mov	r2, r8
 800390e:	464b      	mov	r3, r9
 8003910:	1891      	adds	r1, r2, r2
 8003912:	64b9      	str	r1, [r7, #72]	; 0x48
 8003914:	415b      	adcs	r3, r3
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800391c:	4641      	mov	r1, r8
 800391e:	eb12 0a01 	adds.w	sl, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb43 0b01 	adc.w	fp, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800393c:	4692      	mov	sl, r2
 800393e:	469b      	mov	fp, r3
 8003940:	4643      	mov	r3, r8
 8003942:	eb1a 0303 	adds.w	r3, sl, r3
 8003946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800394a:	464b      	mov	r3, r9
 800394c:	eb4b 0303 	adc.w	r3, fp, r3
 8003950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003960:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003968:	460b      	mov	r3, r1
 800396a:	18db      	adds	r3, r3, r3
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
 800396e:	4613      	mov	r3, r2
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800397a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800397e:	f7fc fc87 	bl	8000290 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4611      	mov	r1, r2
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <UART_SetConfig+0x2d4>)
 800398a:	fba3 2301 	umull	r2, r3, r3, r1
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	1acb      	subs	r3, r1, r3
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <UART_SetConfig+0x2d4>)
 80039a0:	fba3 2302 	umull	r2, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039ac:	441c      	add	r4, r3
 80039ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	1891      	adds	r1, r2, r2
 80039c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c8:	415b      	adcs	r3, r3
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d0:	4641      	mov	r1, r8
 80039d2:	1851      	adds	r1, r2, r1
 80039d4:	6339      	str	r1, [r7, #48]	; 0x30
 80039d6:	4649      	mov	r1, r9
 80039d8:	414b      	adcs	r3, r1
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039e8:	4659      	mov	r1, fp
 80039ea:	00cb      	lsls	r3, r1, #3
 80039ec:	4651      	mov	r1, sl
 80039ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f2:	4651      	mov	r1, sl
 80039f4:	00ca      	lsls	r2, r1, #3
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	4642      	mov	r2, r8
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a04:	464b      	mov	r3, r9
 8003a06:	460a      	mov	r2, r1
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a24:	460b      	mov	r3, r1
 8003a26:	18db      	adds	r3, r3, r3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	eb42 0303 	adc.w	r3, r2, r3
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a3a:	f7fc fc29 	bl	8000290 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <UART_SetConfig+0x2d4>)
 8003a44:	fba3 1302 	umull	r1, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2164      	movs	r1, #100	; 0x64
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3332      	adds	r3, #50	; 0x32
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <UART_SetConfig+0x2d4>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4422      	add	r2, r4
 8003a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a6c:	e106      	b.n	8003c7c <UART_SetConfig+0x4d8>
 8003a6e:	bf00      	nop
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40011400 	.word	0x40011400
 8003a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a8e:	4642      	mov	r2, r8
 8003a90:	464b      	mov	r3, r9
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	6239      	str	r1, [r7, #32]
 8003a96:	415b      	adcs	r3, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1854      	adds	r4, r2, r1
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	eb43 0501 	adc.w	r5, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	00eb      	lsls	r3, r5, #3
 8003ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	eb45 0303 	adc.w	r3, r5, r3
 8003aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aea:	4629      	mov	r1, r5
 8003aec:	008b      	lsls	r3, r1, #2
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af4:	4621      	mov	r1, r4
 8003af6:	008a      	lsls	r2, r1, #2
 8003af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003afc:	f7fc fbc8 	bl	8000290 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	61b9      	str	r1, [r7, #24]
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b30:	4641      	mov	r1, r8
 8003b32:	1851      	adds	r1, r2, r1
 8003b34:	6139      	str	r1, [r7, #16]
 8003b36:	4649      	mov	r1, r9
 8003b38:	414b      	adcs	r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	00cb      	lsls	r3, r1, #3
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b52:	4651      	mov	r1, sl
 8003b54:	00ca      	lsls	r2, r1, #3
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b64:	464b      	mov	r3, r9
 8003b66:	460a      	mov	r2, r1
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b88:	4649      	mov	r1, r9
 8003b8a:	008b      	lsls	r3, r1, #2
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b92:	4641      	mov	r1, r8
 8003b94:	008a      	lsls	r2, r1, #2
 8003b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b9a:	f7fc fb79 	bl	8000290 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2264      	movs	r2, #100	; 0x64
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	1acb      	subs	r3, r1, r3
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	3332      	adds	r3, #50	; 0x32
 8003bb8:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc4:	441c      	add	r4, r3
 8003bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bca:	2200      	movs	r2, #0
 8003bcc:	673b      	str	r3, [r7, #112]	; 0x70
 8003bce:	677a      	str	r2, [r7, #116]	; 0x74
 8003bd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be4:	4641      	mov	r1, r8
 8003be6:	1851      	adds	r1, r2, r1
 8003be8:	6039      	str	r1, [r7, #0]
 8003bea:	4649      	mov	r1, r9
 8003bec:	414b      	adcs	r3, r1
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	00cb      	lsls	r3, r1, #3
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c06:	4651      	mov	r1, sl
 8003c08:	00ca      	lsls	r2, r1, #3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4642      	mov	r2, r8
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c16:	464b      	mov	r3, r9
 8003c18:	460a      	mov	r2, r1
 8003c1a:	eb42 0303 	adc.w	r3, r2, r3
 8003c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
 8003c2a:	667a      	str	r2, [r7, #100]	; 0x64
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c38:	4649      	mov	r1, r9
 8003c3a:	008b      	lsls	r3, r1, #2
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c42:	4641      	mov	r1, r8
 8003c44:	008a      	lsls	r2, r1, #2
 8003c46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c4a:	f7fc fb21 	bl	8000290 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	3332      	adds	r3, #50	; 0x32
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 020f 	and.w	r2, r3, #15
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4422      	add	r2, r4
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c82:	46bd      	mov	sp, r7
 8003c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c88:	51eb851f 	.word	0x51eb851f

08003c8c <siprintf>:
 8003c8c:	b40e      	push	{r1, r2, r3}
 8003c8e:	b500      	push	{lr}
 8003c90:	b09c      	sub	sp, #112	; 0x70
 8003c92:	ab1d      	add	r3, sp, #116	; 0x74
 8003c94:	9002      	str	r0, [sp, #8]
 8003c96:	9006      	str	r0, [sp, #24]
 8003c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c9c:	4809      	ldr	r0, [pc, #36]	; (8003cc4 <siprintf+0x38>)
 8003c9e:	9107      	str	r1, [sp, #28]
 8003ca0:	9104      	str	r1, [sp, #16]
 8003ca2:	4909      	ldr	r1, [pc, #36]	; (8003cc8 <siprintf+0x3c>)
 8003ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ca8:	9105      	str	r1, [sp, #20]
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	a902      	add	r1, sp, #8
 8003cb0:	f000 f9a0 	bl	8003ff4 <_svfiprintf_r>
 8003cb4:	9b02      	ldr	r3, [sp, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	b01c      	add	sp, #112	; 0x70
 8003cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc0:	b003      	add	sp, #12
 8003cc2:	4770      	bx	lr
 8003cc4:	20000064 	.word	0x20000064
 8003cc8:	ffff0208 	.word	0xffff0208

08003ccc <memset>:
 8003ccc:	4402      	add	r2, r0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d100      	bne.n	8003cd6 <memset+0xa>
 8003cd4:	4770      	bx	lr
 8003cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cda:	e7f9      	b.n	8003cd0 <memset+0x4>

08003cdc <__errno>:
 8003cdc:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <__errno+0x8>)
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000064 	.word	0x20000064

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4d0d      	ldr	r5, [pc, #52]	; (8003d20 <__libc_init_array+0x38>)
 8003cec:	4c0d      	ldr	r4, [pc, #52]	; (8003d24 <__libc_init_array+0x3c>)
 8003cee:	1b64      	subs	r4, r4, r5
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	4d0b      	ldr	r5, [pc, #44]	; (8003d28 <__libc_init_array+0x40>)
 8003cfa:	4c0c      	ldr	r4, [pc, #48]	; (8003d2c <__libc_init_array+0x44>)
 8003cfc:	f000 fc6a 	bl	80045d4 <_init>
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	2600      	movs	r6, #0
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08004b84 	.word	0x08004b84
 8003d24:	08004b84 	.word	0x08004b84
 8003d28:	08004b84 	.word	0x08004b84
 8003d2c:	08004b88 	.word	0x08004b88

08003d30 <__retarget_lock_acquire_recursive>:
 8003d30:	4770      	bx	lr

08003d32 <__retarget_lock_release_recursive>:
 8003d32:	4770      	bx	lr

08003d34 <memcpy>:
 8003d34:	440a      	add	r2, r1
 8003d36:	4291      	cmp	r1, r2
 8003d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d3c:	d100      	bne.n	8003d40 <memcpy+0xc>
 8003d3e:	4770      	bx	lr
 8003d40:	b510      	push	{r4, lr}
 8003d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d4a:	4291      	cmp	r1, r2
 8003d4c:	d1f9      	bne.n	8003d42 <memcpy+0xe>
 8003d4e:	bd10      	pop	{r4, pc}

08003d50 <_free_r>:
 8003d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d52:	2900      	cmp	r1, #0
 8003d54:	d044      	beq.n	8003de0 <_free_r+0x90>
 8003d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d5a:	9001      	str	r0, [sp, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003d62:	bfb8      	it	lt
 8003d64:	18e4      	addlt	r4, r4, r3
 8003d66:	f000 f8df 	bl	8003f28 <__malloc_lock>
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <_free_r+0x94>)
 8003d6c:	9801      	ldr	r0, [sp, #4]
 8003d6e:	6813      	ldr	r3, [r2, #0]
 8003d70:	b933      	cbnz	r3, 8003d80 <_free_r+0x30>
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	6014      	str	r4, [r2, #0]
 8003d76:	b003      	add	sp, #12
 8003d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d7c:	f000 b8da 	b.w	8003f34 <__malloc_unlock>
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d908      	bls.n	8003d96 <_free_r+0x46>
 8003d84:	6825      	ldr	r5, [r4, #0]
 8003d86:	1961      	adds	r1, r4, r5
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	bf01      	itttt	eq
 8003d8c:	6819      	ldreq	r1, [r3, #0]
 8003d8e:	685b      	ldreq	r3, [r3, #4]
 8003d90:	1949      	addeq	r1, r1, r5
 8003d92:	6021      	streq	r1, [r4, #0]
 8003d94:	e7ed      	b.n	8003d72 <_free_r+0x22>
 8003d96:	461a      	mov	r2, r3
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b10b      	cbz	r3, 8003da0 <_free_r+0x50>
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d9fa      	bls.n	8003d96 <_free_r+0x46>
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	1855      	adds	r5, r2, r1
 8003da4:	42a5      	cmp	r5, r4
 8003da6:	d10b      	bne.n	8003dc0 <_free_r+0x70>
 8003da8:	6824      	ldr	r4, [r4, #0]
 8003daa:	4421      	add	r1, r4
 8003dac:	1854      	adds	r4, r2, r1
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	d1e0      	bne.n	8003d76 <_free_r+0x26>
 8003db4:	681c      	ldr	r4, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	6053      	str	r3, [r2, #4]
 8003dba:	440c      	add	r4, r1
 8003dbc:	6014      	str	r4, [r2, #0]
 8003dbe:	e7da      	b.n	8003d76 <_free_r+0x26>
 8003dc0:	d902      	bls.n	8003dc8 <_free_r+0x78>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	6003      	str	r3, [r0, #0]
 8003dc6:	e7d6      	b.n	8003d76 <_free_r+0x26>
 8003dc8:	6825      	ldr	r5, [r4, #0]
 8003dca:	1961      	adds	r1, r4, r5
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	bf04      	itt	eq
 8003dd0:	6819      	ldreq	r1, [r3, #0]
 8003dd2:	685b      	ldreq	r3, [r3, #4]
 8003dd4:	6063      	str	r3, [r4, #4]
 8003dd6:	bf04      	itt	eq
 8003dd8:	1949      	addeq	r1, r1, r5
 8003dda:	6021      	streq	r1, [r4, #0]
 8003ddc:	6054      	str	r4, [r2, #4]
 8003dde:	e7ca      	b.n	8003d76 <_free_r+0x26>
 8003de0:	b003      	add	sp, #12
 8003de2:	bd30      	pop	{r4, r5, pc}
 8003de4:	20000310 	.word	0x20000310

08003de8 <sbrk_aligned>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	4e0e      	ldr	r6, [pc, #56]	; (8003e24 <sbrk_aligned+0x3c>)
 8003dec:	460c      	mov	r4, r1
 8003dee:	6831      	ldr	r1, [r6, #0]
 8003df0:	4605      	mov	r5, r0
 8003df2:	b911      	cbnz	r1, 8003dfa <sbrk_aligned+0x12>
 8003df4:	f000 fba6 	bl	8004544 <_sbrk_r>
 8003df8:	6030      	str	r0, [r6, #0]
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f000 fba1 	bl	8004544 <_sbrk_r>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	d00a      	beq.n	8003e1c <sbrk_aligned+0x34>
 8003e06:	1cc4      	adds	r4, r0, #3
 8003e08:	f024 0403 	bic.w	r4, r4, #3
 8003e0c:	42a0      	cmp	r0, r4
 8003e0e:	d007      	beq.n	8003e20 <sbrk_aligned+0x38>
 8003e10:	1a21      	subs	r1, r4, r0
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fb96 	bl	8004544 <_sbrk_r>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d101      	bne.n	8003e20 <sbrk_aligned+0x38>
 8003e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8003e20:	4620      	mov	r0, r4
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	20000314 	.word	0x20000314

08003e28 <_malloc_r>:
 8003e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e2c:	1ccd      	adds	r5, r1, #3
 8003e2e:	f025 0503 	bic.w	r5, r5, #3
 8003e32:	3508      	adds	r5, #8
 8003e34:	2d0c      	cmp	r5, #12
 8003e36:	bf38      	it	cc
 8003e38:	250c      	movcc	r5, #12
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	db01      	blt.n	8003e44 <_malloc_r+0x1c>
 8003e40:	42a9      	cmp	r1, r5
 8003e42:	d905      	bls.n	8003e50 <_malloc_r+0x28>
 8003e44:	230c      	movs	r3, #12
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	2600      	movs	r6, #0
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f24 <_malloc_r+0xfc>
 8003e54:	f000 f868 	bl	8003f28 <__malloc_lock>
 8003e58:	f8d8 3000 	ldr.w	r3, [r8]
 8003e5c:	461c      	mov	r4, r3
 8003e5e:	bb5c      	cbnz	r4, 8003eb8 <_malloc_r+0x90>
 8003e60:	4629      	mov	r1, r5
 8003e62:	4638      	mov	r0, r7
 8003e64:	f7ff ffc0 	bl	8003de8 <sbrk_aligned>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	d155      	bne.n	8003f1a <_malloc_r+0xf2>
 8003e6e:	f8d8 4000 	ldr.w	r4, [r8]
 8003e72:	4626      	mov	r6, r4
 8003e74:	2e00      	cmp	r6, #0
 8003e76:	d145      	bne.n	8003f04 <_malloc_r+0xdc>
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	d048      	beq.n	8003f0e <_malloc_r+0xe6>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	4631      	mov	r1, r6
 8003e80:	4638      	mov	r0, r7
 8003e82:	eb04 0903 	add.w	r9, r4, r3
 8003e86:	f000 fb5d 	bl	8004544 <_sbrk_r>
 8003e8a:	4581      	cmp	r9, r0
 8003e8c:	d13f      	bne.n	8003f0e <_malloc_r+0xe6>
 8003e8e:	6821      	ldr	r1, [r4, #0]
 8003e90:	1a6d      	subs	r5, r5, r1
 8003e92:	4629      	mov	r1, r5
 8003e94:	4638      	mov	r0, r7
 8003e96:	f7ff ffa7 	bl	8003de8 <sbrk_aligned>
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d037      	beq.n	8003f0e <_malloc_r+0xe6>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	442b      	add	r3, r5
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d038      	beq.n	8003f1e <_malloc_r+0xf6>
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	42a2      	cmp	r2, r4
 8003eb0:	d12b      	bne.n	8003f0a <_malloc_r+0xe2>
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e00f      	b.n	8003ed8 <_malloc_r+0xb0>
 8003eb8:	6822      	ldr	r2, [r4, #0]
 8003eba:	1b52      	subs	r2, r2, r5
 8003ebc:	d41f      	bmi.n	8003efe <_malloc_r+0xd6>
 8003ebe:	2a0b      	cmp	r2, #11
 8003ec0:	d917      	bls.n	8003ef2 <_malloc_r+0xca>
 8003ec2:	1961      	adds	r1, r4, r5
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	6025      	str	r5, [r4, #0]
 8003ec8:	bf18      	it	ne
 8003eca:	6059      	strne	r1, [r3, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	bf08      	it	eq
 8003ed0:	f8c8 1000 	streq.w	r1, [r8]
 8003ed4:	5162      	str	r2, [r4, r5]
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f104 060b 	add.w	r6, r4, #11
 8003ede:	f000 f829 	bl	8003f34 <__malloc_unlock>
 8003ee2:	f026 0607 	bic.w	r6, r6, #7
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	1af2      	subs	r2, r6, r3
 8003eea:	d0ae      	beq.n	8003e4a <_malloc_r+0x22>
 8003eec:	1b9b      	subs	r3, r3, r6
 8003eee:	50a3      	str	r3, [r4, r2]
 8003ef0:	e7ab      	b.n	8003e4a <_malloc_r+0x22>
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	6862      	ldr	r2, [r4, #4]
 8003ef6:	d1dd      	bne.n	8003eb4 <_malloc_r+0x8c>
 8003ef8:	f8c8 2000 	str.w	r2, [r8]
 8003efc:	e7ec      	b.n	8003ed8 <_malloc_r+0xb0>
 8003efe:	4623      	mov	r3, r4
 8003f00:	6864      	ldr	r4, [r4, #4]
 8003f02:	e7ac      	b.n	8003e5e <_malloc_r+0x36>
 8003f04:	4634      	mov	r4, r6
 8003f06:	6876      	ldr	r6, [r6, #4]
 8003f08:	e7b4      	b.n	8003e74 <_malloc_r+0x4c>
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	e7cc      	b.n	8003ea8 <_malloc_r+0x80>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	4638      	mov	r0, r7
 8003f14:	f000 f80e 	bl	8003f34 <__malloc_unlock>
 8003f18:	e797      	b.n	8003e4a <_malloc_r+0x22>
 8003f1a:	6025      	str	r5, [r4, #0]
 8003f1c:	e7dc      	b.n	8003ed8 <_malloc_r+0xb0>
 8003f1e:	605b      	str	r3, [r3, #4]
 8003f20:	deff      	udf	#255	; 0xff
 8003f22:	bf00      	nop
 8003f24:	20000310 	.word	0x20000310

08003f28 <__malloc_lock>:
 8003f28:	4801      	ldr	r0, [pc, #4]	; (8003f30 <__malloc_lock+0x8>)
 8003f2a:	f7ff bf01 	b.w	8003d30 <__retarget_lock_acquire_recursive>
 8003f2e:	bf00      	nop
 8003f30:	2000030c 	.word	0x2000030c

08003f34 <__malloc_unlock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	; (8003f3c <__malloc_unlock+0x8>)
 8003f36:	f7ff befc 	b.w	8003d32 <__retarget_lock_release_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	2000030c 	.word	0x2000030c

08003f40 <__ssputs_r>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	688e      	ldr	r6, [r1, #8]
 8003f46:	461f      	mov	r7, r3
 8003f48:	42be      	cmp	r6, r7
 8003f4a:	680b      	ldr	r3, [r1, #0]
 8003f4c:	4682      	mov	sl, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	4690      	mov	r8, r2
 8003f52:	d82c      	bhi.n	8003fae <__ssputs_r+0x6e>
 8003f54:	898a      	ldrh	r2, [r1, #12]
 8003f56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f5a:	d026      	beq.n	8003faa <__ssputs_r+0x6a>
 8003f5c:	6965      	ldr	r5, [r4, #20]
 8003f5e:	6909      	ldr	r1, [r1, #16]
 8003f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f64:	eba3 0901 	sub.w	r9, r3, r1
 8003f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f6c:	1c7b      	adds	r3, r7, #1
 8003f6e:	444b      	add	r3, r9
 8003f70:	106d      	asrs	r5, r5, #1
 8003f72:	429d      	cmp	r5, r3
 8003f74:	bf38      	it	cc
 8003f76:	461d      	movcc	r5, r3
 8003f78:	0553      	lsls	r3, r2, #21
 8003f7a:	d527      	bpl.n	8003fcc <__ssputs_r+0x8c>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	f7ff ff53 	bl	8003e28 <_malloc_r>
 8003f82:	4606      	mov	r6, r0
 8003f84:	b360      	cbz	r0, 8003fe0 <__ssputs_r+0xa0>
 8003f86:	6921      	ldr	r1, [r4, #16]
 8003f88:	464a      	mov	r2, r9
 8003f8a:	f7ff fed3 	bl	8003d34 <memcpy>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	6126      	str	r6, [r4, #16]
 8003f9c:	6165      	str	r5, [r4, #20]
 8003f9e:	444e      	add	r6, r9
 8003fa0:	eba5 0509 	sub.w	r5, r5, r9
 8003fa4:	6026      	str	r6, [r4, #0]
 8003fa6:	60a5      	str	r5, [r4, #8]
 8003fa8:	463e      	mov	r6, r7
 8003faa:	42be      	cmp	r6, r7
 8003fac:	d900      	bls.n	8003fb0 <__ssputs_r+0x70>
 8003fae:	463e      	mov	r6, r7
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	4632      	mov	r2, r6
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	f000 faab 	bl	8004510 <memmove>
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	1b9b      	subs	r3, r3, r6
 8003fbe:	60a3      	str	r3, [r4, #8]
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	4433      	add	r3, r6
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fcc:	462a      	mov	r2, r5
 8003fce:	f000 fac9 	bl	8004564 <_realloc_r>
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d1e0      	bne.n	8003f9a <__ssputs_r+0x5a>
 8003fd8:	6921      	ldr	r1, [r4, #16]
 8003fda:	4650      	mov	r0, sl
 8003fdc:	f7ff feb8 	bl	8003d50 <_free_r>
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	f8ca 3000 	str.w	r3, [sl]
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff2:	e7e9      	b.n	8003fc8 <__ssputs_r+0x88>

08003ff4 <_svfiprintf_r>:
 8003ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff8:	4698      	mov	r8, r3
 8003ffa:	898b      	ldrh	r3, [r1, #12]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	b09d      	sub	sp, #116	; 0x74
 8004000:	4607      	mov	r7, r0
 8004002:	460d      	mov	r5, r1
 8004004:	4614      	mov	r4, r2
 8004006:	d50e      	bpl.n	8004026 <_svfiprintf_r+0x32>
 8004008:	690b      	ldr	r3, [r1, #16]
 800400a:	b963      	cbnz	r3, 8004026 <_svfiprintf_r+0x32>
 800400c:	2140      	movs	r1, #64	; 0x40
 800400e:	f7ff ff0b 	bl	8003e28 <_malloc_r>
 8004012:	6028      	str	r0, [r5, #0]
 8004014:	6128      	str	r0, [r5, #16]
 8004016:	b920      	cbnz	r0, 8004022 <_svfiprintf_r+0x2e>
 8004018:	230c      	movs	r3, #12
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	e0d0      	b.n	80041c4 <_svfiprintf_r+0x1d0>
 8004022:	2340      	movs	r3, #64	; 0x40
 8004024:	616b      	str	r3, [r5, #20]
 8004026:	2300      	movs	r3, #0
 8004028:	9309      	str	r3, [sp, #36]	; 0x24
 800402a:	2320      	movs	r3, #32
 800402c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004030:	f8cd 800c 	str.w	r8, [sp, #12]
 8004034:	2330      	movs	r3, #48	; 0x30
 8004036:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041dc <_svfiprintf_r+0x1e8>
 800403a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800403e:	f04f 0901 	mov.w	r9, #1
 8004042:	4623      	mov	r3, r4
 8004044:	469a      	mov	sl, r3
 8004046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800404a:	b10a      	cbz	r2, 8004050 <_svfiprintf_r+0x5c>
 800404c:	2a25      	cmp	r2, #37	; 0x25
 800404e:	d1f9      	bne.n	8004044 <_svfiprintf_r+0x50>
 8004050:	ebba 0b04 	subs.w	fp, sl, r4
 8004054:	d00b      	beq.n	800406e <_svfiprintf_r+0x7a>
 8004056:	465b      	mov	r3, fp
 8004058:	4622      	mov	r2, r4
 800405a:	4629      	mov	r1, r5
 800405c:	4638      	mov	r0, r7
 800405e:	f7ff ff6f 	bl	8003f40 <__ssputs_r>
 8004062:	3001      	adds	r0, #1
 8004064:	f000 80a9 	beq.w	80041ba <_svfiprintf_r+0x1c6>
 8004068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800406a:	445a      	add	r2, fp
 800406c:	9209      	str	r2, [sp, #36]	; 0x24
 800406e:	f89a 3000 	ldrb.w	r3, [sl]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80a1 	beq.w	80041ba <_svfiprintf_r+0x1c6>
 8004078:	2300      	movs	r3, #0
 800407a:	f04f 32ff 	mov.w	r2, #4294967295
 800407e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004082:	f10a 0a01 	add.w	sl, sl, #1
 8004086:	9304      	str	r3, [sp, #16]
 8004088:	9307      	str	r3, [sp, #28]
 800408a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800408e:	931a      	str	r3, [sp, #104]	; 0x68
 8004090:	4654      	mov	r4, sl
 8004092:	2205      	movs	r2, #5
 8004094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004098:	4850      	ldr	r0, [pc, #320]	; (80041dc <_svfiprintf_r+0x1e8>)
 800409a:	f7fc f8a9 	bl	80001f0 <memchr>
 800409e:	9a04      	ldr	r2, [sp, #16]
 80040a0:	b9d8      	cbnz	r0, 80040da <_svfiprintf_r+0xe6>
 80040a2:	06d0      	lsls	r0, r2, #27
 80040a4:	bf44      	itt	mi
 80040a6:	2320      	movmi	r3, #32
 80040a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ac:	0711      	lsls	r1, r2, #28
 80040ae:	bf44      	itt	mi
 80040b0:	232b      	movmi	r3, #43	; 0x2b
 80040b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ba:	2b2a      	cmp	r3, #42	; 0x2a
 80040bc:	d015      	beq.n	80040ea <_svfiprintf_r+0xf6>
 80040be:	9a07      	ldr	r2, [sp, #28]
 80040c0:	4654      	mov	r4, sl
 80040c2:	2000      	movs	r0, #0
 80040c4:	f04f 0c0a 	mov.w	ip, #10
 80040c8:	4621      	mov	r1, r4
 80040ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ce:	3b30      	subs	r3, #48	; 0x30
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	d94d      	bls.n	8004170 <_svfiprintf_r+0x17c>
 80040d4:	b1b0      	cbz	r0, 8004104 <_svfiprintf_r+0x110>
 80040d6:	9207      	str	r2, [sp, #28]
 80040d8:	e014      	b.n	8004104 <_svfiprintf_r+0x110>
 80040da:	eba0 0308 	sub.w	r3, r0, r8
 80040de:	fa09 f303 	lsl.w	r3, r9, r3
 80040e2:	4313      	orrs	r3, r2
 80040e4:	9304      	str	r3, [sp, #16]
 80040e6:	46a2      	mov	sl, r4
 80040e8:	e7d2      	b.n	8004090 <_svfiprintf_r+0x9c>
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	1d19      	adds	r1, r3, #4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	9103      	str	r1, [sp, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bfbb      	ittet	lt
 80040f6:	425b      	neglt	r3, r3
 80040f8:	f042 0202 	orrlt.w	r2, r2, #2
 80040fc:	9307      	strge	r3, [sp, #28]
 80040fe:	9307      	strlt	r3, [sp, #28]
 8004100:	bfb8      	it	lt
 8004102:	9204      	strlt	r2, [sp, #16]
 8004104:	7823      	ldrb	r3, [r4, #0]
 8004106:	2b2e      	cmp	r3, #46	; 0x2e
 8004108:	d10c      	bne.n	8004124 <_svfiprintf_r+0x130>
 800410a:	7863      	ldrb	r3, [r4, #1]
 800410c:	2b2a      	cmp	r3, #42	; 0x2a
 800410e:	d134      	bne.n	800417a <_svfiprintf_r+0x186>
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	9203      	str	r2, [sp, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	bfb8      	it	lt
 800411c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004120:	3402      	adds	r4, #2
 8004122:	9305      	str	r3, [sp, #20]
 8004124:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80041ec <_svfiprintf_r+0x1f8>
 8004128:	7821      	ldrb	r1, [r4, #0]
 800412a:	2203      	movs	r2, #3
 800412c:	4650      	mov	r0, sl
 800412e:	f7fc f85f 	bl	80001f0 <memchr>
 8004132:	b138      	cbz	r0, 8004144 <_svfiprintf_r+0x150>
 8004134:	9b04      	ldr	r3, [sp, #16]
 8004136:	eba0 000a 	sub.w	r0, r0, sl
 800413a:	2240      	movs	r2, #64	; 0x40
 800413c:	4082      	lsls	r2, r0
 800413e:	4313      	orrs	r3, r2
 8004140:	3401      	adds	r4, #1
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	4825      	ldr	r0, [pc, #148]	; (80041e0 <_svfiprintf_r+0x1ec>)
 800414a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800414e:	2206      	movs	r2, #6
 8004150:	f7fc f84e 	bl	80001f0 <memchr>
 8004154:	2800      	cmp	r0, #0
 8004156:	d038      	beq.n	80041ca <_svfiprintf_r+0x1d6>
 8004158:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <_svfiprintf_r+0x1f0>)
 800415a:	bb1b      	cbnz	r3, 80041a4 <_svfiprintf_r+0x1b0>
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	3307      	adds	r3, #7
 8004160:	f023 0307 	bic.w	r3, r3, #7
 8004164:	3308      	adds	r3, #8
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416a:	4433      	add	r3, r6
 800416c:	9309      	str	r3, [sp, #36]	; 0x24
 800416e:	e768      	b.n	8004042 <_svfiprintf_r+0x4e>
 8004170:	fb0c 3202 	mla	r2, ip, r2, r3
 8004174:	460c      	mov	r4, r1
 8004176:	2001      	movs	r0, #1
 8004178:	e7a6      	b.n	80040c8 <_svfiprintf_r+0xd4>
 800417a:	2300      	movs	r3, #0
 800417c:	3401      	adds	r4, #1
 800417e:	9305      	str	r3, [sp, #20]
 8004180:	4619      	mov	r1, r3
 8004182:	f04f 0c0a 	mov.w	ip, #10
 8004186:	4620      	mov	r0, r4
 8004188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800418c:	3a30      	subs	r2, #48	; 0x30
 800418e:	2a09      	cmp	r2, #9
 8004190:	d903      	bls.n	800419a <_svfiprintf_r+0x1a6>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0c6      	beq.n	8004124 <_svfiprintf_r+0x130>
 8004196:	9105      	str	r1, [sp, #20]
 8004198:	e7c4      	b.n	8004124 <_svfiprintf_r+0x130>
 800419a:	fb0c 2101 	mla	r1, ip, r1, r2
 800419e:	4604      	mov	r4, r0
 80041a0:	2301      	movs	r3, #1
 80041a2:	e7f0      	b.n	8004186 <_svfiprintf_r+0x192>
 80041a4:	ab03      	add	r3, sp, #12
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	462a      	mov	r2, r5
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <_svfiprintf_r+0x1f4>)
 80041ac:	a904      	add	r1, sp, #16
 80041ae:	4638      	mov	r0, r7
 80041b0:	f3af 8000 	nop.w
 80041b4:	1c42      	adds	r2, r0, #1
 80041b6:	4606      	mov	r6, r0
 80041b8:	d1d6      	bne.n	8004168 <_svfiprintf_r+0x174>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	065b      	lsls	r3, r3, #25
 80041be:	f53f af2d 	bmi.w	800401c <_svfiprintf_r+0x28>
 80041c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041c4:	b01d      	add	sp, #116	; 0x74
 80041c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ca:	ab03      	add	r3, sp, #12
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	462a      	mov	r2, r5
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <_svfiprintf_r+0x1f4>)
 80041d2:	a904      	add	r1, sp, #16
 80041d4:	4638      	mov	r0, r7
 80041d6:	f000 f879 	bl	80042cc <_printf_i>
 80041da:	e7eb      	b.n	80041b4 <_svfiprintf_r+0x1c0>
 80041dc:	08004b48 	.word	0x08004b48
 80041e0:	08004b52 	.word	0x08004b52
 80041e4:	00000000 	.word	0x00000000
 80041e8:	08003f41 	.word	0x08003f41
 80041ec:	08004b4e 	.word	0x08004b4e

080041f0 <_printf_common>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	4616      	mov	r6, r2
 80041f6:	4699      	mov	r9, r3
 80041f8:	688a      	ldr	r2, [r1, #8]
 80041fa:	690b      	ldr	r3, [r1, #16]
 80041fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004200:	4293      	cmp	r3, r2
 8004202:	bfb8      	it	lt
 8004204:	4613      	movlt	r3, r2
 8004206:	6033      	str	r3, [r6, #0]
 8004208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800420c:	4607      	mov	r7, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b10a      	cbz	r2, 8004216 <_printf_common+0x26>
 8004212:	3301      	adds	r3, #1
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	0699      	lsls	r1, r3, #26
 800421a:	bf42      	ittt	mi
 800421c:	6833      	ldrmi	r3, [r6, #0]
 800421e:	3302      	addmi	r3, #2
 8004220:	6033      	strmi	r3, [r6, #0]
 8004222:	6825      	ldr	r5, [r4, #0]
 8004224:	f015 0506 	ands.w	r5, r5, #6
 8004228:	d106      	bne.n	8004238 <_printf_common+0x48>
 800422a:	f104 0a19 	add.w	sl, r4, #25
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	6832      	ldr	r2, [r6, #0]
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	42ab      	cmp	r3, r5
 8004236:	dc26      	bgt.n	8004286 <_printf_common+0x96>
 8004238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800423c:	1e13      	subs	r3, r2, #0
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	bf18      	it	ne
 8004242:	2301      	movne	r3, #1
 8004244:	0692      	lsls	r2, r2, #26
 8004246:	d42b      	bmi.n	80042a0 <_printf_common+0xb0>
 8004248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800424c:	4649      	mov	r1, r9
 800424e:	4638      	mov	r0, r7
 8004250:	47c0      	blx	r8
 8004252:	3001      	adds	r0, #1
 8004254:	d01e      	beq.n	8004294 <_printf_common+0xa4>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	6922      	ldr	r2, [r4, #16]
 800425a:	f003 0306 	and.w	r3, r3, #6
 800425e:	2b04      	cmp	r3, #4
 8004260:	bf02      	ittt	eq
 8004262:	68e5      	ldreq	r5, [r4, #12]
 8004264:	6833      	ldreq	r3, [r6, #0]
 8004266:	1aed      	subeq	r5, r5, r3
 8004268:	68a3      	ldr	r3, [r4, #8]
 800426a:	bf0c      	ite	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	2500      	movne	r5, #0
 8004272:	4293      	cmp	r3, r2
 8004274:	bfc4      	itt	gt
 8004276:	1a9b      	subgt	r3, r3, r2
 8004278:	18ed      	addgt	r5, r5, r3
 800427a:	2600      	movs	r6, #0
 800427c:	341a      	adds	r4, #26
 800427e:	42b5      	cmp	r5, r6
 8004280:	d11a      	bne.n	80042b8 <_printf_common+0xc8>
 8004282:	2000      	movs	r0, #0
 8004284:	e008      	b.n	8004298 <_printf_common+0xa8>
 8004286:	2301      	movs	r3, #1
 8004288:	4652      	mov	r2, sl
 800428a:	4649      	mov	r1, r9
 800428c:	4638      	mov	r0, r7
 800428e:	47c0      	blx	r8
 8004290:	3001      	adds	r0, #1
 8004292:	d103      	bne.n	800429c <_printf_common+0xac>
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429c:	3501      	adds	r5, #1
 800429e:	e7c6      	b.n	800422e <_printf_common+0x3e>
 80042a0:	18e1      	adds	r1, r4, r3
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	2030      	movs	r0, #48	; 0x30
 80042a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042aa:	4422      	add	r2, r4
 80042ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b4:	3302      	adds	r3, #2
 80042b6:	e7c7      	b.n	8004248 <_printf_common+0x58>
 80042b8:	2301      	movs	r3, #1
 80042ba:	4622      	mov	r2, r4
 80042bc:	4649      	mov	r1, r9
 80042be:	4638      	mov	r0, r7
 80042c0:	47c0      	blx	r8
 80042c2:	3001      	adds	r0, #1
 80042c4:	d0e6      	beq.n	8004294 <_printf_common+0xa4>
 80042c6:	3601      	adds	r6, #1
 80042c8:	e7d9      	b.n	800427e <_printf_common+0x8e>
	...

080042cc <_printf_i>:
 80042cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	7e0f      	ldrb	r7, [r1, #24]
 80042d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042d4:	2f78      	cmp	r7, #120	; 0x78
 80042d6:	4691      	mov	r9, r2
 80042d8:	4680      	mov	r8, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	469a      	mov	sl, r3
 80042de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042e2:	d807      	bhi.n	80042f4 <_printf_i+0x28>
 80042e4:	2f62      	cmp	r7, #98	; 0x62
 80042e6:	d80a      	bhi.n	80042fe <_printf_i+0x32>
 80042e8:	2f00      	cmp	r7, #0
 80042ea:	f000 80d4 	beq.w	8004496 <_printf_i+0x1ca>
 80042ee:	2f58      	cmp	r7, #88	; 0x58
 80042f0:	f000 80c0 	beq.w	8004474 <_printf_i+0x1a8>
 80042f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042fc:	e03a      	b.n	8004374 <_printf_i+0xa8>
 80042fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004302:	2b15      	cmp	r3, #21
 8004304:	d8f6      	bhi.n	80042f4 <_printf_i+0x28>
 8004306:	a101      	add	r1, pc, #4	; (adr r1, 800430c <_printf_i+0x40>)
 8004308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800430c:	08004365 	.word	0x08004365
 8004310:	08004379 	.word	0x08004379
 8004314:	080042f5 	.word	0x080042f5
 8004318:	080042f5 	.word	0x080042f5
 800431c:	080042f5 	.word	0x080042f5
 8004320:	080042f5 	.word	0x080042f5
 8004324:	08004379 	.word	0x08004379
 8004328:	080042f5 	.word	0x080042f5
 800432c:	080042f5 	.word	0x080042f5
 8004330:	080042f5 	.word	0x080042f5
 8004334:	080042f5 	.word	0x080042f5
 8004338:	0800447d 	.word	0x0800447d
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004437 	.word	0x08004437
 8004344:	080042f5 	.word	0x080042f5
 8004348:	080042f5 	.word	0x080042f5
 800434c:	0800449f 	.word	0x0800449f
 8004350:	080042f5 	.word	0x080042f5
 8004354:	080043a5 	.word	0x080043a5
 8004358:	080042f5 	.word	0x080042f5
 800435c:	080042f5 	.word	0x080042f5
 8004360:	0800443f 	.word	0x0800443f
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	1d1a      	adds	r2, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	602a      	str	r2, [r5, #0]
 800436c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004374:	2301      	movs	r3, #1
 8004376:	e09f      	b.n	80044b8 <_printf_i+0x1ec>
 8004378:	6820      	ldr	r0, [r4, #0]
 800437a:	682b      	ldr	r3, [r5, #0]
 800437c:	0607      	lsls	r7, r0, #24
 800437e:	f103 0104 	add.w	r1, r3, #4
 8004382:	6029      	str	r1, [r5, #0]
 8004384:	d501      	bpl.n	800438a <_printf_i+0xbe>
 8004386:	681e      	ldr	r6, [r3, #0]
 8004388:	e003      	b.n	8004392 <_printf_i+0xc6>
 800438a:	0646      	lsls	r6, r0, #25
 800438c:	d5fb      	bpl.n	8004386 <_printf_i+0xba>
 800438e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004392:	2e00      	cmp	r6, #0
 8004394:	da03      	bge.n	800439e <_printf_i+0xd2>
 8004396:	232d      	movs	r3, #45	; 0x2d
 8004398:	4276      	negs	r6, r6
 800439a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800439e:	485a      	ldr	r0, [pc, #360]	; (8004508 <_printf_i+0x23c>)
 80043a0:	230a      	movs	r3, #10
 80043a2:	e012      	b.n	80043ca <_printf_i+0xfe>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	1d19      	adds	r1, r3, #4
 80043aa:	6029      	str	r1, [r5, #0]
 80043ac:	0605      	lsls	r5, r0, #24
 80043ae:	d501      	bpl.n	80043b4 <_printf_i+0xe8>
 80043b0:	681e      	ldr	r6, [r3, #0]
 80043b2:	e002      	b.n	80043ba <_printf_i+0xee>
 80043b4:	0641      	lsls	r1, r0, #25
 80043b6:	d5fb      	bpl.n	80043b0 <_printf_i+0xe4>
 80043b8:	881e      	ldrh	r6, [r3, #0]
 80043ba:	4853      	ldr	r0, [pc, #332]	; (8004508 <_printf_i+0x23c>)
 80043bc:	2f6f      	cmp	r7, #111	; 0x6f
 80043be:	bf0c      	ite	eq
 80043c0:	2308      	moveq	r3, #8
 80043c2:	230a      	movne	r3, #10
 80043c4:	2100      	movs	r1, #0
 80043c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ca:	6865      	ldr	r5, [r4, #4]
 80043cc:	60a5      	str	r5, [r4, #8]
 80043ce:	2d00      	cmp	r5, #0
 80043d0:	bfa2      	ittt	ge
 80043d2:	6821      	ldrge	r1, [r4, #0]
 80043d4:	f021 0104 	bicge.w	r1, r1, #4
 80043d8:	6021      	strge	r1, [r4, #0]
 80043da:	b90e      	cbnz	r6, 80043e0 <_printf_i+0x114>
 80043dc:	2d00      	cmp	r5, #0
 80043de:	d04b      	beq.n	8004478 <_printf_i+0x1ac>
 80043e0:	4615      	mov	r5, r2
 80043e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80043e6:	fb03 6711 	mls	r7, r3, r1, r6
 80043ea:	5dc7      	ldrb	r7, [r0, r7]
 80043ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043f0:	4637      	mov	r7, r6
 80043f2:	42bb      	cmp	r3, r7
 80043f4:	460e      	mov	r6, r1
 80043f6:	d9f4      	bls.n	80043e2 <_printf_i+0x116>
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d10b      	bne.n	8004414 <_printf_i+0x148>
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	07de      	lsls	r6, r3, #31
 8004400:	d508      	bpl.n	8004414 <_printf_i+0x148>
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	6861      	ldr	r1, [r4, #4]
 8004406:	4299      	cmp	r1, r3
 8004408:	bfde      	ittt	le
 800440a:	2330      	movle	r3, #48	; 0x30
 800440c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004410:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004414:	1b52      	subs	r2, r2, r5
 8004416:	6122      	str	r2, [r4, #16]
 8004418:	f8cd a000 	str.w	sl, [sp]
 800441c:	464b      	mov	r3, r9
 800441e:	aa03      	add	r2, sp, #12
 8004420:	4621      	mov	r1, r4
 8004422:	4640      	mov	r0, r8
 8004424:	f7ff fee4 	bl	80041f0 <_printf_common>
 8004428:	3001      	adds	r0, #1
 800442a:	d14a      	bne.n	80044c2 <_printf_i+0x1f6>
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	b004      	add	sp, #16
 8004432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	f043 0320 	orr.w	r3, r3, #32
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	4833      	ldr	r0, [pc, #204]	; (800450c <_printf_i+0x240>)
 8004440:	2778      	movs	r7, #120	; 0x78
 8004442:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	6829      	ldr	r1, [r5, #0]
 800444a:	061f      	lsls	r7, r3, #24
 800444c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004450:	d402      	bmi.n	8004458 <_printf_i+0x18c>
 8004452:	065f      	lsls	r7, r3, #25
 8004454:	bf48      	it	mi
 8004456:	b2b6      	uxthmi	r6, r6
 8004458:	07df      	lsls	r7, r3, #31
 800445a:	bf48      	it	mi
 800445c:	f043 0320 	orrmi.w	r3, r3, #32
 8004460:	6029      	str	r1, [r5, #0]
 8004462:	bf48      	it	mi
 8004464:	6023      	strmi	r3, [r4, #0]
 8004466:	b91e      	cbnz	r6, 8004470 <_printf_i+0x1a4>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	f023 0320 	bic.w	r3, r3, #32
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	2310      	movs	r3, #16
 8004472:	e7a7      	b.n	80043c4 <_printf_i+0xf8>
 8004474:	4824      	ldr	r0, [pc, #144]	; (8004508 <_printf_i+0x23c>)
 8004476:	e7e4      	b.n	8004442 <_printf_i+0x176>
 8004478:	4615      	mov	r5, r2
 800447a:	e7bd      	b.n	80043f8 <_printf_i+0x12c>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	6826      	ldr	r6, [r4, #0]
 8004480:	6961      	ldr	r1, [r4, #20]
 8004482:	1d18      	adds	r0, r3, #4
 8004484:	6028      	str	r0, [r5, #0]
 8004486:	0635      	lsls	r5, r6, #24
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	d501      	bpl.n	8004490 <_printf_i+0x1c4>
 800448c:	6019      	str	r1, [r3, #0]
 800448e:	e002      	b.n	8004496 <_printf_i+0x1ca>
 8004490:	0670      	lsls	r0, r6, #25
 8004492:	d5fb      	bpl.n	800448c <_printf_i+0x1c0>
 8004494:	8019      	strh	r1, [r3, #0]
 8004496:	2300      	movs	r3, #0
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	4615      	mov	r5, r2
 800449c:	e7bc      	b.n	8004418 <_printf_i+0x14c>
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	1d1a      	adds	r2, r3, #4
 80044a2:	602a      	str	r2, [r5, #0]
 80044a4:	681d      	ldr	r5, [r3, #0]
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	2100      	movs	r1, #0
 80044aa:	4628      	mov	r0, r5
 80044ac:	f7fb fea0 	bl	80001f0 <memchr>
 80044b0:	b108      	cbz	r0, 80044b6 <_printf_i+0x1ea>
 80044b2:	1b40      	subs	r0, r0, r5
 80044b4:	6060      	str	r0, [r4, #4]
 80044b6:	6863      	ldr	r3, [r4, #4]
 80044b8:	6123      	str	r3, [r4, #16]
 80044ba:	2300      	movs	r3, #0
 80044bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c0:	e7aa      	b.n	8004418 <_printf_i+0x14c>
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	462a      	mov	r2, r5
 80044c6:	4649      	mov	r1, r9
 80044c8:	4640      	mov	r0, r8
 80044ca:	47d0      	blx	sl
 80044cc:	3001      	adds	r0, #1
 80044ce:	d0ad      	beq.n	800442c <_printf_i+0x160>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	079b      	lsls	r3, r3, #30
 80044d4:	d413      	bmi.n	80044fe <_printf_i+0x232>
 80044d6:	68e0      	ldr	r0, [r4, #12]
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	4298      	cmp	r0, r3
 80044dc:	bfb8      	it	lt
 80044de:	4618      	movlt	r0, r3
 80044e0:	e7a6      	b.n	8004430 <_printf_i+0x164>
 80044e2:	2301      	movs	r3, #1
 80044e4:	4632      	mov	r2, r6
 80044e6:	4649      	mov	r1, r9
 80044e8:	4640      	mov	r0, r8
 80044ea:	47d0      	blx	sl
 80044ec:	3001      	adds	r0, #1
 80044ee:	d09d      	beq.n	800442c <_printf_i+0x160>
 80044f0:	3501      	adds	r5, #1
 80044f2:	68e3      	ldr	r3, [r4, #12]
 80044f4:	9903      	ldr	r1, [sp, #12]
 80044f6:	1a5b      	subs	r3, r3, r1
 80044f8:	42ab      	cmp	r3, r5
 80044fa:	dcf2      	bgt.n	80044e2 <_printf_i+0x216>
 80044fc:	e7eb      	b.n	80044d6 <_printf_i+0x20a>
 80044fe:	2500      	movs	r5, #0
 8004500:	f104 0619 	add.w	r6, r4, #25
 8004504:	e7f5      	b.n	80044f2 <_printf_i+0x226>
 8004506:	bf00      	nop
 8004508:	08004b59 	.word	0x08004b59
 800450c:	08004b6a 	.word	0x08004b6a

08004510 <memmove>:
 8004510:	4288      	cmp	r0, r1
 8004512:	b510      	push	{r4, lr}
 8004514:	eb01 0402 	add.w	r4, r1, r2
 8004518:	d902      	bls.n	8004520 <memmove+0x10>
 800451a:	4284      	cmp	r4, r0
 800451c:	4623      	mov	r3, r4
 800451e:	d807      	bhi.n	8004530 <memmove+0x20>
 8004520:	1e43      	subs	r3, r0, #1
 8004522:	42a1      	cmp	r1, r4
 8004524:	d008      	beq.n	8004538 <memmove+0x28>
 8004526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800452e:	e7f8      	b.n	8004522 <memmove+0x12>
 8004530:	4402      	add	r2, r0
 8004532:	4601      	mov	r1, r0
 8004534:	428a      	cmp	r2, r1
 8004536:	d100      	bne.n	800453a <memmove+0x2a>
 8004538:	bd10      	pop	{r4, pc}
 800453a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800453e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004542:	e7f7      	b.n	8004534 <memmove+0x24>

08004544 <_sbrk_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4d06      	ldr	r5, [pc, #24]	; (8004560 <_sbrk_r+0x1c>)
 8004548:	2300      	movs	r3, #0
 800454a:	4604      	mov	r4, r0
 800454c:	4608      	mov	r0, r1
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	f7fd fa34 	bl	80019bc <_sbrk>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_sbrk_r+0x1a>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_sbrk_r+0x1a>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000308 	.word	0x20000308

08004564 <_realloc_r>:
 8004564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004568:	4680      	mov	r8, r0
 800456a:	4614      	mov	r4, r2
 800456c:	460e      	mov	r6, r1
 800456e:	b921      	cbnz	r1, 800457a <_realloc_r+0x16>
 8004570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004574:	4611      	mov	r1, r2
 8004576:	f7ff bc57 	b.w	8003e28 <_malloc_r>
 800457a:	b92a      	cbnz	r2, 8004588 <_realloc_r+0x24>
 800457c:	f7ff fbe8 	bl	8003d50 <_free_r>
 8004580:	4625      	mov	r5, r4
 8004582:	4628      	mov	r0, r5
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004588:	f000 f81b 	bl	80045c2 <_malloc_usable_size_r>
 800458c:	4284      	cmp	r4, r0
 800458e:	4607      	mov	r7, r0
 8004590:	d802      	bhi.n	8004598 <_realloc_r+0x34>
 8004592:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004596:	d812      	bhi.n	80045be <_realloc_r+0x5a>
 8004598:	4621      	mov	r1, r4
 800459a:	4640      	mov	r0, r8
 800459c:	f7ff fc44 	bl	8003e28 <_malloc_r>
 80045a0:	4605      	mov	r5, r0
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d0ed      	beq.n	8004582 <_realloc_r+0x1e>
 80045a6:	42bc      	cmp	r4, r7
 80045a8:	4622      	mov	r2, r4
 80045aa:	4631      	mov	r1, r6
 80045ac:	bf28      	it	cs
 80045ae:	463a      	movcs	r2, r7
 80045b0:	f7ff fbc0 	bl	8003d34 <memcpy>
 80045b4:	4631      	mov	r1, r6
 80045b6:	4640      	mov	r0, r8
 80045b8:	f7ff fbca 	bl	8003d50 <_free_r>
 80045bc:	e7e1      	b.n	8004582 <_realloc_r+0x1e>
 80045be:	4635      	mov	r5, r6
 80045c0:	e7df      	b.n	8004582 <_realloc_r+0x1e>

080045c2 <_malloc_usable_size_r>:
 80045c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c6:	1f18      	subs	r0, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bfbc      	itt	lt
 80045cc:	580b      	ldrlt	r3, [r1, r0]
 80045ce:	18c0      	addlt	r0, r0, r3
 80045d0:	4770      	bx	lr
	...

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
