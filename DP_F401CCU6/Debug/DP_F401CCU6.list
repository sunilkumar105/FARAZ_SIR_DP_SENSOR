
DP_F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a0  080062a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a8  080062a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080062b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000078  08006328  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006328  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e27f  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000214b  00000000  00000000  0002e36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  000304b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a36  00000000  00000000  000311e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f3a  00000000  00000000  00031c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a7e  00000000  00000000  00048b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089b6b  00000000  00000000  000595ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b54  00000000  00000000  000e313c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e6c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ca4 	.word	0x08005ca4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005ca4 	.word	0x08005ca4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <dp_sens_init>:
#include "ADP8XX_DP_SENSOR.h"

uint8_t DP_SENSOR_ADDR = 0X25 << 1;
uint32_t i2c_RETRY_TIME = 100;

HAL_StatusTypeDef dp_sens_init(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_IsDeviceReady(&DP_SENS_handletype_def, DP_SENSOR_ADDR, 2,
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <dp_sens_init+0x30>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b299      	uxth	r1, r3
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <dp_sens_init+0x34>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2202      	movs	r2, #2
 800059e:	4809      	ldr	r0, [pc, #36]	; (80005c4 <dp_sens_init+0x38>)
 80005a0:	f002 fcbe 	bl	8002f20 <HAL_I2C_IsDeviceReady>
 80005a4:	4603      	mov	r3, r0
 80005a6:	71fb      	strb	r3, [r7, #7]
			i2c_RETRY_TIME); // is device avaialble ?
	if (ret != HAL_OK) {
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <dp_sens_init+0x26>
		return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <dp_sens_init+0x28>
	}
	return HAL_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000140 	.word	0x20000140

080005c8 <READ_PRESSURE>:

uint32_t READ_PRESSURE(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af02      	add	r7, sp, #8
	uint8_t COMMAND[2];
	COMMAND[0] = 0X37;
 80005ce:	2337      	movs	r3, #55	; 0x37
 80005d0:	743b      	strb	r3, [r7, #16]
	COMMAND[1] = 0X2D;
 80005d2:	232d      	movs	r3, #45	; 0x2d
 80005d4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&DP_SENS_handletype_def, DP_SENSOR_ADDR, COMMAND, 2,
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <READ_PRESSURE+0x68>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b299      	uxth	r1, r3
 80005dc:	f107 0210 	add.w	r2, r7, #16
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2302      	movs	r3, #2
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <READ_PRESSURE+0x6c>)
 80005e8:	f002 f976 	bl	80028d8 <HAL_I2C_Master_Transmit>
			100);
	uint8_t DP_data[9] = { 0 };
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Receive(&DP_SENS_handletype_def, DP_SENSOR_ADDR, DP_data, 9,
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <READ_PRESSURE+0x68>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b299      	uxth	r1, r3
 8000600:	1d3a      	adds	r2, r7, #4
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2309      	movs	r3, #9
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <READ_PRESSURE+0x6c>)
 800060a:	f002 fa63 	bl	8002ad4 <HAL_I2C_Master_Receive>
			100);
	int32_t PRESSURE = ((int16_t) DP_data[0] << 8 | DP_data[1]) / 60;
 800060e:	793b      	ldrb	r3, [r7, #4]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	797a      	ldrb	r2, [r7, #5]
 8000614:	4313      	orrs	r3, r2
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <READ_PRESSURE+0x70>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	441a      	add	r2, r3
 800061e:	1152      	asrs	r2, r2, #5
 8000620:	17db      	asrs	r3, r3, #31
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	617b      	str	r3, [r7, #20]
	return PRESSURE;
 8000626:	697b      	ldr	r3, [r7, #20]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	20000140 	.word	0x20000140
 8000638:	88888889 	.word	0x88888889

0800063c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <NRF24_DelayMicroSeconds+0x3c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <NRF24_DelayMicroSeconds+0x40>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	0c9a      	lsrs	r2, r3, #18
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	fb02 f303 	mul.w	r3, r2, r3
 800065a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800065c:	bf00      	nop
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	1e5a      	subs	r2, r3, #1
 8000662:	60fa      	str	r2, [r7, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1fa      	bne.n	800065e <NRF24_DelayMicroSeconds+0x22>
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	2000001c 	.word	0x2000001c
 800067c:	165e9f81 	.word	0x165e9f81

08000680 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d008      	beq.n	80006a0 <NRF24_csn+0x20>
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <NRF24_csn+0x38>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <NRF24_csn+0x3c>)
 8000694:	8811      	ldrh	r1, [r2, #0]
 8000696:	2201      	movs	r2, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f001 ffa5 	bl	80025e8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800069e:	e007      	b.n	80006b0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <NRF24_csn+0x38>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <NRF24_csn+0x3c>)
 80006a6:	8811      	ldrh	r1, [r2, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 ff9c 	bl	80025e8 <HAL_GPIO_WritePin>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000009c 	.word	0x2000009c
 80006bc:	200000a0 	.word	0x200000a0

080006c0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <NRF24_ce+0x20>
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <NRF24_ce+0x38>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <NRF24_ce+0x3c>)
 80006d4:	8811      	ldrh	r1, [r2, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 ff85 	bl	80025e8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80006de:	e007      	b.n	80006f0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <NRF24_ce+0x38>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a05      	ldr	r2, [pc, #20]	; (80006fc <NRF24_ce+0x3c>)
 80006e6:	8811      	ldrh	r1, [r2, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 ff7c 	bl	80025e8 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000009c 	.word	0x2000009c
 80006fc:	200000a2 	.word	0x200000a2

08000700 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ffb8 	bl	8000680 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 031f 	and.w	r3, r3, #31
 8000716:	b2db      	uxtb	r3, r3
 8000718:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800071a:	f107 010c 	add.w	r1, r7, #12
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	2201      	movs	r2, #1
 8000722:	480a      	ldr	r0, [pc, #40]	; (800074c <NRF24_read_register+0x4c>)
 8000724:	f003 fd39 	bl	800419a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	1c59      	adds	r1, r3, #1
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	2201      	movs	r2, #1
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <NRF24_read_register+0x4c>)
 8000734:	f003 fe6d 	bl	8004412 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000738:	7b7b      	ldrb	r3, [r7, #13]
 800073a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff9f 	bl	8000680 <NRF24_csn>
	return retData;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000a4 	.word	0x200000a4

08000750 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff8d 	bl	8000680 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	b2db      	uxtb	r3, r3
 800076e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000770:	f107 010c 	add.w	r1, r7, #12
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	2201      	movs	r2, #1
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <NRF24_read_registerN+0x4c>)
 800077a:	f003 fd0e 	bl	800419a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	b29a      	uxth	r2, r3
 8000782:	2364      	movs	r3, #100	; 0x64
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <NRF24_read_registerN+0x4c>)
 8000788:	f003 fe43 	bl	8004412 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff77 	bl	8000680 <NRF24_csn>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000a4 	.word	0x200000a4

080007a0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff65 	bl	8000680 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80007c4:	f107 010c 	add.w	r1, r7, #12
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	2202      	movs	r2, #2
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <NRF24_write_register+0x40>)
 80007ce:	f003 fce4 	bl	800419a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff ff54 	bl	8000680 <NRF24_csn>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000a4 	.word	0x200000a4

080007e4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ff43 	bl	8000680 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	b2db      	uxtb	r3, r3
 8000802:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000804:	f107 010c 	add.w	r1, r7, #12
 8000808:	2364      	movs	r3, #100	; 0x64
 800080a:	2201      	movs	r2, #1
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <NRF24_write_registerN+0x4c>)
 800080e:	f003 fcc4 	bl	800419a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	b29a      	uxth	r2, r3
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	6839      	ldr	r1, [r7, #0]
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <NRF24_write_registerN+0x4c>)
 800081c:	f003 fcbd 	bl	800419a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff2d 	bl	8000680 <NRF24_csn>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000a4 	.word	0x200000a4

08000834 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff ff1d 	bl	8000680 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800084a:	f107 010f 	add.w	r1, r7, #15
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <NRF24_write_payload+0x40>)
 8000854:	f003 fca1 	bl	800419a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	b29a      	uxth	r2, r3
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <NRF24_write_payload+0x40>)
 8000862:	f003 fc9a 	bl	800419a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff ff0a 	bl	8000680 <NRF24_csn>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000a4 	.word	0x200000a4

08000878 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800087c:	21ff      	movs	r1, #255	; 0xff
 800087e:	20e1      	movs	r0, #225	; 0xe1
 8000880:	f7ff ff8e 	bl	80007a0 <NRF24_write_register>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800088c:	21ff      	movs	r1, #255	; 0xff
 800088e:	20e2      	movs	r0, #226	; 0xe2
 8000890:	f7ff ff86 	bl	80007a0 <NRF24_write_register>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800089e:	2007      	movs	r0, #7
 80008a0:	f7ff ff2e 	bl	8000700 <NRF24_read_register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80008b4:	b082      	sub	sp, #8
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	61fb      	str	r3, [r7, #28]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80008c8:	4b66      	ldr	r3, [pc, #408]	; (8000a64 <NRF24_begin+0x1b0>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	2258      	movs	r2, #88	; 0x58
 80008d2:	4619      	mov	r1, r3
 80008d4:	f004 fd96 	bl	8005404 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80008d8:	4a63      	ldr	r2, [pc, #396]	; (8000a68 <NRF24_begin+0x1b4>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80008de:	4a63      	ldr	r2, [pc, #396]	; (8000a6c <NRF24_begin+0x1b8>)
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80008e4:	4a62      	ldr	r2, [pc, #392]	; (8000a70 <NRF24_begin+0x1bc>)
 80008e6:	883b      	ldrh	r3, [r7, #0]
 80008e8:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fec8 	bl	8000680 <NRF24_csn>
	NRF24_ce(0);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fee5 	bl	80006c0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80008f6:	2005      	movs	r0, #5
 80008f8:	f001 fbe8 	bl	80020cc <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80008fc:	2108      	movs	r1, #8
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff ff4e 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000904:	213f      	movs	r1, #63	; 0x3f
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff ff4a 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800090c:	2103      	movs	r1, #3
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff ff46 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000914:	2103      	movs	r1, #3
 8000916:	2003      	movs	r0, #3
 8000918:	f7ff ff42 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800091c:	2103      	movs	r1, #3
 800091e:	2004      	movs	r0, #4
 8000920:	f7ff ff3e 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000924:	2102      	movs	r1, #2
 8000926:	2005      	movs	r0, #5
 8000928:	f7ff ff3a 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800092c:	210f      	movs	r1, #15
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff ff36 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000934:	210e      	movs	r1, #14
 8000936:	2007      	movs	r0, #7
 8000938:	f7ff ff32 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800093c:	2100      	movs	r1, #0
 800093e:	2008      	movs	r0, #8
 8000940:	f7ff ff2e 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000944:	2100      	movs	r1, #0
 8000946:	2009      	movs	r0, #9
 8000948:	f7ff ff2a 	bl	80007a0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800094c:	23e7      	movs	r3, #231	; 0xe7
 800094e:	733b      	strb	r3, [r7, #12]
 8000950:	23e7      	movs	r3, #231	; 0xe7
 8000952:	72fb      	strb	r3, [r7, #11]
 8000954:	23e7      	movs	r3, #231	; 0xe7
 8000956:	72bb      	strb	r3, [r7, #10]
 8000958:	23e7      	movs	r3, #231	; 0xe7
 800095a:	727b      	strb	r3, [r7, #9]
 800095c:	23e7      	movs	r3, #231	; 0xe7
 800095e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	2205      	movs	r2, #5
 8000966:	4619      	mov	r1, r3
 8000968:	200a      	movs	r0, #10
 800096a:	f7ff ff3b 	bl	80007e4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800096e:	23c2      	movs	r3, #194	; 0xc2
 8000970:	733b      	strb	r3, [r7, #12]
 8000972:	23c2      	movs	r3, #194	; 0xc2
 8000974:	72fb      	strb	r3, [r7, #11]
 8000976:	23c2      	movs	r3, #194	; 0xc2
 8000978:	72bb      	strb	r3, [r7, #10]
 800097a:	23c2      	movs	r3, #194	; 0xc2
 800097c:	727b      	strb	r3, [r7, #9]
 800097e:	23c2      	movs	r3, #194	; 0xc2
 8000980:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2205      	movs	r2, #5
 8000988:	4619      	mov	r1, r3
 800098a:	200b      	movs	r0, #11
 800098c:	f7ff ff2a 	bl	80007e4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000990:	21c3      	movs	r1, #195	; 0xc3
 8000992:	200c      	movs	r0, #12
 8000994:	f7ff ff04 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000998:	21c4      	movs	r1, #196	; 0xc4
 800099a:	200d      	movs	r0, #13
 800099c:	f7ff ff00 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80009a0:	21c5      	movs	r1, #197	; 0xc5
 80009a2:	200e      	movs	r0, #14
 80009a4:	f7ff fefc 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80009a8:	21c6      	movs	r1, #198	; 0xc6
 80009aa:	200f      	movs	r0, #15
 80009ac:	f7ff fef8 	bl	80007a0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80009b0:	23e7      	movs	r3, #231	; 0xe7
 80009b2:	733b      	strb	r3, [r7, #12]
 80009b4:	23e7      	movs	r3, #231	; 0xe7
 80009b6:	72fb      	strb	r3, [r7, #11]
 80009b8:	23e7      	movs	r3, #231	; 0xe7
 80009ba:	72bb      	strb	r3, [r7, #10]
 80009bc:	23e7      	movs	r3, #231	; 0xe7
 80009be:	727b      	strb	r3, [r7, #9]
 80009c0:	23e7      	movs	r3, #231	; 0xe7
 80009c2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2205      	movs	r2, #5
 80009ca:	4619      	mov	r1, r3
 80009cc:	2010      	movs	r0, #16
 80009ce:	f7ff ff09 	bl	80007e4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80009d2:	2100      	movs	r1, #0
 80009d4:	2011      	movs	r0, #17
 80009d6:	f7ff fee3 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80009da:	2100      	movs	r1, #0
 80009dc:	2012      	movs	r0, #18
 80009de:	f7ff fedf 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2013      	movs	r0, #19
 80009e6:	f7ff fedb 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2014      	movs	r0, #20
 80009ee:	f7ff fed7 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	2015      	movs	r0, #21
 80009f6:	f7ff fed3 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2016      	movs	r0, #22
 80009fe:	f7ff fecf 	bl	80007a0 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000a02:	f000 fa89 	bl	8000f18 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000a06:	2100      	movs	r1, #0
 8000a08:	201c      	movs	r0, #28
 8000a0a:	f7ff fec9 	bl	80007a0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	201d      	movs	r0, #29
 8000a12:	f7ff fec5 	bl	80007a0 <NRF24_write_register>
	printRadioSettings();
 8000a16:	f000 fa99 	bl	8000f4c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	200f      	movs	r0, #15
 8000a1e:	f000 f8ad 	bl	8000b7c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f927 	bl	8000c76 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 f95d 	bl	8000ce8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f000 f9a0 	bl	8000d74 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000a34:	f000 f8f2 	bl	8000c1c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000a38:	2020      	movs	r0, #32
 8000a3a:	f000 f8cf 	bl	8000bdc <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000a3e:	f000 fa62 	bl	8000f06 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000a42:	204c      	movs	r0, #76	; 0x4c
 8000a44:	f000 f8b5 	bl	8000bb2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000a48:	f7ff ff16 	bl	8000878 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a4c:	f7ff ff1c 	bl	8000888 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000a50:	f000 f9b8 	bl	8000dc4 <NRF24_powerDown>
	
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a5e:	b002      	add	sp, #8
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000a4 	.word	0x200000a4
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	200000a0 	.word	0x200000a0
 8000a70:	200000a2 	.word	0x200000a2

08000a74 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fe21 	bl	80006c0 <NRF24_ce>
	NRF24_flush_tx();
 8000a7e:	f7ff fefb 	bl	8000878 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a82:	f7ff ff01 	bl	8000888 <NRF24_flush_rx>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000a98:	f000 fa35 	bl	8000f06 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 f9ce 	bl	8000e42 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000aa6:	f001 fb05 	bl	80020b4 <HAL_GetTick>
 8000aaa:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000aac:	230a      	movs	r3, #10
 8000aae:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000ab0:	f107 030d 	add.w	r3, r7, #13
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2008      	movs	r0, #8
 8000aba:	f7ff fe49 	bl	8000750 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000abe:	f7ff feeb 	bl	8000898 <NRF24_get_status>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d107      	bne.n	8000ae0 <NRF24_write+0x54>
 8000ad0:	f001 faf0 	bl	80020b4 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8e7      	bhi.n	8000ab0 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000ae0:	f107 010b 	add.w	r1, r7, #11
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <NRF24_write+0x90>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f9d8 	bl	8000ea0 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000af0:	7b3b      	ldrb	r3, [r7, #12]
 8000af2:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <NRF24_write+0x90>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d005      	beq.n	8000b08 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000afc:	f000 f886 	bl	8000c0c <NRF24_getDynamicPayloadSize>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <NRF24_write+0x94>)
 8000b06:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000b08:	f000 f80c 	bl	8000b24 <NRF24_available>
	NRF24_flush_tx();
 8000b0c:	f7ff feb4 	bl	8000878 <NRF24_flush_tx>
	return retStatus;
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000094 	.word	0x20000094
 8000b20:	20000095 	.word	0x20000095

08000b24 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f95a 	bl	8000de2 <NRF24_availablePipe>
 8000b2e:	4603      	mov	r3, r0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2205      	movs	r2, #5
 8000b42:	4619      	mov	r1, r3
 8000b44:	200a      	movs	r0, #10
 8000b46:	f7ff fe4d 	bl	80007e4 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2205      	movs	r2, #5
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2010      	movs	r0, #16
 8000b52:	f7ff fe47 	bl	80007e4 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000b56:	2320      	movs	r3, #32
 8000b58:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <NRF24_openWritingPipe+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	4293      	cmp	r3, r2
 8000b62:	bf28      	it	cs
 8000b64:	4613      	movcs	r3, r2
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2011      	movs	r0, #17
 8000b6c:	f7ff fe18 	bl	80007a0 <NRF24_write_register>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000096 	.word	0x20000096

08000b7c <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	460a      	mov	r2, r1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2004      	movs	r0, #4
 8000ba6:	f7ff fdfb 	bl	80007a0 <NRF24_write_register>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000bbc:	237f      	movs	r3, #127	; 0x7f
 8000bbe:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	bf28      	it	cs
 8000bc8:	4613      	movcs	r3, r2
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f7ff fde6 	bl	80007a0 <NRF24_write_register>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000be6:	2320      	movs	r3, #32
 8000be8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000bea:	7bfa      	ldrb	r2, [r7, #15]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	bf28      	it	cs
 8000bf2:	4613      	movcs	r3, r2
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <NRF24_setPayloadSize+0x2c>)
 8000bf8:	701a      	strb	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000096 	.word	0x20000096

08000c0c <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000c10:	2060      	movs	r0, #96	; 0x60
 8000c12:	f7ff fd75 	bl	8000700 <NRF24_read_register>
 8000c16:	4603      	mov	r3, r0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000c20:	201d      	movs	r0, #29
 8000c22:	f7ff fd6d 	bl	8000700 <NRF24_read_register>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f023 0304 	bic.w	r3, r3, #4
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4619      	mov	r1, r3
 8000c30:	201d      	movs	r0, #29
 8000c32:	f7ff fdb5 	bl	80007a0 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	201c      	movs	r0, #28
 8000c3a:	f7ff fdb1 	bl	80007a0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000c3e:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <NRF24_disableDynamicPayloads+0x2c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000097 	.word	0x20000097

08000c4c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000c5c:	213f      	movs	r1, #63	; 0x3f
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fd9e 	bl	80007a0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000c64:	e003      	b.n	8000c6e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fd99 	bl	80007a0 <NRF24_write_register>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c80:	2006      	movs	r0, #6
 8000c82:	f7ff fd3d 	bl	8000700 <NRF24_read_register>
 8000c86:	4603      	mov	r3, r0
 8000c88:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f023 0306 	bic.w	r3, r3, #6
 8000c90:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d104      	bne.n	8000ca2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	f043 0306 	orr.w	r3, r3, #6
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e019      	b.n	8000cd6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d104      	bne.n	8000cb2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e011      	b.n	8000cd6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d104      	bne.n	8000cc2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e009      	b.n	8000cd6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d103      	bne.n	8000cd6 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f043 0306 	orr.w	r3, r3, #6
 8000cd4:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2006      	movs	r0, #6
 8000cdc:	f7ff fd60 	bl	80007a0 <NRF24_write_register>
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000cf6:	2006      	movs	r0, #6
 8000cf8:	f7ff fd02 	bl	8000700 <NRF24_read_register>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <NRF24_setDataRate+0x88>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000d0c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d107      	bne.n	8000d24 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <NRF24_setDataRate+0x88>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	f043 0320 	orr.w	r3, r3, #32
 8000d20:	73bb      	strb	r3, [r7, #14]
 8000d22:	e00d      	b.n	8000d40 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d107      	bne.n	8000d3a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <NRF24_setDataRate+0x88>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	73bb      	strb	r3, [r7, #14]
 8000d38:	e002      	b.n	8000d40 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <NRF24_setDataRate+0x88>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	4619      	mov	r1, r3
 8000d44:	2006      	movs	r0, #6
 8000d46:	f7ff fd2b 	bl	80007a0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000d4a:	2006      	movs	r0, #6
 8000d4c:	f7ff fcd8 	bl	8000700 <NRF24_read_register>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d102      	bne.n	8000d60 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e002      	b.n	8000d66 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <NRF24_setDataRate+0x88>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000098 	.word	0x20000098

08000d74 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fcbe 	bl	8000700 <NRF24_read_register>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f023 030c 	bic.w	r3, r3, #12
 8000d8a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00f      	beq.n	8000db2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d104      	bne.n	8000da2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e007      	b.n	8000db2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fcf2 	bl	80007a0 <NRF24_write_register>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fc99 	bl	8000700 <NRF24_read_register>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f023 0302 	bic.w	r3, r3, #2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fce1 	bl	80007a0 <NRF24_write_register>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000dea:	f7ff fd55 	bl	8000898 <NRF24_get_status>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d017      	beq.n	8000e38 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	2007      	movs	r0, #7
 8000e22:	f7ff fcbd 	bl	80007a0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000e30:	2120      	movs	r1, #32
 8000e32:	2007      	movs	r0, #7
 8000e34:	f7ff fcb4 	bl	80007a0 <NRF24_write_register>
    }
  }
  return result;
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fc36 	bl	80006c0 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fc53 	bl	8000700 <NRF24_read_register>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fc98 	bl	80007a0 <NRF24_write_register>
  NRF24_ce(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff fc25 	bl	80006c0 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000e76:	2096      	movs	r0, #150	; 0x96
 8000e78:	f7ff fbe0 	bl	800063c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fcd7 	bl	8000834 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fc1a 	bl	80006c0 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	f7ff fbd5 	bl	800063c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fc14 	bl	80006c0 <NRF24_ce>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000eac:	f7ff fcf4 	bl	8000898 <NRF24_get_status>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000eba:	2170      	movs	r1, #112	; 0x70
 8000ebc:	2007      	movs	r0, #7
 8000ebe:	f7ff fc6f 	bl	80007a0 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2301      	movne	r3, #1
 8000ece:	2300      	moveq	r3, #0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf14      	ite	ne
 8000ef4:	2301      	movne	r3, #1
 8000ef6:	2300      	moveq	r3, #0
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	701a      	strb	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000f0a:	2170      	movs	r1, #112	; 0x70
 8000f0c:	2007      	movs	r0, #7
 8000f0e:	f7ff fc47 	bl	80007a0 <NRF24_write_register>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff fbae 	bl	8000680 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000f24:	2350      	movs	r3, #80	; 0x50
 8000f26:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000f28:	2373      	movs	r3, #115	; 0x73
 8000f2a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000f2c:	1d39      	adds	r1, r7, #4
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	2202      	movs	r2, #2
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <NRF24_ACTIVATE_cmd+0x30>)
 8000f34:	f003 f931 	bl	800419a <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fba1 	bl	8000680 <NRF24_csn>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000a4 	.word	0x200000a4

08000f4c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b0a1      	sub	sp, #132	; 0x84
 8000f50:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	49c3      	ldr	r1, [pc, #780]	; (8001264 <printRadioSettings+0x318>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f9ff 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f93c 	bl	80001e0 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f107 0108 	add.w	r1, r7, #8
 8000f70:	230a      	movs	r3, #10
 8000f72:	48bd      	ldr	r0, [pc, #756]	; (8001268 <printRadioSettings+0x31c>)
 8000f74:	f003 fe7d 	bl	8004c72 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fbc1 	bl	8000700 <NRF24_read_register>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000f84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000f90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <printRadioSettings+0x5e>
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	49b2      	ldr	r1, [pc, #712]	; (800126c <printRadioSettings+0x320>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 f9da 	bl	800535c <siprintf>
 8000fa8:	e00c      	b.n	8000fc4 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	49b0      	ldr	r1, [pc, #704]	; (8001270 <printRadioSettings+0x324>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f9d3 	bl	800535c <siprintf>
 8000fb6:	e005      	b.n	8000fc4 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	49ad      	ldr	r1, [pc, #692]	; (8001274 <printRadioSettings+0x328>)
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f004 f9cc 	bl	800535c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f909 	bl	80001e0 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f107 0108 	add.w	r1, r7, #8
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	48a3      	ldr	r0, [pc, #652]	; (8001268 <printRadioSettings+0x31c>)
 8000fda:	f003 fe4a 	bl	8004c72 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fb8e 	bl	8000700 <NRF24_read_register>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fee:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bfcc      	ite	gt
 8000ff6:	2301      	movgt	r3, #1
 8000ff8:	2300      	movle	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ffe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001002:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001006:	2b00      	cmp	r3, #0
 8001008:	bfcc      	ite	gt
 800100a:	2301      	movgt	r3, #1
 800100c:	2300      	movle	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001012:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001016:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800101a:	2b00      	cmp	r3, #0
 800101c:	bfcc      	ite	gt
 800101e:	2301      	movgt	r3, #1
 8001020:	2300      	movle	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800102a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800102e:	2b00      	cmp	r3, #0
 8001030:	bfcc      	ite	gt
 8001032:	2301      	movgt	r3, #1
 8001034:	2300      	movle	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800103a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800103e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001042:	2b00      	cmp	r3, #0
 8001044:	bfcc      	ite	gt
 8001046:	2301      	movgt	r3, #1
 8001048:	2300      	movle	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800104e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001052:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001056:	2b00      	cmp	r3, #0
 8001058:	bfcc      	ite	gt
 800105a:	2301      	movgt	r3, #1
 800105c:	2300      	movle	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f107 0008 	add.w	r0, r7, #8
 8001064:	9303      	str	r3, [sp, #12]
 8001066:	9402      	str	r4, [sp, #8]
 8001068:	9101      	str	r1, [sp, #4]
 800106a:	9200      	str	r2, [sp, #0]
 800106c:	4633      	mov	r3, r6
 800106e:	462a      	mov	r2, r5
 8001070:	4981      	ldr	r1, [pc, #516]	; (8001278 <printRadioSettings+0x32c>)
 8001072:	f004 f973 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	f107 0108 	add.w	r1, r7, #8
 8001088:	230a      	movs	r3, #10
 800108a:	4877      	ldr	r0, [pc, #476]	; (8001268 <printRadioSettings+0x31c>)
 800108c:	f003 fdf1 	bl	8004c72 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001090:	2002      	movs	r0, #2
 8001092:	f7ff fb35 	bl	8000700 <NRF24_read_register>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800109c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010a0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfcc      	ite	gt
 80010a8:	2301      	movgt	r3, #1
 80010aa:	2300      	movle	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010b4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bfcc      	ite	gt
 80010bc:	2301      	movgt	r3, #1
 80010be:	2300      	movle	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010c8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bfcc      	ite	gt
 80010d0:	2301      	movgt	r3, #1
 80010d2:	2300      	movle	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010dc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bfcc      	ite	gt
 80010e4:	2301      	movgt	r3, #1
 80010e6:	2300      	movle	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010f0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bfcc      	ite	gt
 80010f8:	2301      	movgt	r3, #1
 80010fa:	2300      	movle	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001100:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001104:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001108:	2b00      	cmp	r3, #0
 800110a:	bfcc      	ite	gt
 800110c:	2301      	movgt	r3, #1
 800110e:	2300      	movle	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	9402      	str	r4, [sp, #8]
 800111a:	9101      	str	r1, [sp, #4]
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	4633      	mov	r3, r6
 8001120:	462a      	mov	r2, r5
 8001122:	4956      	ldr	r1, [pc, #344]	; (800127c <printRadioSettings+0x330>)
 8001124:	f004 f91a 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f857 	bl	80001e0 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	484a      	ldr	r0, [pc, #296]	; (8001268 <printRadioSettings+0x31c>)
 800113e:	f003 fd98 	bl	8004c72 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001142:	2003      	movs	r0, #3
 8001144:	f7ff fadc 	bl	8000700 <NRF24_read_register>
 8001148:	4603      	mov	r3, r0
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001152:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001156:	3302      	adds	r3, #2
 8001158:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800115c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4946      	ldr	r1, [pc, #280]	; (8001280 <printRadioSettings+0x334>)
 8001166:	4618      	mov	r0, r3
 8001168:	f004 f8f8 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f835 	bl	80001e0 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	f107 0108 	add.w	r1, r7, #8
 800117e:	230a      	movs	r3, #10
 8001180:	4839      	ldr	r0, [pc, #228]	; (8001268 <printRadioSettings+0x31c>)
 8001182:	f003 fd76 	bl	8004c72 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001186:	2005      	movs	r0, #5
 8001188:	f7ff faba 	bl	8000700 <NRF24_read_register>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001192:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4939      	ldr	r1, [pc, #228]	; (8001284 <printRadioSettings+0x338>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 f8db 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f818 	bl	80001e0 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f107 0108 	add.w	r1, r7, #8
 80011b8:	230a      	movs	r3, #10
 80011ba:	482b      	ldr	r0, [pc, #172]	; (8001268 <printRadioSettings+0x31c>)
 80011bc:	f003 fd59 	bl	8004c72 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80011c0:	2006      	movs	r0, #6
 80011c2:	f7ff fa9d 	bl	8000700 <NRF24_read_register>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80011cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <printRadioSettings+0x29a>
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	492a      	ldr	r1, [pc, #168]	; (8001288 <printRadioSettings+0x33c>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 f8bc 	bl	800535c <siprintf>
 80011e4:	e005      	b.n	80011f2 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4928      	ldr	r1, [pc, #160]	; (800128c <printRadioSettings+0x340>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 f8b5 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7fe fff2 	bl	80001e0 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f107 0108 	add.w	r1, r7, #8
 8001204:	230a      	movs	r3, #10
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <printRadioSettings+0x31c>)
 8001208:	f003 fd33 	bl	8004c72 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800120c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001210:	f003 0306 	and.w	r3, r3, #6
 8001214:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001218:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <printRadioSettings+0x2ec>
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4918      	ldr	r1, [pc, #96]	; (8001290 <printRadioSettings+0x344>)
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f893 	bl	800535c <siprintf>
 8001236:	e03b      	b.n	80012b0 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <printRadioSettings+0x302>
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	4913      	ldr	r1, [pc, #76]	; (8001294 <printRadioSettings+0x348>)
 8001246:	4618      	mov	r0, r3
 8001248:	f004 f888 	bl	800535c <siprintf>
 800124c:	e030      	b.n	80012b0 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800124e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001252:	2b02      	cmp	r3, #2
 8001254:	d122      	bne.n	800129c <printRadioSettings+0x350>
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	490f      	ldr	r1, [pc, #60]	; (8001298 <printRadioSettings+0x34c>)
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f87d 	bl	800535c <siprintf>
 8001262:	e025      	b.n	80012b0 <printRadioSettings+0x364>
 8001264:	08005cbc 	.word	0x08005cbc
 8001268:	200000fc 	.word	0x200000fc
 800126c:	08005cf0 	.word	0x08005cf0
 8001270:	08005d0c 	.word	0x08005d0c
 8001274:	08005d28 	.word	0x08005d28
 8001278:	08005d3c 	.word	0x08005d3c
 800127c:	08005d80 	.word	0x08005d80
 8001280:	08005dcc 	.word	0x08005dcc
 8001284:	08005de8 	.word	0x08005de8
 8001288:	08005dfc 	.word	0x08005dfc
 800128c:	08005e14 	.word	0x08005e14
 8001290:	08005e2c 	.word	0x08005e2c
 8001294:	08005e40 	.word	0x08005e40
 8001298:	08005e54 	.word	0x08005e54
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800129c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d105      	bne.n	80012b0 <printRadioSettings+0x364>
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	49d7      	ldr	r1, [pc, #860]	; (8001608 <printRadioSettings+0x6bc>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 f856 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ff93 	bl	80001e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	48d1      	ldr	r0, [pc, #836]	; (800160c <printRadioSettings+0x6c0>)
 80012c6:	f003 fcd4 	bl	8004c72 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80012ca:	463b      	mov	r3, r7
 80012cc:	2205      	movs	r2, #5
 80012ce:	4619      	mov	r1, r3
 80012d0:	200a      	movs	r0, #10
 80012d2:	f7ff fa3d 	bl	8000750 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012d6:	793b      	ldrb	r3, [r7, #4]
 80012d8:	461c      	mov	r4, r3
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	461d      	mov	r5, r3
 80012de:	78bb      	ldrb	r3, [r7, #2]
 80012e0:	787a      	ldrb	r2, [r7, #1]
 80012e2:	7839      	ldrb	r1, [r7, #0]
 80012e4:	f107 0008 	add.w	r0, r7, #8
 80012e8:	9102      	str	r1, [sp, #8]
 80012ea:	9201      	str	r2, [sp, #4]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	462b      	mov	r3, r5
 80012f0:	4622      	mov	r2, r4
 80012f2:	49c7      	ldr	r1, [pc, #796]	; (8001610 <printRadioSettings+0x6c4>)
 80012f4:	f004 f832 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	230a      	movs	r3, #10
 800130c:	48bf      	ldr	r0, [pc, #764]	; (800160c <printRadioSettings+0x6c0>)
 800130e:	f003 fcb0 	bl	8004c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001312:	463b      	mov	r3, r7
 8001314:	2205      	movs	r2, #5
 8001316:	4619      	mov	r1, r3
 8001318:	200b      	movs	r0, #11
 800131a:	f7ff fa19 	bl	8000750 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800131e:	793b      	ldrb	r3, [r7, #4]
 8001320:	461c      	mov	r4, r3
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	461d      	mov	r5, r3
 8001326:	78bb      	ldrb	r3, [r7, #2]
 8001328:	787a      	ldrb	r2, [r7, #1]
 800132a:	7839      	ldrb	r1, [r7, #0]
 800132c:	f107 0008 	add.w	r0, r7, #8
 8001330:	9102      	str	r1, [sp, #8]
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	462b      	mov	r3, r5
 8001338:	4622      	mov	r2, r4
 800133a:	49b6      	ldr	r1, [pc, #728]	; (8001614 <printRadioSettings+0x6c8>)
 800133c:	f004 f80e 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ff4b 	bl	80001e0 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	f107 0108 	add.w	r1, r7, #8
 8001352:	230a      	movs	r3, #10
 8001354:	48ad      	ldr	r0, [pc, #692]	; (800160c <printRadioSettings+0x6c0>)
 8001356:	f003 fc8c 	bl	8004c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800135a:	463b      	mov	r3, r7
 800135c:	2201      	movs	r2, #1
 800135e:	4619      	mov	r1, r3
 8001360:	200c      	movs	r0, #12
 8001362:	f7ff f9f5 	bl	8000750 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001366:	783b      	ldrb	r3, [r7, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	49aa      	ldr	r1, [pc, #680]	; (8001618 <printRadioSettings+0x6cc>)
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fff3 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe ff30 	bl	80001e0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	f107 0108 	add.w	r1, r7, #8
 8001388:	230a      	movs	r3, #10
 800138a:	48a0      	ldr	r0, [pc, #640]	; (800160c <printRadioSettings+0x6c0>)
 800138c:	f003 fc71 	bl	8004c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001390:	463b      	mov	r3, r7
 8001392:	2201      	movs	r2, #1
 8001394:	4619      	mov	r1, r3
 8001396:	200d      	movs	r0, #13
 8001398:	f7ff f9da 	bl	8000750 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800139c:	783b      	ldrb	r3, [r7, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	499d      	ldr	r1, [pc, #628]	; (800161c <printRadioSettings+0x6d0>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 ffd8 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff15 	bl	80001e0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f107 0108 	add.w	r1, r7, #8
 80013be:	230a      	movs	r3, #10
 80013c0:	4892      	ldr	r0, [pc, #584]	; (800160c <printRadioSettings+0x6c0>)
 80013c2:	f003 fc56 	bl	8004c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80013c6:	463b      	mov	r3, r7
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	200e      	movs	r0, #14
 80013ce:	f7ff f9bf 	bl	8000750 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013d2:	783b      	ldrb	r3, [r7, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4991      	ldr	r1, [pc, #580]	; (8001620 <printRadioSettings+0x6d4>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 ffbd 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe fefa 	bl	80001e0 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f107 0108 	add.w	r1, r7, #8
 80013f4:	230a      	movs	r3, #10
 80013f6:	4885      	ldr	r0, [pc, #532]	; (800160c <printRadioSettings+0x6c0>)
 80013f8:	f003 fc3b 	bl	8004c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80013fc:	463b      	mov	r3, r7
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	200f      	movs	r0, #15
 8001404:	f7ff f9a4 	bl	8000750 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001408:	783b      	ldrb	r3, [r7, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4984      	ldr	r1, [pc, #528]	; (8001624 <printRadioSettings+0x6d8>)
 8001412:	4618      	mov	r0, r3
 8001414:	f003 ffa2 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fedf 	bl	80001e0 <strlen>
 8001422:	4603      	mov	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	f107 0108 	add.w	r1, r7, #8
 800142a:	230a      	movs	r3, #10
 800142c:	4877      	ldr	r0, [pc, #476]	; (800160c <printRadioSettings+0x6c0>)
 800142e:	f003 fc20 	bl	8004c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001432:	463b      	mov	r3, r7
 8001434:	2205      	movs	r2, #5
 8001436:	4619      	mov	r1, r3
 8001438:	2010      	movs	r0, #16
 800143a:	f7ff f989 	bl	8000750 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800143e:	793b      	ldrb	r3, [r7, #4]
 8001440:	461c      	mov	r4, r3
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	461d      	mov	r5, r3
 8001446:	78bb      	ldrb	r3, [r7, #2]
 8001448:	787a      	ldrb	r2, [r7, #1]
 800144a:	7839      	ldrb	r1, [r7, #0]
 800144c:	f107 0008 	add.w	r0, r7, #8
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	462b      	mov	r3, r5
 8001458:	4622      	mov	r2, r4
 800145a:	4973      	ldr	r1, [pc, #460]	; (8001628 <printRadioSettings+0x6dc>)
 800145c:	f003 ff7e 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe febb 	bl	80001e0 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f107 0108 	add.w	r1, r7, #8
 8001472:	230a      	movs	r3, #10
 8001474:	4865      	ldr	r0, [pc, #404]	; (800160c <printRadioSettings+0x6c0>)
 8001476:	f003 fbfc 	bl	8004c72 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800147a:	2011      	movs	r0, #17
 800147c:	f7ff f940 	bl	8000700 <NRF24_read_register>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800148a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4966      	ldr	r1, [pc, #408]	; (800162c <printRadioSettings+0x6e0>)
 8001494:	4618      	mov	r0, r3
 8001496:	f003 ff61 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fe9e 	bl	80001e0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	230a      	movs	r3, #10
 80014ae:	4857      	ldr	r0, [pc, #348]	; (800160c <printRadioSettings+0x6c0>)
 80014b0:	f003 fbdf 	bl	8004c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80014b4:	2012      	movs	r0, #18
 80014b6:	f7ff f923 	bl	8000700 <NRF24_read_register>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4958      	ldr	r1, [pc, #352]	; (8001630 <printRadioSettings+0x6e4>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 ff44 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe fe81 	bl	80001e0 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f107 0108 	add.w	r1, r7, #8
 80014e6:	230a      	movs	r3, #10
 80014e8:	4848      	ldr	r0, [pc, #288]	; (800160c <printRadioSettings+0x6c0>)
 80014ea:	f003 fbc2 	bl	8004c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80014ee:	2013      	movs	r0, #19
 80014f0:	f7ff f906 	bl	8000700 <NRF24_read_register>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	494b      	ldr	r1, [pc, #300]	; (8001634 <printRadioSettings+0x6e8>)
 8001508:	4618      	mov	r0, r3
 800150a:	f003 ff27 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fe64 	bl	80001e0 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	f107 0108 	add.w	r1, r7, #8
 8001520:	230a      	movs	r3, #10
 8001522:	483a      	ldr	r0, [pc, #232]	; (800160c <printRadioSettings+0x6c0>)
 8001524:	f003 fba5 	bl	8004c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001528:	2014      	movs	r0, #20
 800152a:	f7ff f8e9 	bl	8000700 <NRF24_read_register>
 800152e:	4603      	mov	r3, r0
 8001530:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001534:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	493d      	ldr	r1, [pc, #244]	; (8001638 <printRadioSettings+0x6ec>)
 8001542:	4618      	mov	r0, r3
 8001544:	f003 ff0a 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fe47 	bl	80001e0 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	b29a      	uxth	r2, r3
 8001556:	f107 0108 	add.w	r1, r7, #8
 800155a:	230a      	movs	r3, #10
 800155c:	482b      	ldr	r0, [pc, #172]	; (800160c <printRadioSettings+0x6c0>)
 800155e:	f003 fb88 	bl	8004c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001562:	2015      	movs	r0, #21
 8001564:	f7ff f8cc 	bl	8000700 <NRF24_read_register>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800156e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4930      	ldr	r1, [pc, #192]	; (800163c <printRadioSettings+0x6f0>)
 800157c:	4618      	mov	r0, r3
 800157e:	f003 feed 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe2a 	bl	80001e0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	f107 0108 	add.w	r1, r7, #8
 8001594:	230a      	movs	r3, #10
 8001596:	481d      	ldr	r0, [pc, #116]	; (800160c <printRadioSettings+0x6c0>)
 8001598:	f003 fb6b 	bl	8004c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800159c:	2016      	movs	r0, #22
 800159e:	f7ff f8af 	bl	8000700 <NRF24_read_register>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4922      	ldr	r1, [pc, #136]	; (8001640 <printRadioSettings+0x6f4>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fed0 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fe0d 	bl	80001e0 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	f107 0108 	add.w	r1, r7, #8
 80015ce:	230a      	movs	r3, #10
 80015d0:	480e      	ldr	r0, [pc, #56]	; (800160c <printRadioSettings+0x6c0>)
 80015d2:	f003 fb4e 	bl	8004c72 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80015d6:	201c      	movs	r0, #28
 80015d8:	f7ff f892 	bl	8000700 <NRF24_read_register>
 80015dc:	4603      	mov	r3, r0
 80015de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bfcc      	ite	gt
 80015ee:	2301      	movgt	r3, #1
 80015f0:	2300      	movle	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015fa:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bfcc      	ite	gt
 8001602:	2301      	movgt	r3, #1
 8001604:	2300      	movle	r3, #0
 8001606:	e01d      	b.n	8001644 <printRadioSettings+0x6f8>
 8001608:	08005e68 	.word	0x08005e68
 800160c:	200000fc 	.word	0x200000fc
 8001610:	08005e7c 	.word	0x08005e7c
 8001614:	08005eac 	.word	0x08005eac
 8001618:	08005edc 	.word	0x08005edc
 800161c:	08005f04 	.word	0x08005f04
 8001620:	08005f2c 	.word	0x08005f2c
 8001624:	08005f54 	.word	0x08005f54
 8001628:	08005f7c 	.word	0x08005f7c
 800162c:	08005fa8 	.word	0x08005fa8
 8001630:	08005fc4 	.word	0x08005fc4
 8001634:	08005fe0 	.word	0x08005fe0
 8001638:	08005ffc 	.word	0x08005ffc
 800163c:	08006018 	.word	0x08006018
 8001640:	08006034 	.word	0x08006034
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001650:	2b00      	cmp	r3, #0
 8001652:	bfcc      	ite	gt
 8001654:	2301      	movgt	r3, #1
 8001656:	2300      	movle	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800165c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001660:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001664:	2b00      	cmp	r3, #0
 8001666:	bfcc      	ite	gt
 8001668:	2301      	movgt	r3, #1
 800166a:	2300      	movle	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001670:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001674:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001678:	2b00      	cmp	r3, #0
 800167a:	bfcc      	ite	gt
 800167c:	2301      	movgt	r3, #1
 800167e:	2300      	movle	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001684:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001688:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800168c:	2b00      	cmp	r3, #0
 800168e:	bfcc      	ite	gt
 8001690:	2301      	movgt	r3, #1
 8001692:	2300      	movle	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f107 0008 	add.w	r0, r7, #8
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	9402      	str	r4, [sp, #8]
 800169e:	9101      	str	r1, [sp, #4]
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	4633      	mov	r3, r6
 80016a4:	462a      	mov	r2, r5
 80016a6:	4936      	ldr	r1, [pc, #216]	; (8001780 <printRadioSettings+0x834>)
 80016a8:	f003 fe58 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fd95 	bl	80001e0 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	f107 0108 	add.w	r1, r7, #8
 80016be:	230a      	movs	r3, #10
 80016c0:	4830      	ldr	r0, [pc, #192]	; (8001784 <printRadioSettings+0x838>)
 80016c2:	f003 fad6 	bl	8004c72 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80016c6:	201d      	movs	r0, #29
 80016c8:	f7ff f81a 	bl	8000700 <NRF24_read_register>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80016d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <printRadioSettings+0x7a0>
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4929      	ldr	r1, [pc, #164]	; (8001788 <printRadioSettings+0x83c>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fe39 	bl	800535c <siprintf>
 80016ea:	e005      	b.n	80016f8 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4926      	ldr	r1, [pc, #152]	; (800178c <printRadioSettings+0x840>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fe32 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd6f 	bl	80001e0 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	f107 0108 	add.w	r1, r7, #8
 800170a:	230a      	movs	r3, #10
 800170c:	481d      	ldr	r0, [pc, #116]	; (8001784 <printRadioSettings+0x838>)
 800170e:	f003 fab0 	bl	8004c72 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001712:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <printRadioSettings+0x7e0>
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	491b      	ldr	r1, [pc, #108]	; (8001790 <printRadioSettings+0x844>)
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fe19 	bl	800535c <siprintf>
 800172a:	e005      	b.n	8001738 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4918      	ldr	r1, [pc, #96]	; (8001794 <printRadioSettings+0x848>)
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fe12 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fd4f 	bl	80001e0 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f107 0108 	add.w	r1, r7, #8
 800174a:	230a      	movs	r3, #10
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <printRadioSettings+0x838>)
 800174e:	f003 fa90 	bl	8004c72 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4910      	ldr	r1, [pc, #64]	; (8001798 <printRadioSettings+0x84c>)
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fdff 	bl	800535c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd3c 	bl	80001e0 <strlen>
 8001768:	4603      	mov	r3, r0
 800176a:	b29a      	uxth	r2, r3
 800176c:	f107 0108 	add.w	r1, r7, #8
 8001770:	230a      	movs	r3, #10
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <printRadioSettings+0x838>)
 8001774:	f003 fa7d 	bl	8004c72 <HAL_UART_Transmit>
}
 8001778:	bf00      	nop
 800177a:	3774      	adds	r7, #116	; 0x74
 800177c:	46bd      	mov	sp, r7
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001780:	08006050 	.word	0x08006050
 8001784:	200000fc 	.word	0x200000fc
 8001788:	0800609c 	.word	0x0800609c
 800178c:	080060b4 	.word	0x080060b4
 8001790:	080060cc 	.word	0x080060cc
 8001794:	080060e8 	.word	0x080060e8
 8001798:	08005cbc 	.word	0x08005cbc

0800179c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800179c:	b084      	sub	sp, #16
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	f107 0c08 	add.w	ip, r7, #8
 80017a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <nrf24_DebugUART_Init+0x2c>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	2244      	movs	r2, #68	; 0x44
 80017b4:	4619      	mov	r1, r3
 80017b6:	f003 fe25 	bl	8005404 <memcpy>
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017c2:	b004      	add	sp, #16
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	200000fc 	.word	0x200000fc

080017cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017d2:	f000 fc09 	bl	8001fe8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017d6:	f000 f823 	bl	8001820 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017da:	f000 f919 	bl	8001a10 <MX_GPIO_Init>
	MX_SPI2_Init();
 80017de:	f000 f8b7 	bl	8001950 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 80017e2:	f000 f8eb 	bl	80019bc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80017e6:	f000 f885 	bl	80018f4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_StatusTypeDef ret = dp_sens_init();
 80017ea:	f7fe fecf 	bl	800058c <dp_sens_init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <main+0x30>
		Error_Handler();
 80017f8:	f000 f982 	bl	8001b00 <Error_Handler>
	}
	nrf_init();
 80017fc:	f000 f990 	bl	8001b20 <nrf_init>
	Switch_to_Transmitt_mode();
 8001800:	f000 f9d4 	bl	8001bac <Switch_to_Transmitt_mode>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		send_DP_sensor_value_to_gateway();
 8001804:	f000 fb94 	bl	8001f30 <send_DP_sensor_value_to_gateway>
//		HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY();
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8001808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <main+0x50>)
 800180e:	f000 ff04 	bl	800261a <HAL_GPIO_TogglePin>
		HAL_Delay(4000);
 8001812:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001816:	f000 fc59 	bl	80020cc <HAL_Delay>
		send_DP_sensor_value_to_gateway();
 800181a:	e7f3      	b.n	8001804 <main+0x38>
 800181c:	40020800 	.word	0x40020800

08001820 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	2230      	movs	r2, #48	; 0x30
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fdb4 	bl	800539c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <SystemClock_Config+0xcc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <SystemClock_Config+0xcc>)
 800184e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <SystemClock_Config+0xcc>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <SystemClock_Config+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <SystemClock_Config+0xd0>)
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <SystemClock_Config+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001888:	2310      	movs	r3, #16
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188c:	2302      	movs	r3, #2
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001894:	2308      	movs	r3, #8
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001898:	2348      	movs	r3, #72	; 0x48
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189c:	2302      	movs	r3, #2
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 ff95 	bl	80037d8 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x98>
		Error_Handler();
 80018b4:	f000 f924 	bl	8001b00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2102      	movs	r1, #2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 f9f7 	bl	8003cc8 <HAL_RCC_ClockConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0xc4>
		Error_Handler();
 80018e0:	f000 f90e 	bl	8001b00 <Error_Handler>
	}
}
 80018e4:	bf00      	nop
 80018e6:	3750      	adds	r7, #80	; 0x50
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_I2C1_Init+0x50>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <MX_I2C1_Init+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_I2C1_Init+0x50>)
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_I2C1_Init+0x58>)
 8001902:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_I2C1_Init+0x50>)
 8001912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001916:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_I2C1_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_I2C1_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_I2C1_Init+0x50>)
 8001932:	f000 fe8d 	bl	8002650 <HAL_I2C_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800193c:	f000 f8e0 	bl	8001b00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000140 	.word	0x20000140
 8001948:	40005400 	.word	0x40005400
 800194c:	000186a0 	.word	0x000186a0

08001950 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_SPI2_Init+0x64>)
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <MX_SPI2_Init+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_SPI2_Init+0x64>)
 800195c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001960:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_SPI2_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_SPI2_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_SPI2_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_SPI2_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_SPI2_Init+0x64>)
 800197c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001980:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_SPI2_Init+0x64>)
 8001984:	2220      	movs	r2, #32
 8001986:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_SPI2_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_SPI2_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_SPI2_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_SPI2_Init+0x64>)
 800199c:	220a      	movs	r2, #10
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_SPI2_Init+0x64>)
 80019a2:	f002 fb71 	bl	8004088 <HAL_SPI_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80019ac:	f000 f8a8 	bl	8001b00 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000194 	.word	0x20000194
 80019b8:	40003800 	.word	0x40003800

080019bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <MX_USART2_UART_Init+0x50>)
 80019c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_USART2_UART_Init+0x4c>)
 80019f4:	f003 f8f0 	bl	8004bd8 <HAL_UART_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80019fe:	f000 f87f 	bl	8001b00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200001ec 	.word	0x200001ec
 8001a0c:	40004400 	.word	0x40004400

08001a10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_GPIO_Init+0xe4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9c:	4816      	ldr	r0, [pc, #88]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001a9e:	f000 fda3 	bl	80025e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CSN_PIN_Pin | CE_PIN_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001aa8:	4814      	ldr	r0, [pc, #80]	; (8001afc <MX_GPIO_Init+0xec>)
 8001aaa:	f000 fd9d 	bl	80025e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8001aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_GPIO_Init+0xe8>)
 8001ac8:	f000 fc0a 	bl	80022e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : CSN_PIN_Pin CE_PIN_Pin */
	GPIO_InitStruct.Pin = CSN_PIN_Pin | CE_PIN_Pin;
 8001acc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_GPIO_Init+0xec>)
 8001ae6:	f000 fbfb 	bl	80022e0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020000 	.word	0x40020000

08001b00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8001b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0c:	4803      	ldr	r0, [pc, #12]	; (8001b1c <Error_Handler+0x1c>)
 8001b0e:	f000 fd84 	bl	800261a <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001b12:	2032      	movs	r0, #50	; 0x32
 8001b14:	f000 fada 	bl	80020cc <HAL_Delay>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8001b18:	e7f6      	b.n	8001b08 <Error_Handler+0x8>
 8001b1a:	bf00      	nop
 8001b1c:	40020800 	.word	0x40020800

08001b20 <nrf_init>:
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
#define NRF_SPI_PORT hspi2

void nrf_init(void) {
 8001b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b22:	b097      	sub	sp, #92	; 0x5c
 8001b24:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(CE_PIN_GPIO_Port, CSN_PIN_Pin, CE_PIN_Pin, NRF_SPI_PORT);
 8001b26:	4c1c      	ldr	r4, [pc, #112]	; (8001b98 <nrf_init+0x78>)
 8001b28:	4668      	mov	r0, sp
 8001b2a:	1d23      	adds	r3, r4, #4
 8001b2c:	2254      	movs	r2, #84	; 0x54
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f003 fc68 	bl	8005404 <memcpy>
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3e:	4817      	ldr	r0, [pc, #92]	; (8001b9c <nrf_init+0x7c>)
 8001b40:	f7fe feb8 	bl	80008b4 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001b44:	4e16      	ldr	r6, [pc, #88]	; (8001ba0 <nrf_init+0x80>)
 8001b46:	466d      	mov	r5, sp
 8001b48:	f106 0410 	add.w	r4, r6, #16
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	602b      	str	r3, [r5, #0]
 8001b5c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b60:	f7ff fe1c 	bl	800179c <nrf24_DebugUART_Init>
	NRF24_setAutoAck(true);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7ff f871 	bl	8000c4c <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8001b6a:	2020      	movs	r0, #32
 8001b6c:	f7ff f836 	bl	8000bdc <NRF24_setPayloadSize>
	NRF24_stopListening();
 8001b70:	f7fe ff80 	bl	8000a74 <NRF24_stopListening>
	NRF24_openWritingPipe(target_pipe_addr);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <nrf_init+0x84>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe ffd9 	bl	8000b34 <NRF24_openWritingPipe>
	NRF24_setChannel(node_channel_addr);
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <nrf_init+0x88>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f813 	bl	8000bb2 <NRF24_setChannel>
	printRadioSettings();
 8001b8c:	f7ff f9de 	bl	8000f4c <printRadioSettings>
}
 8001b90:	bf00      	nop
 8001b92:	3704      	adds	r7, #4
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b98:	20000194 	.word	0x20000194
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	200001ec 	.word	0x200001ec
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	20000008 	.word	0x20000008

08001bac <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	NRF24_stopListening();
 8001bb0:	f7fe ff60 	bl	8000a74 <NRF24_stopListening>
	NRF24_openWritingPipe(target_pipe_addr);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <Switch_to_Transmitt_mode+0x24>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe ffb9 	bl	8000b34 <NRF24_openWritingPipe>
	NRF24_setChannel(target_channel_addr);
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <Switch_to_Transmitt_mode+0x28>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fff3 	bl	8000bb2 <NRF24_setChannel>
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000010 	.word	0x20000010
 8001bd4:	20000018 	.word	0x20000018

08001bd8 <TRANSMITT_UPDATE_TO_GATEWAY>:
void Switch_to_Receiver_mode(void) {
	NRF24_openReadingPipe(1, node_pipe_addr);
	NRF24_setChannel(node_channel_addr);
	NRF24_startListening();
}
void TRANSMITT_UPDATE_TO_GATEWAY(char my_tx_data[]) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < +10; i++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e024      	b.n	8001c30 <TRANSMITT_UPDATE_TO_GATEWAY+0x58>
		if (!NRF24_write(my_tx_data, 32)) {
 8001be6:	2120      	movs	r1, #32
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7fe ff4f 	bl	8000a8c <NRF24_write>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00d      	beq.n	8001c16 <TRANSMITT_UPDATE_TO_GATEWAY+0x3e>
			NRF24_write(my_tx_data, 32);
 8001bfa:	2120      	movs	r1, #32
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7fe ff45 	bl	8000a8c <NRF24_write>
			HAL_UART_Transmit(&huart2,
 8001c02:	230a      	movs	r3, #10
 8001c04:	2221      	movs	r2, #33	; 0x21
 8001c06:	490e      	ldr	r1, [pc, #56]	; (8001c40 <TRANSMITT_UPDATE_TO_GATEWAY+0x68>)
 8001c08:	480e      	ldr	r0, [pc, #56]	; (8001c44 <TRANSMITT_UPDATE_TO_GATEWAY+0x6c>)
 8001c0a:	f003 f832 	bl	8004c72 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update waiting for ack\n",
					strlen("Transmitt_update waiting for ack\n"), 10);
			HAL_Delay(200);
 8001c0e:	20c8      	movs	r0, #200	; 0xc8
 8001c10:	f000 fa5c 	bl	80020cc <HAL_Delay>
 8001c14:	e009      	b.n	8001c2a <TRANSMITT_UPDATE_TO_GATEWAY+0x52>
		} else {
			HAL_UART_Transmit(&huart2,
 8001c16:	230a      	movs	r3, #10
 8001c18:	222a      	movs	r2, #42	; 0x2a
 8001c1a:	490b      	ldr	r1, [pc, #44]	; (8001c48 <TRANSMITT_UPDATE_TO_GATEWAY+0x70>)
 8001c1c:	4809      	ldr	r0, [pc, #36]	; (8001c44 <TRANSMITT_UPDATE_TO_GATEWAY+0x6c>)
 8001c1e:	f003 f828 	bl	8004c72 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update Transmitted successfully\n",
					strlen("Transmitt_update Transmitted successfully\n"), 10);
			HAL_Delay(100);
 8001c22:	2064      	movs	r0, #100	; 0x64
 8001c24:	f000 fa52 	bl	80020cc <HAL_Delay>
			break;
 8001c28:	e006      	b.n	8001c38 <TRANSMITT_UPDATE_TO_GATEWAY+0x60>
	for (int i = 0; i < +10; i++) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	ddd7      	ble.n	8001be6 <TRANSMITT_UPDATE_TO_GATEWAY+0xe>
		}
	}
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	08006200 	.word	0x08006200
 8001c44:	200001ec 	.word	0x200001ec
 8001c48:	08006224 	.word	0x08006224

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_I2C_MspInit+0x84>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d12b      	bne.n	8001d16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cda:	23c0      	movs	r3, #192	; 0xc0
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cde:	2312      	movs	r3, #18
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cea:	2304      	movs	r3, #4
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <HAL_I2C_MspInit+0x8c>)
 8001cf6:	f000 faf3 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_I2C_MspInit+0x88>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40005400 	.word	0x40005400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400

08001d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_SPI_MspInit+0x84>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12c      	bne.n	8001da8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_SPI_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <HAL_SPI_MspInit+0x88>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_SPI_MspInit+0x88>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_SPI_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <HAL_SPI_MspInit+0x88>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_SPI_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d86:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d98:	2305      	movs	r3, #5
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <HAL_SPI_MspInit+0x8c>)
 8001da4:	f000 fa9c 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40003800 	.word	0x40003800
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020400 	.word	0x40020400

08001dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_UART_MspInit+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12b      	bne.n	8001e36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_UART_MspInit+0x88>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_UART_MspInit+0x88>)
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_UART_MspInit+0x88>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_UART_MspInit+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_UART_MspInit+0x88>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_UART_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e16:	230c      	movs	r3, #12
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e26:	2307      	movs	r3, #7
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <HAL_UART_MspInit+0x8c>)
 8001e32:	f000 fa55 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40004400 	.word	0x40004400
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <NMI_Handler+0x4>

08001e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <MemManage_Handler+0x4>

08001e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e98:	f000 f8f8 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f003 fa6c 	bl	80053ac <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20010000 	.word	0x20010000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	20000230 	.word	0x20000230
 8001f08:	20000380 	.word	0x20000380

08001f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <send_DP_sensor_value_to_gateway>:
 *      Author: sunil
 */

#include "utilities.h"

void send_DP_sensor_value_to_gateway(void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af00      	add	r7, sp, #0
	uint32_t PRESSURE = READ_PRESSURE();
 8001f36:	f7fe fb47 	bl	80005c8 <READ_PRESSURE>
 8001f3a:	6378      	str	r0, [r7, #52]	; 0x34
	char buffer[20];
	sprintf(buffer, "%u", PRESSURE);
 8001f3c:	f107 0320 	add.w	r3, r7, #32
 8001f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f42:	4912      	ldr	r1, [pc, #72]	; (8001f8c <send_DP_sensor_value_to_gateway+0x5c>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fa09 	bl	800535c <siprintf>

	char my_tx_data[32] = "010";
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <send_DP_sensor_value_to_gateway+0x60>)
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]
	my_tx_data[3] = buffer[0];
 8001f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f64:	70fb      	strb	r3, [r7, #3]
	my_tx_data[4] = buffer[1];
 8001f66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f6a:	713b      	strb	r3, [r7, #4]
	my_tx_data[5] = buffer[2];
 8001f6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f70:	717b      	strb	r3, [r7, #5]
	my_tx_data[5] = '\r';
 8001f72:	230d      	movs	r3, #13
 8001f74:	717b      	strb	r3, [r7, #5]
	my_tx_data[5] = '\n';
 8001f76:	230a      	movs	r3, #10
 8001f78:	717b      	strb	r3, [r7, #5]
	TRANSMITT_UPDATE_TO_GATEWAY(my_tx_data); //TRANSMITT MESSAGE TO GATEWAY
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fe2b 	bl	8001bd8 <TRANSMITT_UPDATE_TO_GATEWAY>
}
 8001f82:	bf00      	nop
 8001f84:	3738      	adds	r7, #56	; 0x38
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	08006250 	.word	0x08006250
 8001f90:	00303130 	.word	0x00303130

08001f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f98:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f9a:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb0:	4c0b      	ldr	r4, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fbe:	f7ff ffa5 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f003 f9f9 	bl	80053b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc6:	f7ff fc01 	bl	80017cc <main>
  bx  lr    
 8001fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fd8:	080062b0 	.word	0x080062b0
  ldr r2, =_sbss
 8001fdc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fe0:	20000380 	.word	0x20000380

08001fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_Init+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_Init+0x40>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_Init+0x40>)
 8001ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_Init+0x40>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 f931 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002016:	200f      	movs	r0, #15
 8002018:	f000 f808 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201c:	f7ff fe16 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023c00 	.word	0x40023c00

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x54>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x58>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f93b 	bl	80022c6 <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00e      	b.n	8002078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d80a      	bhi.n	8002076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 f911 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <HAL_InitTick+0x5c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000001c 	.word	0x2000001c
 8002084:	20000024 	.word	0x20000024
 8002088:	20000020 	.word	0x20000020

0800208c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000024 	.word	0x20000024
 80020b0:	20000234 	.word	0x20000234

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000234 	.word	0x20000234

080020cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff ffee 	bl	80020b4 <HAL_GetTick>
 80020d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_Delay+0x44>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020f2:	bf00      	nop
 80020f4:	f7ff ffde 	bl	80020b4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000024 	.word	0x20000024

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff47 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff5c 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffb0 	bl	8002234 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e159      	b.n	80025b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8148 	bne.w	80025aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a2 	beq.w	80025aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_GPIO_Init+0x2ec>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x202>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x1fe>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_GPIO_Init+0x2f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x1fa>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a46      	ldr	r2, [pc, #280]	; (80025dc <HAL_GPIO_Init+0x2fc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x1f6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a45      	ldr	r2, [pc, #276]	; (80025e0 <HAL_GPIO_Init+0x300>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x1f2>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4935      	ldr	r1, [pc, #212]	; (80025cc <HAL_GPIO_Init+0x2ec>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002526:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_GPIO_Init+0x304>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002550:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <HAL_GPIO_Init+0x304>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a4:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <HAL_GPIO_Init+0x304>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f aea2 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800262c:	887a      	ldrh	r2, [r7, #2]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	041a      	lsls	r2, r3, #16
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43d9      	mvns	r1, r3
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	400b      	ands	r3, r1
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e12b      	b.n	80028ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fb10 	bl	8001c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b4:	f001 fcc0 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 80026b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a81      	ldr	r2, [pc, #516]	; (80028c4 <HAL_I2C_Init+0x274>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d807      	bhi.n	80026d4 <HAL_I2C_Init+0x84>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a80      	ldr	r2, [pc, #512]	; (80028c8 <HAL_I2C_Init+0x278>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e006      	b.n	80026e2 <HAL_I2C_Init+0x92>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a7d      	ldr	r2, [pc, #500]	; (80028cc <HAL_I2C_Init+0x27c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0e7      	b.n	80028ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a78      	ldr	r2, [pc, #480]	; (80028d0 <HAL_I2C_Init+0x280>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_I2C_Init+0x274>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d802      	bhi.n	8002724 <HAL_I2C_Init+0xd4>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	e009      	b.n	8002738 <HAL_I2C_Init+0xe8>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a69      	ldr	r2, [pc, #420]	; (80028d4 <HAL_I2C_Init+0x284>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	3301      	adds	r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	495c      	ldr	r1, [pc, #368]	; (80028c4 <HAL_I2C_Init+0x274>)
 8002754:	428b      	cmp	r3, r1
 8002756:	d819      	bhi.n	800278c <HAL_I2C_Init+0x13c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e59      	subs	r1, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fbb1 f3f3 	udiv	r3, r1, r3
 8002766:	1c59      	adds	r1, r3, #1
 8002768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800276c:	400b      	ands	r3, r1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_I2C_Init+0x138>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e59      	subs	r1, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002786:	e051      	b.n	800282c <HAL_I2C_Init+0x1dc>
 8002788:	2304      	movs	r3, #4
 800278a:	e04f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_I2C_Init+0x168>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e012      	b.n	80027de <HAL_I2C_Init+0x18e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Init+0x196>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e022      	b.n	800282c <HAL_I2C_Init+0x1dc>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10e      	bne.n	800280c <HAL_I2C_Init+0x1bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e58      	subs	r0, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	440b      	add	r3, r1
 80027fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002800:	3301      	adds	r3, #1
 8002802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	e00f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1e58      	subs	r0, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	0099      	lsls	r1, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	6809      	ldr	r1, [r1, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800285a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6911      	ldr	r1, [r2, #16]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	430b      	orrs	r3, r1
 800286e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	000186a0 	.word	0x000186a0
 80028c8:	001e847f 	.word	0x001e847f
 80028cc:	003d08ff 	.word	0x003d08ff
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff fbe2 	bl	80020b4 <HAL_GetTick>
 80028f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f040 80e0 	bne.w	8002ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	4970      	ldr	r1, [pc, #448]	; (8002acc <HAL_I2C_Master_Transmit+0x1f4>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fd86 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	e0d3      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x50>
 8002924:	2302      	movs	r3, #2
 8002926:	e0cc      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2221      	movs	r2, #33	; 0x21
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2210      	movs	r2, #16
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fbf0 	bl	800317c <I2C_MasterRequestWrite>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e08d      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029bc:	e066      	b.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fe00 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11b      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	6a39      	ldr	r1, [r7, #32]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fdf0 	bl	800364a <I2C_WaitOnBTFFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e01a      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d194      	bne.n	80029be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff fae4 	bl	80020b4 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 820b 	bne.w	8002f12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2319      	movs	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	497c      	ldr	r1, [pc, #496]	; (8002cf8 <HAL_I2C_Master_Receive+0x224>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fc88 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
 8002b14:	e1fe      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2C_Master_Receive+0x50>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e1f7      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d007      	beq.n	8002b4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2222      	movs	r2, #34	; 0x22
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2210      	movs	r2, #16
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <HAL_I2C_Master_Receive+0x228>)
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fb74 	bl	8003280 <I2C_MasterRequestRead>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1b8      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d113      	bne.n	8002bd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	623b      	str	r3, [r7, #32]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e18c      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d11b      	bne.n	8002c12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e16c      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d11b      	bne.n	8002c52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	e14c      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c78:	e138      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	f200 80f1 	bhi.w	8002e66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d123      	bne.n	8002cd4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fd1b 	bl	80036cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e139      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd2:	e10b      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d14e      	bne.n	8002d7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4906      	ldr	r1, [pc, #24]	; (8002d00 <HAL_I2C_Master_Receive+0x22c>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fb98 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e10e      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
 8002cf6:	bf00      	nop
 8002cf8:	00100002 	.word	0x00100002
 8002cfc:	ffff0000 	.word	0xffff0000
 8002d00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d78:	e0b8      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	2200      	movs	r2, #0
 8002d82:	4966      	ldr	r1, [pc, #408]	; (8002f1c <HAL_I2C_Master_Receive+0x448>)
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fb49 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0bf      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	2200      	movs	r2, #0
 8002dde:	494f      	ldr	r1, [pc, #316]	; (8002f1c <HAL_I2C_Master_Receive+0x448>)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fb1b 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e091      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e64:	e042      	b.n	8002eec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fc2e 	bl	80036cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e04c      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d118      	bne.n	8002eec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f aec2 	bne.w	8002c7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	00010004 	.word	0x00010004

08002f20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f30:	f7ff f8c0 	bl	80020b4 <HAL_GetTick>
 8002f34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	f040 8111 	bne.w	800316a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4988      	ldr	r1, [pc, #544]	; (8003174 <HAL_I2C_IsDeviceReady+0x254>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa62 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e104      	b.n	800316c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2C_IsDeviceReady+0x50>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0fd      	b.n	800316c <HAL_I2C_IsDeviceReady+0x24c>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d007      	beq.n	8002f96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2224      	movs	r2, #36	; 0x24
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a70      	ldr	r2, [pc, #448]	; (8003178 <HAL_I2C_IsDeviceReady+0x258>)
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa20 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff0:	d103      	bne.n	8002ffa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0b6      	b.n	800316c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ffe:	897b      	ldrh	r3, [r7, #10]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800300c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800300e:	f7ff f851 	bl	80020b4 <HAL_GetTick>
 8003012:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003042:	e025      	b.n	8003090 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7ff f836 	bl	80020b4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <HAL_I2C_IsDeviceReady+0x13a>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	22a0      	movs	r2, #160	; 0xa0
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2ba0      	cmp	r3, #160	; 0xa0
 800309a:	d005      	beq.n	80030a8 <HAL_I2C_IsDeviceReady+0x188>
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_I2C_IsDeviceReady+0x188>
 80030a2:	7dbb      	ldrb	r3, [r7, #22]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0cd      	beq.n	8003044 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d129      	bne.n	8003112 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2319      	movs	r3, #25
 80030ea:	2201      	movs	r2, #1
 80030ec:	4921      	ldr	r1, [pc, #132]	; (8003174 <HAL_I2C_IsDeviceReady+0x254>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f994 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e036      	b.n	800316c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e02c      	b.n	800316c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2319      	movs	r3, #25
 8003132:	2201      	movs	r2, #1
 8003134:	490f      	ldr	r1, [pc, #60]	; (8003174 <HAL_I2C_IsDeviceReady+0x254>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f970 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e012      	b.n	800316c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	3301      	adds	r3, #1
 800314a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	f4ff af32 	bcc.w	8002fba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	00100002 	.word	0x00100002
 8003178:	ffff0000 	.word	0xffff0000

0800317c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d006      	beq.n	80031a6 <I2C_MasterRequestWrite+0x2a>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d003      	beq.n	80031a6 <I2C_MasterRequestWrite+0x2a>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031a4:	d108      	bne.n	80031b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e00b      	b.n	80031d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	2b12      	cmp	r3, #18
 80031be:	d107      	bne.n	80031d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f91d 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f6:	d103      	bne.n	8003200 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e035      	b.n	8003270 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800320c:	d108      	bne.n	8003220 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800321c:	611a      	str	r2, [r3, #16]
 800321e:	e01b      	b.n	8003258 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003220:	897b      	ldrh	r3, [r7, #10]
 8003222:	11db      	asrs	r3, r3, #7
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0306 	and.w	r3, r3, #6
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f063 030f 	orn	r3, r3, #15
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	490e      	ldr	r1, [pc, #56]	; (8003278 <I2C_MasterRequestWrite+0xfc>)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f943 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e010      	b.n	8003270 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4907      	ldr	r1, [pc, #28]	; (800327c <I2C_MasterRequestWrite+0x100>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f933 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	00010008 	.word	0x00010008
 800327c:	00010002 	.word	0x00010002

08003280 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d006      	beq.n	80032ba <I2C_MasterRequestRead+0x3a>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d003      	beq.n	80032ba <I2C_MasterRequestRead+0x3a>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b8:	d108      	bne.n	80032cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e00b      	b.n	80032e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b11      	cmp	r3, #17
 80032d2:	d107      	bne.n	80032e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f893 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d103      	bne.n	8003314 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e079      	b.n	800340c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003320:	d108      	bne.n	8003334 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	e05f      	b.n	80033f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003334:	897b      	ldrh	r3, [r7, #10]
 8003336:	11db      	asrs	r3, r3, #7
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 0306 	and.w	r3, r3, #6
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f063 030f 	orn	r3, r3, #15
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4930      	ldr	r1, [pc, #192]	; (8003414 <I2C_MasterRequestRead+0x194>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8b9 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e054      	b.n	800340c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4929      	ldr	r1, [pc, #164]	; (8003418 <I2C_MasterRequestRead+0x198>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f8a9 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e044      	b.n	800340c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f831 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ce:	d103      	bne.n	80033d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e017      	b.n	800340c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033dc:	897b      	ldrh	r3, [r7, #10]
 80033de:	11db      	asrs	r3, r3, #7
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 0306 	and.w	r3, r3, #6
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f063 030e 	orn	r3, r3, #14
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <I2C_MasterRequestRead+0x198>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f865 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	00010008 	.word	0x00010008
 8003418:	00010002 	.word	0x00010002

0800341c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	e025      	b.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d021      	beq.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe fe3d 	bl	80020b4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e023      	b.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10d      	bne.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4013      	ands	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	e00c      	b.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d0b6      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d8:	e051      	b.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e8:	d123      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0204 	orr.w	r2, r3, #4
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e046      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d021      	beq.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fdbb 	bl	80020b4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d116      	bne.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e020      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10c      	bne.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e00b      	b.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d18d      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d4:	e02d      	b.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8ce 	bl	8003778 <I2C_IsAcknowledgeFailed>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e02d      	b.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d021      	beq.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fe fd61 	bl	80020b4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d116      	bne.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d1ca      	bne.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003656:	e02d      	b.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f88d 	bl	8003778 <I2C_IsAcknowledgeFailed>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e02d      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d021      	beq.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003670:	f7fe fd20 	bl	80020b4 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d302      	bcc.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e007      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d1ca      	bne.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036d8:	e042      	b.n	8003760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d119      	bne.n	800371c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0210 	mvn.w	r2, #16
 80036f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e029      	b.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371c:	f7fe fcca 	bl	80020b4 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	429a      	cmp	r2, r3
 800372a:	d302      	bcc.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e007      	b.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d1b5      	bne.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378e:	d11b      	bne.n	80037c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003798:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e267      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d075      	beq.n	80038e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f6:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00c      	beq.n	800381c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003802:	4b85      	ldr	r3, [pc, #532]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380a:	2b08      	cmp	r3, #8
 800380c:	d112      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380e:	4b82      	ldr	r3, [pc, #520]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381a:	d10b      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	4b7e      	ldr	r3, [pc, #504]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05b      	beq.n	80038e0 <HAL_RCC_OscConfig+0x108>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d157      	bne.n	80038e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e242      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x74>
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x98>
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6f      	ldr	r2, [pc, #444]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b6d      	ldr	r3, [pc, #436]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6c      	ldr	r2, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 8003870:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a65      	ldr	r2, [pc, #404]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fc10 	bl	80020b4 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003898:	f7fe fc0c 	bl	80020b4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e207      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xc0>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fbfc 	bl	80020b4 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fbf8 	bl	80020b4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1f3      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	4b51      	ldr	r3, [pc, #324]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0xe8>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d063      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ee:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b44      	ldr	r3, [pc, #272]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e1c7      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e03a      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_OscConfig+0x244>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fe fbb1 	bl	80020b4 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003956:	f7fe fbad 	bl	80020b4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1a8      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4925      	ldr	r1, [pc, #148]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x244>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe fb90 	bl	80020b4 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7fe fb8c 	bl	80020b4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e187      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d036      	beq.n	8003a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_RCC_OscConfig+0x248>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fe fb70 	bl	80020b4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fe fb6c 	bl	80020b4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e167      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x200>
 80039f6:	e01b      	b.n	8003a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_OscConfig+0x248>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7fe fb59 	bl	80020b4 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	e00e      	b.n	8003a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fe fb55 	bl	80020b4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d907      	bls.n	8003a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e150      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ea      	bne.n	8003a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8097 	beq.w	8003b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a42:	4b81      	ldr	r3, [pc, #516]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	4b7d      	ldr	r3, [pc, #500]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a7c      	ldr	r2, [pc, #496]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	4b7a      	ldr	r3, [pc, #488]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b77      	ldr	r3, [pc, #476]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d118      	bne.n	8003aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b74      	ldr	r3, [pc, #464]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a73      	ldr	r2, [pc, #460]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fe fb15 	bl	80020b4 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fe fb11 	bl	80020b4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e10c      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2ea>
 8003ab4:	4b64      	ldr	r3, [pc, #400]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a63      	ldr	r2, [pc, #396]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	e01c      	b.n	8003afc <HAL_RCC_OscConfig+0x324>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x30c>
 8003aca:	4b5f      	ldr	r3, [pc, #380]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a5e      	ldr	r2, [pc, #376]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a5b      	ldr	r2, [pc, #364]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0x324>
 8003ae4:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	4b55      	ldr	r3, [pc, #340]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a54      	ldr	r2, [pc, #336]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 0304 	bic.w	r3, r3, #4
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe fad6 	bl	80020b4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fad2 	bl	80020b4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0cb      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ee      	beq.n	8003b0c <HAL_RCC_OscConfig+0x334>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b30:	f7fe fac0 	bl	80020b4 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fe fabc 	bl	80020b4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0b5      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ee      	bne.n	8003b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b60:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80a1 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d05c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d141      	bne.n	8003c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe fa90 	bl	80020b4 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fe fa8c 	bl	80020b4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e087      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	019b      	lsls	r3, r3, #6
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	491b      	ldr	r1, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe fa65 	bl	80020b4 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe fa61 	bl	80020b4 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e05c      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x416>
 8003c0c:	e054      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fa4e 	bl	80020b4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fe fa4a 	bl	80020b4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e045      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x444>
 8003c3a:	e03d      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e038      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCC_OscConfig+0x4ec>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d121      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d11a      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d111      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0cc      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d90c      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0b8      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d1c:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d34:	4b53      	ldr	r3, [pc, #332]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a52      	ldr	r2, [pc, #328]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d40:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	494d      	ldr	r1, [pc, #308]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d044      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d119      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e07f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e06f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e067      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4934      	ldr	r1, [pc, #208]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fe f97c 	bl	80020b4 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe f978 	bl	80020b4 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e04f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d20c      	bcs.n	8003e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e032      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4916      	ldr	r1, [pc, #88]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	490e      	ldr	r1, [pc, #56]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e4e:	f000 f821 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	490a      	ldr	r1, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	5ccb      	ldrb	r3, [r1, r3]
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe f8dc 	bl	800202c <HAL_InitTick>

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023c00 	.word	0x40023c00
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08006254 	.word	0x08006254
 8003e8c:	2000001c 	.word	0x2000001c
 8003e90:	20000020 	.word	0x20000020

08003e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e98:	b090      	sub	sp, #64	; 0x40
 8003e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	f200 80a1 	bhi.w	8004000 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0x3a>
 8003ec6:	e09b      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ec8:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ecc:	e09b      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ece:	4b53      	ldr	r3, [pc, #332]	; (800401c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ed0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ed2:	e098      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ed4:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ede:	4b4d      	ldr	r3, [pc, #308]	; (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d028      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eea:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	099b      	lsrs	r3, r3, #6
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003efc:	2100      	movs	r1, #0
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f00:	fb03 f201 	mul.w	r2, r3, r1
 8003f04:	2300      	movs	r3, #0
 8003f06:	fb00 f303 	mul.w	r3, r0, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a43      	ldr	r2, [pc, #268]	; (800401c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f14:	460a      	mov	r2, r1
 8003f16:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1a:	4413      	add	r3, r2
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	2200      	movs	r2, #0
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	61fa      	str	r2, [r7, #28]
 8003f26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f2e:	f7fc f9af 	bl	8000290 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4613      	mov	r3, r2
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3a:	e053      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3c:	4b35      	ldr	r3, [pc, #212]	; (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	2200      	movs	r2, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	617a      	str	r2, [r7, #20]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f4e:	f04f 0b00 	mov.w	fp, #0
 8003f52:	4652      	mov	r2, sl
 8003f54:	465b      	mov	r3, fp
 8003f56:	f04f 0000 	mov.w	r0, #0
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	0159      	lsls	r1, r3, #5
 8003f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f64:	0150      	lsls	r0, r2, #5
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f6e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f86:	ebb2 0408 	subs.w	r4, r2, r8
 8003f8a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	00eb      	lsls	r3, r5, #3
 8003f98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9c:	00e2      	lsls	r2, r4, #3
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	461d      	mov	r5, r3
 8003fa2:	eb14 030a 	adds.w	r3, r4, sl
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	eb45 030b 	adc.w	r3, r5, fp
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	028b      	lsls	r3, r1, #10
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	028a      	lsls	r2, r1, #10
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	2200      	movs	r2, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	60fa      	str	r2, [r7, #12]
 8003fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fd8:	f7fc f95a 	bl	8000290 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetSysClockFreq+0x184>)
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004008:	4618      	mov	r0, r3
 800400a:	3740      	adds	r7, #64	; 0x40
 800400c:	46bd      	mov	sp, r7
 800400e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800
 8004018:	00f42400 	.word	0x00f42400
 800401c:	017d7840 	.word	0x017d7840

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_GetHCLKFreq+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000001c 	.word	0x2000001c

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff0 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	08006264 	.word	0x08006264

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff ffdc 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0b5b      	lsrs	r3, r3, #13
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	08006264 	.word	0x08006264

08004088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07b      	b.n	8004192 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040aa:	d009      	beq.n	80040c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	61da      	str	r2, [r3, #28]
 80040b2:	e005      	b.n	80040c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fe26 	bl	8001d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	ea42 0103 	orr.w	r1, r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	f003 0104 	and.w	r1, r3, #4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0210 	and.w	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_SPI_Transmit+0x22>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e126      	b.n	800440a <HAL_SPI_Transmit+0x270>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c4:	f7fd ff76 	bl	80020b4 <HAL_GetTick>
 80041c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041de:	e10b      	b.n	80043f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_SPI_Transmit+0x52>
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041f0:	e102      	b.n	80043f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004238:	d10f      	bne.n	800425a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d007      	beq.n	8004278 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004280:	d14b      	bne.n	800431a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Transmit+0xf6>
 800428a:	8afb      	ldrh	r3, [r7, #22]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d13e      	bne.n	800430e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042b4:	e02b      	b.n	800430e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d112      	bne.n	80042ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80042e8:	e011      	b.n	800430e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ea:	f7fd fee3 	bl	80020b4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d803      	bhi.n	8004302 <HAL_SPI_Transmit+0x168>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d102      	bne.n	8004308 <HAL_SPI_Transmit+0x16e>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800430c:	e074      	b.n	80043f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ce      	bne.n	80042b6 <HAL_SPI_Transmit+0x11c>
 8004318:	e04c      	b.n	80043b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_SPI_Transmit+0x18e>
 8004322:	8afb      	ldrh	r3, [r7, #22]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d140      	bne.n	80043aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800434e:	e02c      	b.n	80043aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d113      	bne.n	8004386 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	86da      	strh	r2, [r3, #54]	; 0x36
 8004384:	e011      	b.n	80043aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004386:	f7fd fe95 	bl	80020b4 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d803      	bhi.n	800439e <HAL_SPI_Transmit+0x204>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d102      	bne.n	80043a4 <HAL_SPI_Transmit+0x20a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043a8:	e026      	b.n	80043f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1cd      	bne.n	8004350 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fbcb 	bl	8004b54 <SPI_EndRxTxTransaction>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e000      	b.n	80043f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80043f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004408:	7ffb      	ldrb	r3, [r7, #31]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b088      	sub	sp, #32
 8004416:	af02      	add	r7, sp, #8
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442e:	d112      	bne.n	8004456 <HAL_SPI_Receive+0x44>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10e      	bne.n	8004456 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2204      	movs	r2, #4
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f8f1 	bl	8004634 <HAL_SPI_TransmitReceive>
 8004452:	4603      	mov	r3, r0
 8004454:	e0ea      	b.n	800462c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_SPI_Receive+0x52>
 8004460:	2302      	movs	r3, #2
 8004462:	e0e3      	b.n	800462c <HAL_SPI_Receive+0x21a>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800446c:	f7fd fe22 	bl	80020b4 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d002      	beq.n	8004484 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800447e:	2302      	movs	r3, #2
 8004480:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004482:	e0ca      	b.n	800461a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_SPI_Receive+0x7e>
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004494:	e0c1      	b.n	800461a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2204      	movs	r2, #4
 800449a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d10f      	bne.n	80044fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d007      	beq.n	800451c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d162      	bne.n	80045ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004524:	e02e      	b.n	8004584 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d115      	bne.n	8004560 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f103 020c 	add.w	r2, r3, #12
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455e:	e011      	b.n	8004584 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004560:	f7fd fda8 	bl	80020b4 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d803      	bhi.n	8004578 <HAL_SPI_Receive+0x166>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d102      	bne.n	800457e <HAL_SPI_Receive+0x16c>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004582:	e04a      	b.n	800461a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1cb      	bne.n	8004526 <HAL_SPI_Receive+0x114>
 800458e:	e031      	b.n	80045f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d113      	bne.n	80045c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	b292      	uxth	r2, r2
 80045aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045c4:	e011      	b.n	80045ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c6:	f7fd fd75 	bl	80020b4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d803      	bhi.n	80045de <HAL_SPI_Receive+0x1cc>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d102      	bne.n	80045e4 <HAL_SPI_Receive+0x1d2>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045e8:	e017      	b.n	800461a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1cd      	bne.n	8004590 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fa45 	bl	8004a88 <SPI_EndRxTransaction>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
 8004616:	e000      	b.n	800461a <HAL_SPI_Receive+0x208>
  }

error :
 8004618:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800462a:	7dfb      	ldrb	r3, [r7, #23]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	; 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004642:	2301      	movs	r3, #1
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_SPI_TransmitReceive+0x26>
 8004656:	2302      	movs	r3, #2
 8004658:	e18a      	b.n	8004970 <HAL_SPI_TransmitReceive+0x33c>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004662:	f7fd fd27 	bl	80020b4 <HAL_GetTick>
 8004666:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004678:	887b      	ldrh	r3, [r7, #2]
 800467a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800467c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004680:	2b01      	cmp	r3, #1
 8004682:	d00f      	beq.n	80046a4 <HAL_SPI_TransmitReceive+0x70>
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800468a:	d107      	bne.n	800469c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d103      	bne.n	800469c <HAL_SPI_TransmitReceive+0x68>
 8004694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004698:	2b04      	cmp	r3, #4
 800469a:	d003      	beq.n	80046a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800469c:	2302      	movs	r3, #2
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046a2:	e15b      	b.n	800495c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x82>
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046bc:	e14e      	b.n	800495c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d003      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2205      	movs	r2, #5
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	887a      	ldrh	r2, [r7, #2]
 80046e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	887a      	ldrh	r2, [r7, #2]
 80046fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d007      	beq.n	8004726 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472e:	d178      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_SPI_TransmitReceive+0x10a>
 8004738:	8b7b      	ldrh	r3, [r7, #26]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d166      	bne.n	800480c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	881a      	ldrh	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	1c9a      	adds	r2, r3, #2
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004762:	e053      	b.n	800480c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d11b      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x176>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d016      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x176>
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d113      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	881a      	ldrh	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d119      	bne.n	80047ec <HAL_SPI_TransmitReceive+0x1b8>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d014      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	b292      	uxth	r2, r2
 80047ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	1c9a      	adds	r2, r3, #2
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047e8:	2301      	movs	r3, #1
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047ec:	f7fd fc62 	bl	80020b4 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d807      	bhi.n	800480c <HAL_SPI_TransmitReceive+0x1d8>
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d003      	beq.n	800480c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800480a:	e0a7      	b.n	800495c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1a6      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x130>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1a1      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x130>
 8004820:	e07c      	b.n	800491c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_SPI_TransmitReceive+0x1fc>
 800482a:	8b7b      	ldrh	r3, [r7, #26]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d16b      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004856:	e057      	b.n	8004908 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d11c      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x26c>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d017      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x26c>
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d114      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d119      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x2ae>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048de:	2301      	movs	r3, #1
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048e2:	f7fd fbe7 	bl	80020b4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d803      	bhi.n	80048fa <HAL_SPI_TransmitReceive+0x2c6>
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d102      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x2cc>
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004906:	e029      	b.n	800495c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1a2      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x224>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d19d      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f917 	bl	8004b54 <SPI_EndRxTxTransaction>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d006      	beq.n	800493a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004938:	e010      	b.n	800495c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	e000      	b.n	800495c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800495a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800496c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004970:	4618      	mov	r0, r3
 8004972:	3730      	adds	r7, #48	; 0x30
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004988:	f7fd fb94 	bl	80020b4 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004998:	f7fd fb8c 	bl	80020b4 <HAL_GetTick>
 800499c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800499e:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	015b      	lsls	r3, r3, #5
 80049a4:	0d1b      	lsrs	r3, r3, #20
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ae:	e054      	b.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d050      	beq.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b8:	f7fd fb7c 	bl	80020b4 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d902      	bls.n	80049ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d13d      	bne.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e6:	d111      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f0:	d004      	beq.n	80049fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fa:	d107      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a14:	d10f      	bne.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e017      	b.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d19b      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000001c 	.word	0x2000001c

08004a88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9c:	d111      	bne.n	8004ac2 <SPI_EndRxTransaction+0x3a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa6:	d004      	beq.n	8004ab2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d107      	bne.n	8004ac2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d12a      	bne.n	8004b22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad4:	d012      	beq.n	8004afc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2180      	movs	r1, #128	; 0x80
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff ff49 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d02d      	beq.n	8004b48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e026      	b.n	8004b4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2200      	movs	r2, #0
 8004b04:	2101      	movs	r1, #1
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff ff36 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01a      	beq.n	8004b48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	f043 0220 	orr.w	r2, r3, #32
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e013      	b.n	8004b4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff ff23 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e000      	b.n	8004b4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <SPI_EndRxTxTransaction+0x7c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <SPI_EndRxTxTransaction+0x80>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0d5b      	lsrs	r3, r3, #21
 8004b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7e:	d112      	bne.n	8004ba6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	2180      	movs	r1, #128	; 0x80
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fef4 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f043 0220 	orr.w	r2, r3, #32
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e00f      	b.n	8004bc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d0f2      	beq.n	8004ba6 <SPI_EndRxTxTransaction+0x52>
 8004bc0:	e000      	b.n	8004bc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004bc2:	bf00      	nop
  }

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000001c 	.word	0x2000001c
 8004bd4:	165e9f81 	.word	0x165e9f81

08004bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e03f      	b.n	8004c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd f8dc 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	; 0x24
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f929 	bl	8004e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b08a      	sub	sp, #40	; 0x28
 8004c76:	af02      	add	r7, sp, #8
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d17c      	bne.n	8004d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_UART_Transmit+0x2c>
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e075      	b.n	8004d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_UART_Transmit+0x3e>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e06e      	b.n	8004d8e <HAL_UART_Transmit+0x11c>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2221      	movs	r2, #33	; 0x21
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc6:	f7fd f9f5 	bl	80020b4 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	d108      	bne.n	8004cf4 <HAL_UART_Transmit+0x82>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e003      	b.n	8004cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d04:	e02a      	b.n	8004d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2180      	movs	r1, #128	; 0x80
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f840 	bl	8004d96 <UART_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e036      	b.n	8004d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3302      	adds	r3, #2
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e007      	b.n	8004d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1cf      	bne.n	8004d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2140      	movs	r1, #64	; 0x40
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f810 	bl	8004d96 <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e006      	b.n	8004d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e000      	b.n	8004d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d8c:	2302      	movs	r3, #2
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b090      	sub	sp, #64	; 0x40
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	4613      	mov	r3, r2
 8004da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da6:	e050      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d04c      	beq.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004db6:	f7fd f97d 	bl	80020b4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d241      	bcs.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004de6:	637a      	str	r2, [r7, #52]	; 0x34
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1a:	623a      	str	r2, [r7, #32]
 8004e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	69f9      	ldr	r1, [r7, #28]
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e00f      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d09f      	beq.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3740      	adds	r7, #64	; 0x40
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e78:	b0c0      	sub	sp, #256	; 0x100
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	68d9      	ldr	r1, [r3, #12]
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	ea40 0301 	orr.w	r3, r0, r1
 8004e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ecc:	f021 010c 	bic.w	r1, r1, #12
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eda:	430b      	orrs	r3, r1
 8004edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	6999      	ldr	r1, [r3, #24]
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	ea40 0301 	orr.w	r3, r0, r1
 8004efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b8f      	ldr	r3, [pc, #572]	; (8005140 <UART_SetConfig+0x2cc>)
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d005      	beq.n	8004f14 <UART_SetConfig+0xa0>
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b8d      	ldr	r3, [pc, #564]	; (8005144 <UART_SetConfig+0x2d0>)
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d104      	bne.n	8004f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7ff f8a4 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8004f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f1c:	e003      	b.n	8004f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f1e:	f7ff f88b 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8004f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	f040 810c 	bne.w	800514c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f46:	4622      	mov	r2, r4
 8004f48:	462b      	mov	r3, r5
 8004f4a:	1891      	adds	r1, r2, r2
 8004f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f4e:	415b      	adcs	r3, r3
 8004f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f56:	4621      	mov	r1, r4
 8004f58:	eb12 0801 	adds.w	r8, r2, r1
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	eb43 0901 	adc.w	r9, r3, r1
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f76:	4690      	mov	r8, r2
 8004f78:	4699      	mov	r9, r3
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	eb18 0303 	adds.w	r3, r8, r3
 8004f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f84:	462b      	mov	r3, r5
 8004f86:	eb49 0303 	adc.w	r3, r9, r3
 8004f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	18db      	adds	r3, r3, r3
 8004fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa8:	4613      	mov	r3, r2
 8004faa:	eb42 0303 	adc.w	r3, r2, r3
 8004fae:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fb8:	f7fb f96a 	bl	8000290 <__aeabi_uldivmod>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <UART_SetConfig+0x2d4>)
 8004fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	011c      	lsls	r4, r3, #4
 8004fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fec:	4641      	mov	r1, r8
 8004fee:	eb12 0a01 	adds.w	sl, r2, r1
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800500c:	4692      	mov	sl, r2
 800500e:	469b      	mov	fp, r3
 8005010:	4643      	mov	r3, r8
 8005012:	eb1a 0303 	adds.w	r3, sl, r3
 8005016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800501a:	464b      	mov	r3, r9
 800501c:	eb4b 0303 	adc.w	r3, fp, r3
 8005020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005038:	460b      	mov	r3, r1
 800503a:	18db      	adds	r3, r3, r3
 800503c:	643b      	str	r3, [r7, #64]	; 0x40
 800503e:	4613      	mov	r3, r2
 8005040:	eb42 0303 	adc.w	r3, r2, r3
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
 8005046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800504a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800504e:	f7fb f91f 	bl	8000290 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4611      	mov	r1, r2
 8005058:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <UART_SetConfig+0x2d4>)
 800505a:	fba3 2301 	umull	r2, r3, r3, r1
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2264      	movs	r2, #100	; 0x64
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	1acb      	subs	r3, r1, r3
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <UART_SetConfig+0x2d4>)
 8005070:	fba3 2302 	umull	r2, r3, r3, r2
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800507c:	441c      	add	r4, r3
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800508c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	1891      	adds	r1, r2, r2
 8005096:	63b9      	str	r1, [r7, #56]	; 0x38
 8005098:	415b      	adcs	r3, r3
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050a0:	4641      	mov	r1, r8
 80050a2:	1851      	adds	r1, r2, r1
 80050a4:	6339      	str	r1, [r7, #48]	; 0x30
 80050a6:	4649      	mov	r1, r9
 80050a8:	414b      	adcs	r3, r1
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050b8:	4659      	mov	r1, fp
 80050ba:	00cb      	lsls	r3, r1, #3
 80050bc:	4651      	mov	r1, sl
 80050be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050c2:	4651      	mov	r1, sl
 80050c4:	00ca      	lsls	r2, r1, #3
 80050c6:	4610      	mov	r0, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	4642      	mov	r2, r8
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050d4:	464b      	mov	r3, r9
 80050d6:	460a      	mov	r2, r1
 80050d8:	eb42 0303 	adc.w	r3, r2, r3
 80050dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050f4:	460b      	mov	r3, r1
 80050f6:	18db      	adds	r3, r3, r3
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fa:	4613      	mov	r3, r2
 80050fc:	eb42 0303 	adc.w	r3, r2, r3
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800510a:	f7fb f8c1 	bl	8000290 <__aeabi_uldivmod>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <UART_SetConfig+0x2d4>)
 8005114:	fba3 1302 	umull	r1, r3, r3, r2
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	2164      	movs	r1, #100	; 0x64
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	3332      	adds	r3, #50	; 0x32
 8005126:	4a08      	ldr	r2, [pc, #32]	; (8005148 <UART_SetConfig+0x2d4>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	f003 0207 	and.w	r2, r3, #7
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4422      	add	r2, r4
 800513a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800513c:	e106      	b.n	800534c <UART_SetConfig+0x4d8>
 800513e:	bf00      	nop
 8005140:	40011000 	.word	0x40011000
 8005144:	40011400 	.word	0x40011400
 8005148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800514c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005150:	2200      	movs	r2, #0
 8005152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800515a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800515e:	4642      	mov	r2, r8
 8005160:	464b      	mov	r3, r9
 8005162:	1891      	adds	r1, r2, r2
 8005164:	6239      	str	r1, [r7, #32]
 8005166:	415b      	adcs	r3, r3
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800516e:	4641      	mov	r1, r8
 8005170:	1854      	adds	r4, r2, r1
 8005172:	4649      	mov	r1, r9
 8005174:	eb43 0501 	adc.w	r5, r3, r1
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	00eb      	lsls	r3, r5, #3
 8005182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005186:	00e2      	lsls	r2, r4, #3
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	4643      	mov	r3, r8
 800518e:	18e3      	adds	r3, r4, r3
 8005190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005194:	464b      	mov	r3, r9
 8005196:	eb45 0303 	adc.w	r3, r5, r3
 800519a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051ba:	4629      	mov	r1, r5
 80051bc:	008b      	lsls	r3, r1, #2
 80051be:	4621      	mov	r1, r4
 80051c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c4:	4621      	mov	r1, r4
 80051c6:	008a      	lsls	r2, r1, #2
 80051c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051cc:	f7fb f860 	bl	8000290 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4b60      	ldr	r3, [pc, #384]	; (8005358 <UART_SetConfig+0x4e4>)
 80051d6:	fba3 2302 	umull	r2, r3, r3, r2
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	011c      	lsls	r4, r3, #4
 80051de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051f0:	4642      	mov	r2, r8
 80051f2:	464b      	mov	r3, r9
 80051f4:	1891      	adds	r1, r2, r2
 80051f6:	61b9      	str	r1, [r7, #24]
 80051f8:	415b      	adcs	r3, r3
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005200:	4641      	mov	r1, r8
 8005202:	1851      	adds	r1, r2, r1
 8005204:	6139      	str	r1, [r7, #16]
 8005206:	4649      	mov	r1, r9
 8005208:	414b      	adcs	r3, r1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005218:	4659      	mov	r1, fp
 800521a:	00cb      	lsls	r3, r1, #3
 800521c:	4651      	mov	r1, sl
 800521e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005222:	4651      	mov	r1, sl
 8005224:	00ca      	lsls	r2, r1, #3
 8005226:	4610      	mov	r0, r2
 8005228:	4619      	mov	r1, r3
 800522a:	4603      	mov	r3, r0
 800522c:	4642      	mov	r2, r8
 800522e:	189b      	adds	r3, r3, r2
 8005230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005234:	464b      	mov	r3, r9
 8005236:	460a      	mov	r2, r1
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	67bb      	str	r3, [r7, #120]	; 0x78
 800524a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005258:	4649      	mov	r1, r9
 800525a:	008b      	lsls	r3, r1, #2
 800525c:	4641      	mov	r1, r8
 800525e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005262:	4641      	mov	r1, r8
 8005264:	008a      	lsls	r2, r1, #2
 8005266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800526a:	f7fb f811 	bl	8000290 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4611      	mov	r1, r2
 8005274:	4b38      	ldr	r3, [pc, #224]	; (8005358 <UART_SetConfig+0x4e4>)
 8005276:	fba3 2301 	umull	r2, r3, r3, r1
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2264      	movs	r2, #100	; 0x64
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	1acb      	subs	r3, r1, r3
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	3332      	adds	r3, #50	; 0x32
 8005288:	4a33      	ldr	r2, [pc, #204]	; (8005358 <UART_SetConfig+0x4e4>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005294:	441c      	add	r4, r3
 8005296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529a:	2200      	movs	r2, #0
 800529c:	673b      	str	r3, [r7, #112]	; 0x70
 800529e:	677a      	str	r2, [r7, #116]	; 0x74
 80052a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	415b      	adcs	r3, r3
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b4:	4641      	mov	r1, r8
 80052b6:	1851      	adds	r1, r2, r1
 80052b8:	6039      	str	r1, [r7, #0]
 80052ba:	4649      	mov	r1, r9
 80052bc:	414b      	adcs	r3, r1
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052cc:	4659      	mov	r1, fp
 80052ce:	00cb      	lsls	r3, r1, #3
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d6:	4651      	mov	r1, sl
 80052d8:	00ca      	lsls	r2, r1, #3
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	4642      	mov	r2, r8
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e6:	464b      	mov	r3, r9
 80052e8:	460a      	mov	r2, r1
 80052ea:	eb42 0303 	adc.w	r3, r2, r3
 80052ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	663b      	str	r3, [r7, #96]	; 0x60
 80052fa:	667a      	str	r2, [r7, #100]	; 0x64
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005308:	4649      	mov	r1, r9
 800530a:	008b      	lsls	r3, r1, #2
 800530c:	4641      	mov	r1, r8
 800530e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005312:	4641      	mov	r1, r8
 8005314:	008a      	lsls	r2, r1, #2
 8005316:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800531a:	f7fa ffb9 	bl	8000290 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <UART_SetConfig+0x4e4>)
 8005324:	fba3 1302 	umull	r1, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2164      	movs	r1, #100	; 0x64
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	3332      	adds	r3, #50	; 0x32
 8005336:	4a08      	ldr	r2, [pc, #32]	; (8005358 <UART_SetConfig+0x4e4>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 020f 	and.w	r2, r3, #15
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4422      	add	r2, r4
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	bf00      	nop
 800534e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005352:	46bd      	mov	sp, r7
 8005354:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005358:	51eb851f 	.word	0x51eb851f

0800535c <siprintf>:
 800535c:	b40e      	push	{r1, r2, r3}
 800535e:	b500      	push	{lr}
 8005360:	b09c      	sub	sp, #112	; 0x70
 8005362:	ab1d      	add	r3, sp, #116	; 0x74
 8005364:	9002      	str	r0, [sp, #8]
 8005366:	9006      	str	r0, [sp, #24]
 8005368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800536c:	4809      	ldr	r0, [pc, #36]	; (8005394 <siprintf+0x38>)
 800536e:	9107      	str	r1, [sp, #28]
 8005370:	9104      	str	r1, [sp, #16]
 8005372:	4909      	ldr	r1, [pc, #36]	; (8005398 <siprintf+0x3c>)
 8005374:	f853 2b04 	ldr.w	r2, [r3], #4
 8005378:	9105      	str	r1, [sp, #20]
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	a902      	add	r1, sp, #8
 8005380:	f000 f9a0 	bl	80056c4 <_svfiprintf_r>
 8005384:	9b02      	ldr	r3, [sp, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	b01c      	add	sp, #112	; 0x70
 800538c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005390:	b003      	add	sp, #12
 8005392:	4770      	bx	lr
 8005394:	20000074 	.word	0x20000074
 8005398:	ffff0208 	.word	0xffff0208

0800539c <memset>:
 800539c:	4402      	add	r2, r0
 800539e:	4603      	mov	r3, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d100      	bne.n	80053a6 <memset+0xa>
 80053a4:	4770      	bx	lr
 80053a6:	f803 1b01 	strb.w	r1, [r3], #1
 80053aa:	e7f9      	b.n	80053a0 <memset+0x4>

080053ac <__errno>:
 80053ac:	4b01      	ldr	r3, [pc, #4]	; (80053b4 <__errno+0x8>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000074 	.word	0x20000074

080053b8 <__libc_init_array>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <__libc_init_array+0x38>)
 80053bc:	4c0d      	ldr	r4, [pc, #52]	; (80053f4 <__libc_init_array+0x3c>)
 80053be:	1b64      	subs	r4, r4, r5
 80053c0:	10a4      	asrs	r4, r4, #2
 80053c2:	2600      	movs	r6, #0
 80053c4:	42a6      	cmp	r6, r4
 80053c6:	d109      	bne.n	80053dc <__libc_init_array+0x24>
 80053c8:	4d0b      	ldr	r5, [pc, #44]	; (80053f8 <__libc_init_array+0x40>)
 80053ca:	4c0c      	ldr	r4, [pc, #48]	; (80053fc <__libc_init_array+0x44>)
 80053cc:	f000 fc6a 	bl	8005ca4 <_init>
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	2600      	movs	r6, #0
 80053d6:	42a6      	cmp	r6, r4
 80053d8:	d105      	bne.n	80053e6 <__libc_init_array+0x2e>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e0:	4798      	blx	r3
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7ee      	b.n	80053c4 <__libc_init_array+0xc>
 80053e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ea:	4798      	blx	r3
 80053ec:	3601      	adds	r6, #1
 80053ee:	e7f2      	b.n	80053d6 <__libc_init_array+0x1e>
 80053f0:	080062a8 	.word	0x080062a8
 80053f4:	080062a8 	.word	0x080062a8
 80053f8:	080062a8 	.word	0x080062a8
 80053fc:	080062ac 	.word	0x080062ac

08005400 <__retarget_lock_acquire_recursive>:
 8005400:	4770      	bx	lr

08005402 <__retarget_lock_release_recursive>:
 8005402:	4770      	bx	lr

08005404 <memcpy>:
 8005404:	440a      	add	r2, r1
 8005406:	4291      	cmp	r1, r2
 8005408:	f100 33ff 	add.w	r3, r0, #4294967295
 800540c:	d100      	bne.n	8005410 <memcpy+0xc>
 800540e:	4770      	bx	lr
 8005410:	b510      	push	{r4, lr}
 8005412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800541a:	4291      	cmp	r1, r2
 800541c:	d1f9      	bne.n	8005412 <memcpy+0xe>
 800541e:	bd10      	pop	{r4, pc}

08005420 <_free_r>:
 8005420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005422:	2900      	cmp	r1, #0
 8005424:	d044      	beq.n	80054b0 <_free_r+0x90>
 8005426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542a:	9001      	str	r0, [sp, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f1a1 0404 	sub.w	r4, r1, #4
 8005432:	bfb8      	it	lt
 8005434:	18e4      	addlt	r4, r4, r3
 8005436:	f000 f8df 	bl	80055f8 <__malloc_lock>
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <_free_r+0x94>)
 800543c:	9801      	ldr	r0, [sp, #4]
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	b933      	cbnz	r3, 8005450 <_free_r+0x30>
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	6014      	str	r4, [r2, #0]
 8005446:	b003      	add	sp, #12
 8005448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800544c:	f000 b8da 	b.w	8005604 <__malloc_unlock>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d908      	bls.n	8005466 <_free_r+0x46>
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	1961      	adds	r1, r4, r5
 8005458:	428b      	cmp	r3, r1
 800545a:	bf01      	itttt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	1949      	addeq	r1, r1, r5
 8005462:	6021      	streq	r1, [r4, #0]
 8005464:	e7ed      	b.n	8005442 <_free_r+0x22>
 8005466:	461a      	mov	r2, r3
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	b10b      	cbz	r3, 8005470 <_free_r+0x50>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d9fa      	bls.n	8005466 <_free_r+0x46>
 8005470:	6811      	ldr	r1, [r2, #0]
 8005472:	1855      	adds	r5, r2, r1
 8005474:	42a5      	cmp	r5, r4
 8005476:	d10b      	bne.n	8005490 <_free_r+0x70>
 8005478:	6824      	ldr	r4, [r4, #0]
 800547a:	4421      	add	r1, r4
 800547c:	1854      	adds	r4, r2, r1
 800547e:	42a3      	cmp	r3, r4
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	d1e0      	bne.n	8005446 <_free_r+0x26>
 8005484:	681c      	ldr	r4, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	6053      	str	r3, [r2, #4]
 800548a:	440c      	add	r4, r1
 800548c:	6014      	str	r4, [r2, #0]
 800548e:	e7da      	b.n	8005446 <_free_r+0x26>
 8005490:	d902      	bls.n	8005498 <_free_r+0x78>
 8005492:	230c      	movs	r3, #12
 8005494:	6003      	str	r3, [r0, #0]
 8005496:	e7d6      	b.n	8005446 <_free_r+0x26>
 8005498:	6825      	ldr	r5, [r4, #0]
 800549a:	1961      	adds	r1, r4, r5
 800549c:	428b      	cmp	r3, r1
 800549e:	bf04      	itt	eq
 80054a0:	6819      	ldreq	r1, [r3, #0]
 80054a2:	685b      	ldreq	r3, [r3, #4]
 80054a4:	6063      	str	r3, [r4, #4]
 80054a6:	bf04      	itt	eq
 80054a8:	1949      	addeq	r1, r1, r5
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	6054      	str	r4, [r2, #4]
 80054ae:	e7ca      	b.n	8005446 <_free_r+0x26>
 80054b0:	b003      	add	sp, #12
 80054b2:	bd30      	pop	{r4, r5, pc}
 80054b4:	20000378 	.word	0x20000378

080054b8 <sbrk_aligned>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4e0e      	ldr	r6, [pc, #56]	; (80054f4 <sbrk_aligned+0x3c>)
 80054bc:	460c      	mov	r4, r1
 80054be:	6831      	ldr	r1, [r6, #0]
 80054c0:	4605      	mov	r5, r0
 80054c2:	b911      	cbnz	r1, 80054ca <sbrk_aligned+0x12>
 80054c4:	f000 fba6 	bl	8005c14 <_sbrk_r>
 80054c8:	6030      	str	r0, [r6, #0]
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fba1 	bl	8005c14 <_sbrk_r>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d00a      	beq.n	80054ec <sbrk_aligned+0x34>
 80054d6:	1cc4      	adds	r4, r0, #3
 80054d8:	f024 0403 	bic.w	r4, r4, #3
 80054dc:	42a0      	cmp	r0, r4
 80054de:	d007      	beq.n	80054f0 <sbrk_aligned+0x38>
 80054e0:	1a21      	subs	r1, r4, r0
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fb96 	bl	8005c14 <_sbrk_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d101      	bne.n	80054f0 <sbrk_aligned+0x38>
 80054ec:	f04f 34ff 	mov.w	r4, #4294967295
 80054f0:	4620      	mov	r0, r4
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	2000037c 	.word	0x2000037c

080054f8 <_malloc_r>:
 80054f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054fc:	1ccd      	adds	r5, r1, #3
 80054fe:	f025 0503 	bic.w	r5, r5, #3
 8005502:	3508      	adds	r5, #8
 8005504:	2d0c      	cmp	r5, #12
 8005506:	bf38      	it	cc
 8005508:	250c      	movcc	r5, #12
 800550a:	2d00      	cmp	r5, #0
 800550c:	4607      	mov	r7, r0
 800550e:	db01      	blt.n	8005514 <_malloc_r+0x1c>
 8005510:	42a9      	cmp	r1, r5
 8005512:	d905      	bls.n	8005520 <_malloc_r+0x28>
 8005514:	230c      	movs	r3, #12
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	2600      	movs	r6, #0
 800551a:	4630      	mov	r0, r6
 800551c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055f4 <_malloc_r+0xfc>
 8005524:	f000 f868 	bl	80055f8 <__malloc_lock>
 8005528:	f8d8 3000 	ldr.w	r3, [r8]
 800552c:	461c      	mov	r4, r3
 800552e:	bb5c      	cbnz	r4, 8005588 <_malloc_r+0x90>
 8005530:	4629      	mov	r1, r5
 8005532:	4638      	mov	r0, r7
 8005534:	f7ff ffc0 	bl	80054b8 <sbrk_aligned>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	4604      	mov	r4, r0
 800553c:	d155      	bne.n	80055ea <_malloc_r+0xf2>
 800553e:	f8d8 4000 	ldr.w	r4, [r8]
 8005542:	4626      	mov	r6, r4
 8005544:	2e00      	cmp	r6, #0
 8005546:	d145      	bne.n	80055d4 <_malloc_r+0xdc>
 8005548:	2c00      	cmp	r4, #0
 800554a:	d048      	beq.n	80055de <_malloc_r+0xe6>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	4631      	mov	r1, r6
 8005550:	4638      	mov	r0, r7
 8005552:	eb04 0903 	add.w	r9, r4, r3
 8005556:	f000 fb5d 	bl	8005c14 <_sbrk_r>
 800555a:	4581      	cmp	r9, r0
 800555c:	d13f      	bne.n	80055de <_malloc_r+0xe6>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	1a6d      	subs	r5, r5, r1
 8005562:	4629      	mov	r1, r5
 8005564:	4638      	mov	r0, r7
 8005566:	f7ff ffa7 	bl	80054b8 <sbrk_aligned>
 800556a:	3001      	adds	r0, #1
 800556c:	d037      	beq.n	80055de <_malloc_r+0xe6>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	442b      	add	r3, r5
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	f8d8 3000 	ldr.w	r3, [r8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d038      	beq.n	80055ee <_malloc_r+0xf6>
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	42a2      	cmp	r2, r4
 8005580:	d12b      	bne.n	80055da <_malloc_r+0xe2>
 8005582:	2200      	movs	r2, #0
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	e00f      	b.n	80055a8 <_malloc_r+0xb0>
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	1b52      	subs	r2, r2, r5
 800558c:	d41f      	bmi.n	80055ce <_malloc_r+0xd6>
 800558e:	2a0b      	cmp	r2, #11
 8005590:	d917      	bls.n	80055c2 <_malloc_r+0xca>
 8005592:	1961      	adds	r1, r4, r5
 8005594:	42a3      	cmp	r3, r4
 8005596:	6025      	str	r5, [r4, #0]
 8005598:	bf18      	it	ne
 800559a:	6059      	strne	r1, [r3, #4]
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	bf08      	it	eq
 80055a0:	f8c8 1000 	streq.w	r1, [r8]
 80055a4:	5162      	str	r2, [r4, r5]
 80055a6:	604b      	str	r3, [r1, #4]
 80055a8:	4638      	mov	r0, r7
 80055aa:	f104 060b 	add.w	r6, r4, #11
 80055ae:	f000 f829 	bl	8005604 <__malloc_unlock>
 80055b2:	f026 0607 	bic.w	r6, r6, #7
 80055b6:	1d23      	adds	r3, r4, #4
 80055b8:	1af2      	subs	r2, r6, r3
 80055ba:	d0ae      	beq.n	800551a <_malloc_r+0x22>
 80055bc:	1b9b      	subs	r3, r3, r6
 80055be:	50a3      	str	r3, [r4, r2]
 80055c0:	e7ab      	b.n	800551a <_malloc_r+0x22>
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	6862      	ldr	r2, [r4, #4]
 80055c6:	d1dd      	bne.n	8005584 <_malloc_r+0x8c>
 80055c8:	f8c8 2000 	str.w	r2, [r8]
 80055cc:	e7ec      	b.n	80055a8 <_malloc_r+0xb0>
 80055ce:	4623      	mov	r3, r4
 80055d0:	6864      	ldr	r4, [r4, #4]
 80055d2:	e7ac      	b.n	800552e <_malloc_r+0x36>
 80055d4:	4634      	mov	r4, r6
 80055d6:	6876      	ldr	r6, [r6, #4]
 80055d8:	e7b4      	b.n	8005544 <_malloc_r+0x4c>
 80055da:	4613      	mov	r3, r2
 80055dc:	e7cc      	b.n	8005578 <_malloc_r+0x80>
 80055de:	230c      	movs	r3, #12
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4638      	mov	r0, r7
 80055e4:	f000 f80e 	bl	8005604 <__malloc_unlock>
 80055e8:	e797      	b.n	800551a <_malloc_r+0x22>
 80055ea:	6025      	str	r5, [r4, #0]
 80055ec:	e7dc      	b.n	80055a8 <_malloc_r+0xb0>
 80055ee:	605b      	str	r3, [r3, #4]
 80055f0:	deff      	udf	#255	; 0xff
 80055f2:	bf00      	nop
 80055f4:	20000378 	.word	0x20000378

080055f8 <__malloc_lock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <__malloc_lock+0x8>)
 80055fa:	f7ff bf01 	b.w	8005400 <__retarget_lock_acquire_recursive>
 80055fe:	bf00      	nop
 8005600:	20000374 	.word	0x20000374

08005604 <__malloc_unlock>:
 8005604:	4801      	ldr	r0, [pc, #4]	; (800560c <__malloc_unlock+0x8>)
 8005606:	f7ff befc 	b.w	8005402 <__retarget_lock_release_recursive>
 800560a:	bf00      	nop
 800560c:	20000374 	.word	0x20000374

08005610 <__ssputs_r>:
 8005610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	688e      	ldr	r6, [r1, #8]
 8005616:	461f      	mov	r7, r3
 8005618:	42be      	cmp	r6, r7
 800561a:	680b      	ldr	r3, [r1, #0]
 800561c:	4682      	mov	sl, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4690      	mov	r8, r2
 8005622:	d82c      	bhi.n	800567e <__ssputs_r+0x6e>
 8005624:	898a      	ldrh	r2, [r1, #12]
 8005626:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800562a:	d026      	beq.n	800567a <__ssputs_r+0x6a>
 800562c:	6965      	ldr	r5, [r4, #20]
 800562e:	6909      	ldr	r1, [r1, #16]
 8005630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005634:	eba3 0901 	sub.w	r9, r3, r1
 8005638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800563c:	1c7b      	adds	r3, r7, #1
 800563e:	444b      	add	r3, r9
 8005640:	106d      	asrs	r5, r5, #1
 8005642:	429d      	cmp	r5, r3
 8005644:	bf38      	it	cc
 8005646:	461d      	movcc	r5, r3
 8005648:	0553      	lsls	r3, r2, #21
 800564a:	d527      	bpl.n	800569c <__ssputs_r+0x8c>
 800564c:	4629      	mov	r1, r5
 800564e:	f7ff ff53 	bl	80054f8 <_malloc_r>
 8005652:	4606      	mov	r6, r0
 8005654:	b360      	cbz	r0, 80056b0 <__ssputs_r+0xa0>
 8005656:	6921      	ldr	r1, [r4, #16]
 8005658:	464a      	mov	r2, r9
 800565a:	f7ff fed3 	bl	8005404 <memcpy>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005668:	81a3      	strh	r3, [r4, #12]
 800566a:	6126      	str	r6, [r4, #16]
 800566c:	6165      	str	r5, [r4, #20]
 800566e:	444e      	add	r6, r9
 8005670:	eba5 0509 	sub.w	r5, r5, r9
 8005674:	6026      	str	r6, [r4, #0]
 8005676:	60a5      	str	r5, [r4, #8]
 8005678:	463e      	mov	r6, r7
 800567a:	42be      	cmp	r6, r7
 800567c:	d900      	bls.n	8005680 <__ssputs_r+0x70>
 800567e:	463e      	mov	r6, r7
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	4632      	mov	r2, r6
 8005684:	4641      	mov	r1, r8
 8005686:	f000 faab 	bl	8005be0 <memmove>
 800568a:	68a3      	ldr	r3, [r4, #8]
 800568c:	1b9b      	subs	r3, r3, r6
 800568e:	60a3      	str	r3, [r4, #8]
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	4433      	add	r3, r6
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	2000      	movs	r0, #0
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	462a      	mov	r2, r5
 800569e:	f000 fac9 	bl	8005c34 <_realloc_r>
 80056a2:	4606      	mov	r6, r0
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d1e0      	bne.n	800566a <__ssputs_r+0x5a>
 80056a8:	6921      	ldr	r1, [r4, #16]
 80056aa:	4650      	mov	r0, sl
 80056ac:	f7ff feb8 	bl	8005420 <_free_r>
 80056b0:	230c      	movs	r3, #12
 80056b2:	f8ca 3000 	str.w	r3, [sl]
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	f04f 30ff 	mov.w	r0, #4294967295
 80056c2:	e7e9      	b.n	8005698 <__ssputs_r+0x88>

080056c4 <_svfiprintf_r>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	4698      	mov	r8, r3
 80056ca:	898b      	ldrh	r3, [r1, #12]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	b09d      	sub	sp, #116	; 0x74
 80056d0:	4607      	mov	r7, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	d50e      	bpl.n	80056f6 <_svfiprintf_r+0x32>
 80056d8:	690b      	ldr	r3, [r1, #16]
 80056da:	b963      	cbnz	r3, 80056f6 <_svfiprintf_r+0x32>
 80056dc:	2140      	movs	r1, #64	; 0x40
 80056de:	f7ff ff0b 	bl	80054f8 <_malloc_r>
 80056e2:	6028      	str	r0, [r5, #0]
 80056e4:	6128      	str	r0, [r5, #16]
 80056e6:	b920      	cbnz	r0, 80056f2 <_svfiprintf_r+0x2e>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	e0d0      	b.n	8005894 <_svfiprintf_r+0x1d0>
 80056f2:	2340      	movs	r3, #64	; 0x40
 80056f4:	616b      	str	r3, [r5, #20]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9309      	str	r3, [sp, #36]	; 0x24
 80056fa:	2320      	movs	r3, #32
 80056fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005700:	f8cd 800c 	str.w	r8, [sp, #12]
 8005704:	2330      	movs	r3, #48	; 0x30
 8005706:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058ac <_svfiprintf_r+0x1e8>
 800570a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800570e:	f04f 0901 	mov.w	r9, #1
 8005712:	4623      	mov	r3, r4
 8005714:	469a      	mov	sl, r3
 8005716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800571a:	b10a      	cbz	r2, 8005720 <_svfiprintf_r+0x5c>
 800571c:	2a25      	cmp	r2, #37	; 0x25
 800571e:	d1f9      	bne.n	8005714 <_svfiprintf_r+0x50>
 8005720:	ebba 0b04 	subs.w	fp, sl, r4
 8005724:	d00b      	beq.n	800573e <_svfiprintf_r+0x7a>
 8005726:	465b      	mov	r3, fp
 8005728:	4622      	mov	r2, r4
 800572a:	4629      	mov	r1, r5
 800572c:	4638      	mov	r0, r7
 800572e:	f7ff ff6f 	bl	8005610 <__ssputs_r>
 8005732:	3001      	adds	r0, #1
 8005734:	f000 80a9 	beq.w	800588a <_svfiprintf_r+0x1c6>
 8005738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800573a:	445a      	add	r2, fp
 800573c:	9209      	str	r2, [sp, #36]	; 0x24
 800573e:	f89a 3000 	ldrb.w	r3, [sl]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80a1 	beq.w	800588a <_svfiprintf_r+0x1c6>
 8005748:	2300      	movs	r3, #0
 800574a:	f04f 32ff 	mov.w	r2, #4294967295
 800574e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005752:	f10a 0a01 	add.w	sl, sl, #1
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	9307      	str	r3, [sp, #28]
 800575a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800575e:	931a      	str	r3, [sp, #104]	; 0x68
 8005760:	4654      	mov	r4, sl
 8005762:	2205      	movs	r2, #5
 8005764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005768:	4850      	ldr	r0, [pc, #320]	; (80058ac <_svfiprintf_r+0x1e8>)
 800576a:	f7fa fd41 	bl	80001f0 <memchr>
 800576e:	9a04      	ldr	r2, [sp, #16]
 8005770:	b9d8      	cbnz	r0, 80057aa <_svfiprintf_r+0xe6>
 8005772:	06d0      	lsls	r0, r2, #27
 8005774:	bf44      	itt	mi
 8005776:	2320      	movmi	r3, #32
 8005778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800577c:	0711      	lsls	r1, r2, #28
 800577e:	bf44      	itt	mi
 8005780:	232b      	movmi	r3, #43	; 0x2b
 8005782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005786:	f89a 3000 	ldrb.w	r3, [sl]
 800578a:	2b2a      	cmp	r3, #42	; 0x2a
 800578c:	d015      	beq.n	80057ba <_svfiprintf_r+0xf6>
 800578e:	9a07      	ldr	r2, [sp, #28]
 8005790:	4654      	mov	r4, sl
 8005792:	2000      	movs	r0, #0
 8005794:	f04f 0c0a 	mov.w	ip, #10
 8005798:	4621      	mov	r1, r4
 800579a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800579e:	3b30      	subs	r3, #48	; 0x30
 80057a0:	2b09      	cmp	r3, #9
 80057a2:	d94d      	bls.n	8005840 <_svfiprintf_r+0x17c>
 80057a4:	b1b0      	cbz	r0, 80057d4 <_svfiprintf_r+0x110>
 80057a6:	9207      	str	r2, [sp, #28]
 80057a8:	e014      	b.n	80057d4 <_svfiprintf_r+0x110>
 80057aa:	eba0 0308 	sub.w	r3, r0, r8
 80057ae:	fa09 f303 	lsl.w	r3, r9, r3
 80057b2:	4313      	orrs	r3, r2
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	46a2      	mov	sl, r4
 80057b8:	e7d2      	b.n	8005760 <_svfiprintf_r+0x9c>
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	1d19      	adds	r1, r3, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	9103      	str	r1, [sp, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bfbb      	ittet	lt
 80057c6:	425b      	neglt	r3, r3
 80057c8:	f042 0202 	orrlt.w	r2, r2, #2
 80057cc:	9307      	strge	r3, [sp, #28]
 80057ce:	9307      	strlt	r3, [sp, #28]
 80057d0:	bfb8      	it	lt
 80057d2:	9204      	strlt	r2, [sp, #16]
 80057d4:	7823      	ldrb	r3, [r4, #0]
 80057d6:	2b2e      	cmp	r3, #46	; 0x2e
 80057d8:	d10c      	bne.n	80057f4 <_svfiprintf_r+0x130>
 80057da:	7863      	ldrb	r3, [r4, #1]
 80057dc:	2b2a      	cmp	r3, #42	; 0x2a
 80057de:	d134      	bne.n	800584a <_svfiprintf_r+0x186>
 80057e0:	9b03      	ldr	r3, [sp, #12]
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	9203      	str	r2, [sp, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bfb8      	it	lt
 80057ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80057f0:	3402      	adds	r4, #2
 80057f2:	9305      	str	r3, [sp, #20]
 80057f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80058bc <_svfiprintf_r+0x1f8>
 80057f8:	7821      	ldrb	r1, [r4, #0]
 80057fa:	2203      	movs	r2, #3
 80057fc:	4650      	mov	r0, sl
 80057fe:	f7fa fcf7 	bl	80001f0 <memchr>
 8005802:	b138      	cbz	r0, 8005814 <_svfiprintf_r+0x150>
 8005804:	9b04      	ldr	r3, [sp, #16]
 8005806:	eba0 000a 	sub.w	r0, r0, sl
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	4082      	lsls	r2, r0
 800580e:	4313      	orrs	r3, r2
 8005810:	3401      	adds	r4, #1
 8005812:	9304      	str	r3, [sp, #16]
 8005814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005818:	4825      	ldr	r0, [pc, #148]	; (80058b0 <_svfiprintf_r+0x1ec>)
 800581a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800581e:	2206      	movs	r2, #6
 8005820:	f7fa fce6 	bl	80001f0 <memchr>
 8005824:	2800      	cmp	r0, #0
 8005826:	d038      	beq.n	800589a <_svfiprintf_r+0x1d6>
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <_svfiprintf_r+0x1f0>)
 800582a:	bb1b      	cbnz	r3, 8005874 <_svfiprintf_r+0x1b0>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	3307      	adds	r3, #7
 8005830:	f023 0307 	bic.w	r3, r3, #7
 8005834:	3308      	adds	r3, #8
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583a:	4433      	add	r3, r6
 800583c:	9309      	str	r3, [sp, #36]	; 0x24
 800583e:	e768      	b.n	8005712 <_svfiprintf_r+0x4e>
 8005840:	fb0c 3202 	mla	r2, ip, r2, r3
 8005844:	460c      	mov	r4, r1
 8005846:	2001      	movs	r0, #1
 8005848:	e7a6      	b.n	8005798 <_svfiprintf_r+0xd4>
 800584a:	2300      	movs	r3, #0
 800584c:	3401      	adds	r4, #1
 800584e:	9305      	str	r3, [sp, #20]
 8005850:	4619      	mov	r1, r3
 8005852:	f04f 0c0a 	mov.w	ip, #10
 8005856:	4620      	mov	r0, r4
 8005858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800585c:	3a30      	subs	r2, #48	; 0x30
 800585e:	2a09      	cmp	r2, #9
 8005860:	d903      	bls.n	800586a <_svfiprintf_r+0x1a6>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0c6      	beq.n	80057f4 <_svfiprintf_r+0x130>
 8005866:	9105      	str	r1, [sp, #20]
 8005868:	e7c4      	b.n	80057f4 <_svfiprintf_r+0x130>
 800586a:	fb0c 2101 	mla	r1, ip, r1, r2
 800586e:	4604      	mov	r4, r0
 8005870:	2301      	movs	r3, #1
 8005872:	e7f0      	b.n	8005856 <_svfiprintf_r+0x192>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	462a      	mov	r2, r5
 800587a:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <_svfiprintf_r+0x1f4>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4638      	mov	r0, r7
 8005880:	f3af 8000 	nop.w
 8005884:	1c42      	adds	r2, r0, #1
 8005886:	4606      	mov	r6, r0
 8005888:	d1d6      	bne.n	8005838 <_svfiprintf_r+0x174>
 800588a:	89ab      	ldrh	r3, [r5, #12]
 800588c:	065b      	lsls	r3, r3, #25
 800588e:	f53f af2d 	bmi.w	80056ec <_svfiprintf_r+0x28>
 8005892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005894:	b01d      	add	sp, #116	; 0x74
 8005896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589a:	ab03      	add	r3, sp, #12
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	462a      	mov	r2, r5
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <_svfiprintf_r+0x1f4>)
 80058a2:	a904      	add	r1, sp, #16
 80058a4:	4638      	mov	r0, r7
 80058a6:	f000 f879 	bl	800599c <_printf_i>
 80058aa:	e7eb      	b.n	8005884 <_svfiprintf_r+0x1c0>
 80058ac:	0800626c 	.word	0x0800626c
 80058b0:	08006276 	.word	0x08006276
 80058b4:	00000000 	.word	0x00000000
 80058b8:	08005611 	.word	0x08005611
 80058bc:	08006272 	.word	0x08006272

080058c0 <_printf_common>:
 80058c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	4616      	mov	r6, r2
 80058c6:	4699      	mov	r9, r3
 80058c8:	688a      	ldr	r2, [r1, #8]
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfb8      	it	lt
 80058d4:	4613      	movlt	r3, r2
 80058d6:	6033      	str	r3, [r6, #0]
 80058d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058dc:	4607      	mov	r7, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b10a      	cbz	r2, 80058e6 <_printf_common+0x26>
 80058e2:	3301      	adds	r3, #1
 80058e4:	6033      	str	r3, [r6, #0]
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	0699      	lsls	r1, r3, #26
 80058ea:	bf42      	ittt	mi
 80058ec:	6833      	ldrmi	r3, [r6, #0]
 80058ee:	3302      	addmi	r3, #2
 80058f0:	6033      	strmi	r3, [r6, #0]
 80058f2:	6825      	ldr	r5, [r4, #0]
 80058f4:	f015 0506 	ands.w	r5, r5, #6
 80058f8:	d106      	bne.n	8005908 <_printf_common+0x48>
 80058fa:	f104 0a19 	add.w	sl, r4, #25
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	6832      	ldr	r2, [r6, #0]
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	42ab      	cmp	r3, r5
 8005906:	dc26      	bgt.n	8005956 <_printf_common+0x96>
 8005908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800590c:	1e13      	subs	r3, r2, #0
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	bf18      	it	ne
 8005912:	2301      	movne	r3, #1
 8005914:	0692      	lsls	r2, r2, #26
 8005916:	d42b      	bmi.n	8005970 <_printf_common+0xb0>
 8005918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800591c:	4649      	mov	r1, r9
 800591e:	4638      	mov	r0, r7
 8005920:	47c0      	blx	r8
 8005922:	3001      	adds	r0, #1
 8005924:	d01e      	beq.n	8005964 <_printf_common+0xa4>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	2b04      	cmp	r3, #4
 8005930:	bf02      	ittt	eq
 8005932:	68e5      	ldreq	r5, [r4, #12]
 8005934:	6833      	ldreq	r3, [r6, #0]
 8005936:	1aed      	subeq	r5, r5, r3
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	bf0c      	ite	eq
 800593c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005940:	2500      	movne	r5, #0
 8005942:	4293      	cmp	r3, r2
 8005944:	bfc4      	itt	gt
 8005946:	1a9b      	subgt	r3, r3, r2
 8005948:	18ed      	addgt	r5, r5, r3
 800594a:	2600      	movs	r6, #0
 800594c:	341a      	adds	r4, #26
 800594e:	42b5      	cmp	r5, r6
 8005950:	d11a      	bne.n	8005988 <_printf_common+0xc8>
 8005952:	2000      	movs	r0, #0
 8005954:	e008      	b.n	8005968 <_printf_common+0xa8>
 8005956:	2301      	movs	r3, #1
 8005958:	4652      	mov	r2, sl
 800595a:	4649      	mov	r1, r9
 800595c:	4638      	mov	r0, r7
 800595e:	47c0      	blx	r8
 8005960:	3001      	adds	r0, #1
 8005962:	d103      	bne.n	800596c <_printf_common+0xac>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596c:	3501      	adds	r5, #1
 800596e:	e7c6      	b.n	80058fe <_printf_common+0x3e>
 8005970:	18e1      	adds	r1, r4, r3
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	2030      	movs	r0, #48	; 0x30
 8005976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800597a:	4422      	add	r2, r4
 800597c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005984:	3302      	adds	r3, #2
 8005986:	e7c7      	b.n	8005918 <_printf_common+0x58>
 8005988:	2301      	movs	r3, #1
 800598a:	4622      	mov	r2, r4
 800598c:	4649      	mov	r1, r9
 800598e:	4638      	mov	r0, r7
 8005990:	47c0      	blx	r8
 8005992:	3001      	adds	r0, #1
 8005994:	d0e6      	beq.n	8005964 <_printf_common+0xa4>
 8005996:	3601      	adds	r6, #1
 8005998:	e7d9      	b.n	800594e <_printf_common+0x8e>
	...

0800599c <_printf_i>:
 800599c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	7e0f      	ldrb	r7, [r1, #24]
 80059a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059a4:	2f78      	cmp	r7, #120	; 0x78
 80059a6:	4691      	mov	r9, r2
 80059a8:	4680      	mov	r8, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	469a      	mov	sl, r3
 80059ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059b2:	d807      	bhi.n	80059c4 <_printf_i+0x28>
 80059b4:	2f62      	cmp	r7, #98	; 0x62
 80059b6:	d80a      	bhi.n	80059ce <_printf_i+0x32>
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	f000 80d4 	beq.w	8005b66 <_printf_i+0x1ca>
 80059be:	2f58      	cmp	r7, #88	; 0x58
 80059c0:	f000 80c0 	beq.w	8005b44 <_printf_i+0x1a8>
 80059c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059cc:	e03a      	b.n	8005a44 <_printf_i+0xa8>
 80059ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059d2:	2b15      	cmp	r3, #21
 80059d4:	d8f6      	bhi.n	80059c4 <_printf_i+0x28>
 80059d6:	a101      	add	r1, pc, #4	; (adr r1, 80059dc <_printf_i+0x40>)
 80059d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059dc:	08005a35 	.word	0x08005a35
 80059e0:	08005a49 	.word	0x08005a49
 80059e4:	080059c5 	.word	0x080059c5
 80059e8:	080059c5 	.word	0x080059c5
 80059ec:	080059c5 	.word	0x080059c5
 80059f0:	080059c5 	.word	0x080059c5
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	080059c5 	.word	0x080059c5
 80059fc:	080059c5 	.word	0x080059c5
 8005a00:	080059c5 	.word	0x080059c5
 8005a04:	080059c5 	.word	0x080059c5
 8005a08:	08005b4d 	.word	0x08005b4d
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	08005b07 	.word	0x08005b07
 8005a14:	080059c5 	.word	0x080059c5
 8005a18:	080059c5 	.word	0x080059c5
 8005a1c:	08005b6f 	.word	0x08005b6f
 8005a20:	080059c5 	.word	0x080059c5
 8005a24:	08005a75 	.word	0x08005a75
 8005a28:	080059c5 	.word	0x080059c5
 8005a2c:	080059c5 	.word	0x080059c5
 8005a30:	08005b0f 	.word	0x08005b0f
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	602a      	str	r2, [r5, #0]
 8005a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a44:	2301      	movs	r3, #1
 8005a46:	e09f      	b.n	8005b88 <_printf_i+0x1ec>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	0607      	lsls	r7, r0, #24
 8005a4e:	f103 0104 	add.w	r1, r3, #4
 8005a52:	6029      	str	r1, [r5, #0]
 8005a54:	d501      	bpl.n	8005a5a <_printf_i+0xbe>
 8005a56:	681e      	ldr	r6, [r3, #0]
 8005a58:	e003      	b.n	8005a62 <_printf_i+0xc6>
 8005a5a:	0646      	lsls	r6, r0, #25
 8005a5c:	d5fb      	bpl.n	8005a56 <_printf_i+0xba>
 8005a5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	da03      	bge.n	8005a6e <_printf_i+0xd2>
 8005a66:	232d      	movs	r3, #45	; 0x2d
 8005a68:	4276      	negs	r6, r6
 8005a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6e:	485a      	ldr	r0, [pc, #360]	; (8005bd8 <_printf_i+0x23c>)
 8005a70:	230a      	movs	r3, #10
 8005a72:	e012      	b.n	8005a9a <_printf_i+0xfe>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	6029      	str	r1, [r5, #0]
 8005a7c:	0605      	lsls	r5, r0, #24
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0xe8>
 8005a80:	681e      	ldr	r6, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <_printf_i+0xee>
 8005a84:	0641      	lsls	r1, r0, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0xe4>
 8005a88:	881e      	ldrh	r6, [r3, #0]
 8005a8a:	4853      	ldr	r0, [pc, #332]	; (8005bd8 <_printf_i+0x23c>)
 8005a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a8e:	bf0c      	ite	eq
 8005a90:	2308      	moveq	r3, #8
 8005a92:	230a      	movne	r3, #10
 8005a94:	2100      	movs	r1, #0
 8005a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a9a:	6865      	ldr	r5, [r4, #4]
 8005a9c:	60a5      	str	r5, [r4, #8]
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	bfa2      	ittt	ge
 8005aa2:	6821      	ldrge	r1, [r4, #0]
 8005aa4:	f021 0104 	bicge.w	r1, r1, #4
 8005aa8:	6021      	strge	r1, [r4, #0]
 8005aaa:	b90e      	cbnz	r6, 8005ab0 <_printf_i+0x114>
 8005aac:	2d00      	cmp	r5, #0
 8005aae:	d04b      	beq.n	8005b48 <_printf_i+0x1ac>
 8005ab0:	4615      	mov	r5, r2
 8005ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8005aba:	5dc7      	ldrb	r7, [r0, r7]
 8005abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ac0:	4637      	mov	r7, r6
 8005ac2:	42bb      	cmp	r3, r7
 8005ac4:	460e      	mov	r6, r1
 8005ac6:	d9f4      	bls.n	8005ab2 <_printf_i+0x116>
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d10b      	bne.n	8005ae4 <_printf_i+0x148>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	07de      	lsls	r6, r3, #31
 8005ad0:	d508      	bpl.n	8005ae4 <_printf_i+0x148>
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	6861      	ldr	r1, [r4, #4]
 8005ad6:	4299      	cmp	r1, r3
 8005ad8:	bfde      	ittt	le
 8005ada:	2330      	movle	r3, #48	; 0x30
 8005adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ae4:	1b52      	subs	r2, r2, r5
 8005ae6:	6122      	str	r2, [r4, #16]
 8005ae8:	f8cd a000 	str.w	sl, [sp]
 8005aec:	464b      	mov	r3, r9
 8005aee:	aa03      	add	r2, sp, #12
 8005af0:	4621      	mov	r1, r4
 8005af2:	4640      	mov	r0, r8
 8005af4:	f7ff fee4 	bl	80058c0 <_printf_common>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d14a      	bne.n	8005b92 <_printf_i+0x1f6>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	b004      	add	sp, #16
 8005b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	f043 0320 	orr.w	r3, r3, #32
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	4833      	ldr	r0, [pc, #204]	; (8005bdc <_printf_i+0x240>)
 8005b10:	2778      	movs	r7, #120	; 0x78
 8005b12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	6829      	ldr	r1, [r5, #0]
 8005b1a:	061f      	lsls	r7, r3, #24
 8005b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b20:	d402      	bmi.n	8005b28 <_printf_i+0x18c>
 8005b22:	065f      	lsls	r7, r3, #25
 8005b24:	bf48      	it	mi
 8005b26:	b2b6      	uxthmi	r6, r6
 8005b28:	07df      	lsls	r7, r3, #31
 8005b2a:	bf48      	it	mi
 8005b2c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b30:	6029      	str	r1, [r5, #0]
 8005b32:	bf48      	it	mi
 8005b34:	6023      	strmi	r3, [r4, #0]
 8005b36:	b91e      	cbnz	r6, 8005b40 <_printf_i+0x1a4>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	2310      	movs	r3, #16
 8005b42:	e7a7      	b.n	8005a94 <_printf_i+0xf8>
 8005b44:	4824      	ldr	r0, [pc, #144]	; (8005bd8 <_printf_i+0x23c>)
 8005b46:	e7e4      	b.n	8005b12 <_printf_i+0x176>
 8005b48:	4615      	mov	r5, r2
 8005b4a:	e7bd      	b.n	8005ac8 <_printf_i+0x12c>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	6826      	ldr	r6, [r4, #0]
 8005b50:	6961      	ldr	r1, [r4, #20]
 8005b52:	1d18      	adds	r0, r3, #4
 8005b54:	6028      	str	r0, [r5, #0]
 8005b56:	0635      	lsls	r5, r6, #24
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	d501      	bpl.n	8005b60 <_printf_i+0x1c4>
 8005b5c:	6019      	str	r1, [r3, #0]
 8005b5e:	e002      	b.n	8005b66 <_printf_i+0x1ca>
 8005b60:	0670      	lsls	r0, r6, #25
 8005b62:	d5fb      	bpl.n	8005b5c <_printf_i+0x1c0>
 8005b64:	8019      	strh	r1, [r3, #0]
 8005b66:	2300      	movs	r3, #0
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	4615      	mov	r5, r2
 8005b6c:	e7bc      	b.n	8005ae8 <_printf_i+0x14c>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	1d1a      	adds	r2, r3, #4
 8005b72:	602a      	str	r2, [r5, #0]
 8005b74:	681d      	ldr	r5, [r3, #0]
 8005b76:	6862      	ldr	r2, [r4, #4]
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f7fa fb38 	bl	80001f0 <memchr>
 8005b80:	b108      	cbz	r0, 8005b86 <_printf_i+0x1ea>
 8005b82:	1b40      	subs	r0, r0, r5
 8005b84:	6060      	str	r0, [r4, #4]
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	6123      	str	r3, [r4, #16]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b90:	e7aa      	b.n	8005ae8 <_printf_i+0x14c>
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	462a      	mov	r2, r5
 8005b96:	4649      	mov	r1, r9
 8005b98:	4640      	mov	r0, r8
 8005b9a:	47d0      	blx	sl
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d0ad      	beq.n	8005afc <_printf_i+0x160>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	079b      	lsls	r3, r3, #30
 8005ba4:	d413      	bmi.n	8005bce <_printf_i+0x232>
 8005ba6:	68e0      	ldr	r0, [r4, #12]
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	4298      	cmp	r0, r3
 8005bac:	bfb8      	it	lt
 8005bae:	4618      	movlt	r0, r3
 8005bb0:	e7a6      	b.n	8005b00 <_printf_i+0x164>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	4640      	mov	r0, r8
 8005bba:	47d0      	blx	sl
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d09d      	beq.n	8005afc <_printf_i+0x160>
 8005bc0:	3501      	adds	r5, #1
 8005bc2:	68e3      	ldr	r3, [r4, #12]
 8005bc4:	9903      	ldr	r1, [sp, #12]
 8005bc6:	1a5b      	subs	r3, r3, r1
 8005bc8:	42ab      	cmp	r3, r5
 8005bca:	dcf2      	bgt.n	8005bb2 <_printf_i+0x216>
 8005bcc:	e7eb      	b.n	8005ba6 <_printf_i+0x20a>
 8005bce:	2500      	movs	r5, #0
 8005bd0:	f104 0619 	add.w	r6, r4, #25
 8005bd4:	e7f5      	b.n	8005bc2 <_printf_i+0x226>
 8005bd6:	bf00      	nop
 8005bd8:	0800627d 	.word	0x0800627d
 8005bdc:	0800628e 	.word	0x0800628e

08005be0 <memmove>:
 8005be0:	4288      	cmp	r0, r1
 8005be2:	b510      	push	{r4, lr}
 8005be4:	eb01 0402 	add.w	r4, r1, r2
 8005be8:	d902      	bls.n	8005bf0 <memmove+0x10>
 8005bea:	4284      	cmp	r4, r0
 8005bec:	4623      	mov	r3, r4
 8005bee:	d807      	bhi.n	8005c00 <memmove+0x20>
 8005bf0:	1e43      	subs	r3, r0, #1
 8005bf2:	42a1      	cmp	r1, r4
 8005bf4:	d008      	beq.n	8005c08 <memmove+0x28>
 8005bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bfe:	e7f8      	b.n	8005bf2 <memmove+0x12>
 8005c00:	4402      	add	r2, r0
 8005c02:	4601      	mov	r1, r0
 8005c04:	428a      	cmp	r2, r1
 8005c06:	d100      	bne.n	8005c0a <memmove+0x2a>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c12:	e7f7      	b.n	8005c04 <memmove+0x24>

08005c14 <_sbrk_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d06      	ldr	r5, [pc, #24]	; (8005c30 <_sbrk_r+0x1c>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	f7fc f93e 	bl	8001ea0 <_sbrk>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_sbrk_r+0x1a>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_sbrk_r+0x1a>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000370 	.word	0x20000370

08005c34 <_realloc_r>:
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	b921      	cbnz	r1, 8005c4a <_realloc_r+0x16>
 8005c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c44:	4611      	mov	r1, r2
 8005c46:	f7ff bc57 	b.w	80054f8 <_malloc_r>
 8005c4a:	b92a      	cbnz	r2, 8005c58 <_realloc_r+0x24>
 8005c4c:	f7ff fbe8 	bl	8005420 <_free_r>
 8005c50:	4625      	mov	r5, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	f000 f81b 	bl	8005c92 <_malloc_usable_size_r>
 8005c5c:	4284      	cmp	r4, r0
 8005c5e:	4607      	mov	r7, r0
 8005c60:	d802      	bhi.n	8005c68 <_realloc_r+0x34>
 8005c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c66:	d812      	bhi.n	8005c8e <_realloc_r+0x5a>
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f7ff fc44 	bl	80054f8 <_malloc_r>
 8005c70:	4605      	mov	r5, r0
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0ed      	beq.n	8005c52 <_realloc_r+0x1e>
 8005c76:	42bc      	cmp	r4, r7
 8005c78:	4622      	mov	r2, r4
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	bf28      	it	cs
 8005c7e:	463a      	movcs	r2, r7
 8005c80:	f7ff fbc0 	bl	8005404 <memcpy>
 8005c84:	4631      	mov	r1, r6
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7ff fbca 	bl	8005420 <_free_r>
 8005c8c:	e7e1      	b.n	8005c52 <_realloc_r+0x1e>
 8005c8e:	4635      	mov	r5, r6
 8005c90:	e7df      	b.n	8005c52 <_realloc_r+0x1e>

08005c92 <_malloc_usable_size_r>:
 8005c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c96:	1f18      	subs	r0, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfbc      	itt	lt
 8005c9c:	580b      	ldrlt	r3, [r1, r0]
 8005c9e:	18c0      	addlt	r0, r0, r3
 8005ca0:	4770      	bx	lr
	...

08005ca4 <_init>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr

08005cb0 <_fini>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr
