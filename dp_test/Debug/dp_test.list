
dp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005078  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005804  08005804  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800580c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000080  0800588c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800588c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d25c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea7  00000000  00000000  0002d30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e0b  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d604  00000000  00000000  0004857b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009353d  00000000  00000000  00055b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e90bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000e910c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005200 	.word	0x08005200

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08005200 	.word	0x08005200

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <NRF24_DelayMicroSeconds+0x3c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <NRF24_DelayMicroSeconds+0x40>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	0c9a      	lsrs	r2, r3, #18
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005b4:	bf00      	nop
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	60fa      	str	r2, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1fa      	bne.n	80005b6 <NRF24_DelayMicroSeconds+0x22>
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000010 	.word	0x20000010
 80005d4:	165e9f81 	.word	0x165e9f81

080005d8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d008      	beq.n	80005f8 <NRF24_csn+0x20>
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <NRF24_csn+0x38>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <NRF24_csn+0x3c>)
 80005ec:	8811      	ldrh	r1, [r2, #0]
 80005ee:	2201      	movs	r2, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fb6f 	bl	8002cd4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005f6:	e007      	b.n	8000608 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <NRF24_csn+0x38>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <NRF24_csn+0x3c>)
 80005fe:	8811      	ldrh	r1, [r2, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fb66 	bl	8002cd4 <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000a4 	.word	0x200000a4
 8000614:	200000a8 	.word	0x200000a8

08000618 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d008      	beq.n	8000638 <NRF24_ce+0x20>
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <NRF24_ce+0x38>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <NRF24_ce+0x3c>)
 800062c:	8811      	ldrh	r1, [r2, #0]
 800062e:	2201      	movs	r2, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fb4f 	bl	8002cd4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000636:	e007      	b.n	8000648 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <NRF24_ce+0x38>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <NRF24_ce+0x3c>)
 800063e:	8811      	ldrh	r1, [r2, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fb46 	bl	8002cd4 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000a4 	.word	0x200000a4
 8000654:	200000aa 	.word	0x200000aa

08000658 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ffb8 	bl	80005d8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	b2db      	uxtb	r3, r3
 8000670:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000672:	f107 010c 	add.w	r1, r7, #12
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	2201      	movs	r2, #1
 800067a:	480a      	ldr	r0, [pc, #40]	; (80006a4 <NRF24_read_register+0x4c>)
 800067c:	f003 f83f 	bl	80036fe <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	1c59      	adds	r1, r3, #1
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2201      	movs	r2, #1
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <NRF24_read_register+0x4c>)
 800068c:	f003 f973 	bl	8003976 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff9f 	bl	80005d8 <NRF24_csn>
	return retData;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000ac 	.word	0x200000ac

080006a8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff ff8d 	bl	80005d8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 031f 	and.w	r3, r3, #31
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <NRF24_read_registerN+0x4c>)
 80006d2:	f003 f814 	bl	80036fe <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	6839      	ldr	r1, [r7, #0]
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <NRF24_read_registerN+0x4c>)
 80006e0:	f003 f949 	bl	8003976 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff77 	bl	80005d8 <NRF24_csn>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000ac 	.word	0x200000ac

080006f8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff65 	bl	80005d8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	b2db      	uxtb	r3, r3
 8000716:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800071c:	f107 010c 	add.w	r1, r7, #12
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2202      	movs	r2, #2
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <NRF24_write_register+0x40>)
 8000726:	f002 ffea 	bl	80036fe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff ff54 	bl	80005d8 <NRF24_csn>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000ac 	.word	0x200000ac

0800073c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff43 	bl	80005d8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	b2db      	uxtb	r3, r3
 800075a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800075c:	f107 010c 	add.w	r1, r7, #12
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <NRF24_write_registerN+0x4c>)
 8000766:	f002 ffca 	bl	80036fe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	b29a      	uxth	r2, r3
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	6839      	ldr	r1, [r7, #0]
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <NRF24_write_registerN+0x4c>)
 8000774:	f002 ffc3 	bl	80036fe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff2d 	bl	80005d8 <NRF24_csn>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000ac 	.word	0x200000ac

0800078c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ff1d 	bl	80005d8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80007a2:	f107 010f 	add.w	r1, r7, #15
 80007a6:	2364      	movs	r3, #100	; 0x64
 80007a8:	2201      	movs	r2, #1
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <NRF24_write_payload+0x40>)
 80007ac:	f002 ffa7 	bl	80036fe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <NRF24_write_payload+0x40>)
 80007ba:	f002 ffa0 	bl	80036fe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff0a 	bl	80005d8 <NRF24_csn>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000ac 	.word	0x200000ac

080007d0 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80007d4:	21ff      	movs	r1, #255	; 0xff
 80007d6:	20e1      	movs	r0, #225	; 0xe1
 80007d8:	f7ff ff8e 	bl	80006f8 <NRF24_write_register>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80007e4:	21ff      	movs	r1, #255	; 0xff
 80007e6:	20e2      	movs	r0, #226	; 0xe2
 80007e8:	f7ff ff86 	bl	80006f8 <NRF24_write_register>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f7ff ff2e 	bl	8000658 <NRF24_read_register>
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000800:	79fb      	ldrb	r3, [r7, #7]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800080c:	b082      	sub	sp, #8
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
 800081c:	4613      	mov	r3, r2
 800081e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000820:	4b66      	ldr	r3, [pc, #408]	; (80009bc <NRF24_begin+0x1b0>)
 8000822:	4618      	mov	r0, r3
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	2258      	movs	r2, #88	; 0x58
 800082a:	4619      	mov	r1, r3
 800082c:	f004 f872 	bl	8004914 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000830:	4a63      	ldr	r2, [pc, #396]	; (80009c0 <NRF24_begin+0x1b4>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000836:	4a63      	ldr	r2, [pc, #396]	; (80009c4 <NRF24_begin+0x1b8>)
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800083c:	4a62      	ldr	r2, [pc, #392]	; (80009c8 <NRF24_begin+0x1bc>)
 800083e:	883b      	ldrh	r3, [r7, #0]
 8000840:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fec8 	bl	80005d8 <NRF24_csn>
	NRF24_ce(0);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fee5 	bl	8000618 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800084e:	2005      	movs	r0, #5
 8000850:	f001 fbd0 	bl	8001ff4 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000854:	2108      	movs	r1, #8
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff4e 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800085c:	213f      	movs	r1, #63	; 0x3f
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff ff4a 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000864:	2103      	movs	r1, #3
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff ff46 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800086c:	2103      	movs	r1, #3
 800086e:	2003      	movs	r0, #3
 8000870:	f7ff ff42 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000874:	2103      	movs	r1, #3
 8000876:	2004      	movs	r0, #4
 8000878:	f7ff ff3e 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800087c:	2102      	movs	r1, #2
 800087e:	2005      	movs	r0, #5
 8000880:	f7ff ff3a 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000884:	210f      	movs	r1, #15
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff36 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800088c:	210e      	movs	r1, #14
 800088e:	2007      	movs	r0, #7
 8000890:	f7ff ff32 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000894:	2100      	movs	r1, #0
 8000896:	2008      	movs	r0, #8
 8000898:	f7ff ff2e 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800089c:	2100      	movs	r1, #0
 800089e:	2009      	movs	r0, #9
 80008a0:	f7ff ff2a 	bl	80006f8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80008a4:	23e7      	movs	r3, #231	; 0xe7
 80008a6:	733b      	strb	r3, [r7, #12]
 80008a8:	23e7      	movs	r3, #231	; 0xe7
 80008aa:	72fb      	strb	r3, [r7, #11]
 80008ac:	23e7      	movs	r3, #231	; 0xe7
 80008ae:	72bb      	strb	r3, [r7, #10]
 80008b0:	23e7      	movs	r3, #231	; 0xe7
 80008b2:	727b      	strb	r3, [r7, #9]
 80008b4:	23e7      	movs	r3, #231	; 0xe7
 80008b6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2205      	movs	r2, #5
 80008be:	4619      	mov	r1, r3
 80008c0:	200a      	movs	r0, #10
 80008c2:	f7ff ff3b 	bl	800073c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80008c6:	23c2      	movs	r3, #194	; 0xc2
 80008c8:	733b      	strb	r3, [r7, #12]
 80008ca:	23c2      	movs	r3, #194	; 0xc2
 80008cc:	72fb      	strb	r3, [r7, #11]
 80008ce:	23c2      	movs	r3, #194	; 0xc2
 80008d0:	72bb      	strb	r3, [r7, #10]
 80008d2:	23c2      	movs	r3, #194	; 0xc2
 80008d4:	727b      	strb	r3, [r7, #9]
 80008d6:	23c2      	movs	r3, #194	; 0xc2
 80008d8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2205      	movs	r2, #5
 80008e0:	4619      	mov	r1, r3
 80008e2:	200b      	movs	r0, #11
 80008e4:	f7ff ff2a 	bl	800073c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008e8:	21c3      	movs	r1, #195	; 0xc3
 80008ea:	200c      	movs	r0, #12
 80008ec:	f7ff ff04 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008f0:	21c4      	movs	r1, #196	; 0xc4
 80008f2:	200d      	movs	r0, #13
 80008f4:	f7ff ff00 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008f8:	21c5      	movs	r1, #197	; 0xc5
 80008fa:	200e      	movs	r0, #14
 80008fc:	f7ff fefc 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000900:	21c6      	movs	r1, #198	; 0xc6
 8000902:	200f      	movs	r0, #15
 8000904:	f7ff fef8 	bl	80006f8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	733b      	strb	r3, [r7, #12]
 800090c:	23e7      	movs	r3, #231	; 0xe7
 800090e:	72fb      	strb	r3, [r7, #11]
 8000910:	23e7      	movs	r3, #231	; 0xe7
 8000912:	72bb      	strb	r3, [r7, #10]
 8000914:	23e7      	movs	r3, #231	; 0xe7
 8000916:	727b      	strb	r3, [r7, #9]
 8000918:	23e7      	movs	r3, #231	; 0xe7
 800091a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	2205      	movs	r2, #5
 8000922:	4619      	mov	r1, r3
 8000924:	2010      	movs	r0, #16
 8000926:	f7ff ff09 	bl	800073c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2011      	movs	r0, #17
 800092e:	f7ff fee3 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2012      	movs	r0, #18
 8000936:	f7ff fedf 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800093a:	2100      	movs	r1, #0
 800093c:	2013      	movs	r0, #19
 800093e:	f7ff fedb 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2014      	movs	r0, #20
 8000946:	f7ff fed7 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800094a:	2100      	movs	r1, #0
 800094c:	2015      	movs	r0, #21
 800094e:	f7ff fed3 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2016      	movs	r0, #22
 8000956:	f7ff fecf 	bl	80006f8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800095a:	f000 fa89 	bl	8000e70 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800095e:	2100      	movs	r1, #0
 8000960:	201c      	movs	r0, #28
 8000962:	f7ff fec9 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000966:	2100      	movs	r1, #0
 8000968:	201d      	movs	r0, #29
 800096a:	f7ff fec5 	bl	80006f8 <NRF24_write_register>
	printRadioSettings();
 800096e:	f000 fa99 	bl	8000ea4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000972:	210f      	movs	r1, #15
 8000974:	200f      	movs	r0, #15
 8000976:	f000 f8ad 	bl	8000ad4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800097a:	2003      	movs	r0, #3
 800097c:	f000 f927 	bl	8000bce <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000980:	2001      	movs	r0, #1
 8000982:	f000 f95d 	bl	8000c40 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000986:	2002      	movs	r0, #2
 8000988:	f000 f9a0 	bl	8000ccc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800098c:	f000 f8f2 	bl	8000b74 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000990:	2020      	movs	r0, #32
 8000992:	f000 f8cf 	bl	8000b34 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000996:	f000 fa62 	bl	8000e5e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800099a:	204c      	movs	r0, #76	; 0x4c
 800099c:	f000 f8b5 	bl	8000b0a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80009a0:	f7ff ff16 	bl	80007d0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009a4:	f7ff ff1c 	bl	80007e0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80009a8:	f000 f9b8 	bl	8000d1c <NRF24_powerDown>
	
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009b6:	b002      	add	sp, #8
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200000ac 	.word	0x200000ac
 80009c0:	200000a4 	.word	0x200000a4
 80009c4:	200000a8 	.word	0x200000a8
 80009c8:	200000aa 	.word	0x200000aa

080009cc <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fe21 	bl	8000618 <NRF24_ce>
	NRF24_flush_tx();
 80009d6:	f7ff fefb 	bl	80007d0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009da:	f7ff ff01 	bl	80007e0 <NRF24_flush_rx>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80009f0:	f000 fa35 	bl	8000e5e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	4619      	mov	r1, r3
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f9ce 	bl	8000d9a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80009fe:	f001 faed 	bl	8001fdc <HAL_GetTick>
 8000a02:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000a04:	230a      	movs	r3, #10
 8000a06:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000a08:	f107 030d 	add.w	r3, r7, #13
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2008      	movs	r0, #8
 8000a12:	f7ff fe49 	bl	80006a8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000a16:	f7ff feeb 	bl	80007f0 <NRF24_get_status>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <NRF24_write+0x54>
 8000a28:	f001 fad8 	bl	8001fdc <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8e7      	bhi.n	8000a08 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a38:	f107 010b 	add.w	r1, r7, #11
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <NRF24_write+0x90>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f9d8 	bl	8000df8 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a48:	7b3b      	ldrb	r3, [r7, #12]
 8000a4a:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <NRF24_write+0x90>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d005      	beq.n	8000a60 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a54:	f000 f886 	bl	8000b64 <NRF24_getDynamicPayloadSize>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <NRF24_write+0x94>)
 8000a5e:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a60:	f000 f80c 	bl	8000a7c <NRF24_available>
	NRF24_flush_tx();
 8000a64:	f7ff feb4 	bl	80007d0 <NRF24_flush_tx>
	return retStatus;
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000009c 	.word	0x2000009c
 8000a78:	2000009d 	.word	0x2000009d

08000a7c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 f95a 	bl	8000d3a <NRF24_availablePipe>
 8000a86:	4603      	mov	r3, r0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a96:	463b      	mov	r3, r7
 8000a98:	2205      	movs	r2, #5
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f7ff fe4d 	bl	800073c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2010      	movs	r0, #16
 8000aaa:	f7ff fe47 	bl	800073c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000aae:	2320      	movs	r3, #32
 8000ab0:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <NRF24_openWritingPipe+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	bf28      	it	cs
 8000abc:	4613      	movcs	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	2011      	movs	r0, #17
 8000ac4:	f7ff fe18 	bl	80006f8 <NRF24_write_register>
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000009e 	.word	0x2000009e

08000ad4 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	2004      	movs	r0, #4
 8000afe:	f7ff fdfb 	bl	80006f8 <NRF24_write_register>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000b14:	237f      	movs	r3, #127	; 0x7f
 8000b16:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b18:	7bfa      	ldrb	r2, [r7, #15]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	bf28      	it	cs
 8000b20:	4613      	movcs	r3, r2
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4619      	mov	r1, r3
 8000b26:	2005      	movs	r0, #5
 8000b28:	f7ff fde6 	bl	80006f8 <NRF24_write_register>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	bf28      	it	cs
 8000b4a:	4613      	movcs	r3, r2
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <NRF24_setPayloadSize+0x2c>)
 8000b50:	701a      	strb	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000009e 	.word	0x2000009e

08000b64 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b68:	2060      	movs	r0, #96	; 0x60
 8000b6a:	f7ff fd75 	bl	8000658 <NRF24_read_register>
 8000b6e:	4603      	mov	r3, r0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b78:	201d      	movs	r0, #29
 8000b7a:	f7ff fd6d 	bl	8000658 <NRF24_read_register>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f023 0304 	bic.w	r3, r3, #4
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	4619      	mov	r1, r3
 8000b88:	201d      	movs	r0, #29
 8000b8a:	f7ff fdb5 	bl	80006f8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	201c      	movs	r0, #28
 8000b92:	f7ff fdb1 	bl	80006f8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b96:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <NRF24_disableDynamicPayloads+0x2c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000009f 	.word	0x2000009f

08000ba4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000bb4:	213f      	movs	r1, #63	; 0x3f
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fd9e 	bl	80006f8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000bbc:	e003      	b.n	8000bc6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fd99 	bl	80006f8 <NRF24_write_register>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bd8:	2006      	movs	r0, #6
 8000bda:	f7ff fd3d 	bl	8000658 <NRF24_read_register>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	f023 0306 	bic.w	r3, r3, #6
 8000be8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d104      	bne.n	8000bfa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	f043 0306 	orr.w	r3, r3, #6
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e019      	b.n	8000c2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d104      	bne.n	8000c0a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e011      	b.n	8000c2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d104      	bne.n	8000c1a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e009      	b.n	8000c2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d103      	bne.n	8000c2e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	f043 0306 	orr.w	r3, r3, #6
 8000c2c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2006      	movs	r0, #6
 8000c34:	f7ff fd60 	bl	80006f8 <NRF24_write_register>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c4e:	2006      	movs	r0, #6
 8000c50:	f7ff fd02 	bl	8000658 <NRF24_read_register>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <NRF24_setDataRate+0x88>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c64:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d107      	bne.n	8000c7c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <NRF24_setDataRate+0x88>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00d      	b.n	8000c98 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d107      	bne.n	8000c92 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <NRF24_setDataRate+0x88>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	73bb      	strb	r3, [r7, #14]
 8000c90:	e002      	b.n	8000c98 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <NRF24_setDataRate+0x88>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f7ff fd2b 	bl	80006f8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ca2:	2006      	movs	r0, #6
 8000ca4:	f7ff fcd8 	bl	8000658 <NRF24_read_register>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d102      	bne.n	8000cb8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e002      	b.n	8000cbe <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <NRF24_setDataRate+0x88>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000a0 	.word	0x200000a0

08000ccc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fcbe 	bl	8000658 <NRF24_read_register>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f023 030c 	bic.w	r3, r3, #12
 8000ce2:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00f      	beq.n	8000d0a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d104      	bne.n	8000cfa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e007      	b.n	8000d0a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fcf2 	bl	80006f8 <NRF24_write_register>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fc99 	bl	8000658 <NRF24_read_register>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f023 0302 	bic.w	r3, r3, #2
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fce1 	bl	80006f8 <NRF24_write_register>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d42:	f7ff fd55 	bl	80007f0 <NRF24_get_status>
 8000d46:	4603      	mov	r3, r0
 8000d48:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d017      	beq.n	8000d90 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	085b      	lsrs	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	2007      	movs	r0, #7
 8000d7a:	f7ff fcbd 	bl	80006f8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f003 0320 	and.w	r3, r3, #32
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000d88:	2120      	movs	r1, #32
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f7ff fcb4 	bl	80006f8 <NRF24_write_register>
    }
  }
  return result;
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fc36 	bl	8000618 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fc53 	bl	8000658 <NRF24_read_register>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f023 0301 	bic.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fc98 	bl	80006f8 <NRF24_write_register>
  NRF24_ce(1);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fc25 	bl	8000618 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000dce:	2096      	movs	r0, #150	; 0x96
 8000dd0:	f7ff fbe0 	bl	8000594 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fcd7 	bl	800078c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fc1a 	bl	8000618 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000de4:	200f      	movs	r0, #15
 8000de6:	f7ff fbd5 	bl	8000594 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fc14 	bl	8000618 <NRF24_ce>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000e04:	f7ff fcf4 	bl	80007f0 <NRF24_get_status>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e12:	2170      	movs	r1, #112	; 0x70
 8000e14:	2007      	movs	r0, #7
 8000e16:	f7ff fc6f 	bl	80006f8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
 8000e1c:	f003 0320 	and.w	r3, r3, #32
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf14      	ite	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	2300      	moveq	r3, #0
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	701a      	strb	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e62:	2170      	movs	r1, #112	; 0x70
 8000e64:	2007      	movs	r0, #7
 8000e66:	f7ff fc47 	bl	80006f8 <NRF24_write_register>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fbae 	bl	80005d8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000e7c:	2350      	movs	r3, #80	; 0x50
 8000e7e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000e80:	2373      	movs	r3, #115	; 0x73
 8000e82:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000e84:	1d39      	adds	r1, r7, #4
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	2202      	movs	r2, #2
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <NRF24_ACTIVATE_cmd+0x30>)
 8000e8c:	f002 fc37 	bl	80036fe <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fba1 	bl	80005d8 <NRF24_csn>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000ac 	.word	0x200000ac

08000ea4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea6:	b0a1      	sub	sp, #132	; 0x84
 8000ea8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	49c3      	ldr	r1, [pc, #780]	; (80011bc <printRadioSettings+0x318>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fd45 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f990 	bl	80001e0 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f107 0108 	add.w	r1, r7, #8
 8000ec8:	230a      	movs	r3, #10
 8000eca:	48bd      	ldr	r0, [pc, #756]	; (80011c0 <printRadioSettings+0x31c>)
 8000ecc:	f003 f983 	bl	80041d6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fbc1 	bl	8000658 <NRF24_read_register>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000ee8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <printRadioSettings+0x5e>
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	49b2      	ldr	r1, [pc, #712]	; (80011c4 <printRadioSettings+0x320>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 fd20 	bl	8004940 <siprintf>
 8000f00:	e00c      	b.n	8000f1c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	49b0      	ldr	r1, [pc, #704]	; (80011c8 <printRadioSettings+0x324>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fd19 	bl	8004940 <siprintf>
 8000f0e:	e005      	b.n	8000f1c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	49ad      	ldr	r1, [pc, #692]	; (80011cc <printRadioSettings+0x328>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fd12 	bl	8004940 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f95d 	bl	80001e0 <strlen>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f107 0108 	add.w	r1, r7, #8
 8000f2e:	230a      	movs	r3, #10
 8000f30:	48a3      	ldr	r0, [pc, #652]	; (80011c0 <printRadioSettings+0x31c>)
 8000f32:	f003 f950 	bl	80041d6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fb8e 	bl	8000658 <NRF24_read_register>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f46:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bfcc      	ite	gt
 8000f4e:	2301      	movgt	r3, #1
 8000f50:	2300      	movle	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f5a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bfcc      	ite	gt
 8000f62:	2301      	movgt	r3, #1
 8000f64:	2300      	movle	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f6e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bfcc      	ite	gt
 8000f76:	2301      	movgt	r3, #1
 8000f78:	2300      	movle	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f82:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bfcc      	ite	gt
 8000f8a:	2301      	movgt	r3, #1
 8000f8c:	2300      	movle	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f96:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bfcc      	ite	gt
 8000f9e:	2301      	movgt	r3, #1
 8000fa0:	2300      	movle	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000faa:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bfcc      	ite	gt
 8000fb2:	2301      	movgt	r3, #1
 8000fb4:	2300      	movle	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f107 0008 	add.w	r0, r7, #8
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	9402      	str	r4, [sp, #8]
 8000fc0:	9101      	str	r1, [sp, #4]
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	4633      	mov	r3, r6
 8000fc6:	462a      	mov	r2, r5
 8000fc8:	4981      	ldr	r1, [pc, #516]	; (80011d0 <printRadioSettings+0x32c>)
 8000fca:	f003 fcb9 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f904 	bl	80001e0 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f107 0108 	add.w	r1, r7, #8
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	4877      	ldr	r0, [pc, #476]	; (80011c0 <printRadioSettings+0x31c>)
 8000fe4:	f003 f8f7 	bl	80041d6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f7ff fb35 	bl	8000658 <NRF24_read_register>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ff4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ff8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bfcc      	ite	gt
 8001000:	2301      	movgt	r3, #1
 8001002:	2300      	movle	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001008:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800100c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001010:	2b00      	cmp	r3, #0
 8001012:	bfcc      	ite	gt
 8001014:	2301      	movgt	r3, #1
 8001016:	2300      	movle	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800101c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001020:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001024:	2b00      	cmp	r3, #0
 8001026:	bfcc      	ite	gt
 8001028:	2301      	movgt	r3, #1
 800102a:	2300      	movle	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001030:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001034:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001038:	2b00      	cmp	r3, #0
 800103a:	bfcc      	ite	gt
 800103c:	2301      	movgt	r3, #1
 800103e:	2300      	movle	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001044:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001048:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800104c:	2b00      	cmp	r3, #0
 800104e:	bfcc      	ite	gt
 8001050:	2301      	movgt	r3, #1
 8001052:	2300      	movle	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001058:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800105c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001060:	2b00      	cmp	r3, #0
 8001062:	bfcc      	ite	gt
 8001064:	2301      	movgt	r3, #1
 8001066:	2300      	movle	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f107 0008 	add.w	r0, r7, #8
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	9402      	str	r4, [sp, #8]
 8001072:	9101      	str	r1, [sp, #4]
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	4633      	mov	r3, r6
 8001078:	462a      	mov	r2, r5
 800107a:	4956      	ldr	r1, [pc, #344]	; (80011d4 <printRadioSettings+0x330>)
 800107c:	f003 fc60 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f8ab 	bl	80001e0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	f107 0108 	add.w	r1, r7, #8
 8001092:	230a      	movs	r3, #10
 8001094:	484a      	ldr	r0, [pc, #296]	; (80011c0 <printRadioSettings+0x31c>)
 8001096:	f003 f89e 	bl	80041d6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800109a:	2003      	movs	r0, #3
 800109c:	f7ff fadc 	bl	8000658 <NRF24_read_register>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80010aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ae:	3302      	adds	r3, #2
 80010b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80010b4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4946      	ldr	r1, [pc, #280]	; (80011d8 <printRadioSettings+0x334>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fc3e 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f889 	bl	80001e0 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	230a      	movs	r3, #10
 80010d8:	4839      	ldr	r0, [pc, #228]	; (80011c0 <printRadioSettings+0x31c>)
 80010da:	f003 f87c 	bl	80041d6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80010de:	2005      	movs	r0, #5
 80010e0:	f7ff faba 	bl	8000658 <NRF24_read_register>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80010ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4939      	ldr	r1, [pc, #228]	; (80011dc <printRadioSettings+0x338>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fc21 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f86c 	bl	80001e0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	f107 0108 	add.w	r1, r7, #8
 8001110:	230a      	movs	r3, #10
 8001112:	482b      	ldr	r0, [pc, #172]	; (80011c0 <printRadioSettings+0x31c>)
 8001114:	f003 f85f 	bl	80041d6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001118:	2006      	movs	r0, #6
 800111a:	f7ff fa9d 	bl	8000658 <NRF24_read_register>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001124:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <printRadioSettings+0x29a>
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	492a      	ldr	r1, [pc, #168]	; (80011e0 <printRadioSettings+0x33c>)
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fc02 	bl	8004940 <siprintf>
 800113c:	e005      	b.n	800114a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4928      	ldr	r1, [pc, #160]	; (80011e4 <printRadioSettings+0x340>)
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fbfb 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f846 	bl	80001e0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	230a      	movs	r3, #10
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <printRadioSettings+0x31c>)
 8001160:	f003 f839 	bl	80041d6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001164:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001168:	f003 0306 	and.w	r3, r3, #6
 800116c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001170:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001174:	085b      	lsrs	r3, r3, #1
 8001176:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800117a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <printRadioSettings+0x2ec>
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4918      	ldr	r1, [pc, #96]	; (80011e8 <printRadioSettings+0x344>)
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fbd9 	bl	8004940 <siprintf>
 800118e:	e03b      	b.n	8001208 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001190:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <printRadioSettings+0x302>
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4913      	ldr	r1, [pc, #76]	; (80011ec <printRadioSettings+0x348>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fbce 	bl	8004940 <siprintf>
 80011a4:	e030      	b.n	8001208 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80011a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d122      	bne.n	80011f4 <printRadioSettings+0x350>
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	490f      	ldr	r1, [pc, #60]	; (80011f0 <printRadioSettings+0x34c>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fbc3 	bl	8004940 <siprintf>
 80011ba:	e025      	b.n	8001208 <printRadioSettings+0x364>
 80011bc:	08005218 	.word	0x08005218
 80011c0:	20000104 	.word	0x20000104
 80011c4:	0800524c 	.word	0x0800524c
 80011c8:	08005268 	.word	0x08005268
 80011cc:	08005284 	.word	0x08005284
 80011d0:	08005298 	.word	0x08005298
 80011d4:	080052dc 	.word	0x080052dc
 80011d8:	08005328 	.word	0x08005328
 80011dc:	08005344 	.word	0x08005344
 80011e0:	08005358 	.word	0x08005358
 80011e4:	08005370 	.word	0x08005370
 80011e8:	08005388 	.word	0x08005388
 80011ec:	0800539c 	.word	0x0800539c
 80011f0:	080053b0 	.word	0x080053b0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80011f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d105      	bne.n	8001208 <printRadioSettings+0x364>
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	49d7      	ldr	r1, [pc, #860]	; (8001560 <printRadioSettings+0x6bc>)
 8001202:	4618      	mov	r0, r3
 8001204:	f003 fb9c 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ffe7 	bl	80001e0 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	b29a      	uxth	r2, r3
 8001216:	f107 0108 	add.w	r1, r7, #8
 800121a:	230a      	movs	r3, #10
 800121c:	48d1      	ldr	r0, [pc, #836]	; (8001564 <printRadioSettings+0x6c0>)
 800121e:	f002 ffda 	bl	80041d6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001222:	463b      	mov	r3, r7
 8001224:	2205      	movs	r2, #5
 8001226:	4619      	mov	r1, r3
 8001228:	200a      	movs	r0, #10
 800122a:	f7ff fa3d 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800122e:	793b      	ldrb	r3, [r7, #4]
 8001230:	461c      	mov	r4, r3
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	461d      	mov	r5, r3
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	787a      	ldrb	r2, [r7, #1]
 800123a:	7839      	ldrb	r1, [r7, #0]
 800123c:	f107 0008 	add.w	r0, r7, #8
 8001240:	9102      	str	r1, [sp, #8]
 8001242:	9201      	str	r2, [sp, #4]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	462b      	mov	r3, r5
 8001248:	4622      	mov	r2, r4
 800124a:	49c7      	ldr	r1, [pc, #796]	; (8001568 <printRadioSettings+0x6c4>)
 800124c:	f003 fb78 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ffc3 	bl	80001e0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f107 0108 	add.w	r1, r7, #8
 8001262:	230a      	movs	r3, #10
 8001264:	48bf      	ldr	r0, [pc, #764]	; (8001564 <printRadioSettings+0x6c0>)
 8001266:	f002 ffb6 	bl	80041d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800126a:	463b      	mov	r3, r7
 800126c:	2205      	movs	r2, #5
 800126e:	4619      	mov	r1, r3
 8001270:	200b      	movs	r0, #11
 8001272:	f7ff fa19 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001276:	793b      	ldrb	r3, [r7, #4]
 8001278:	461c      	mov	r4, r3
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	461d      	mov	r5, r3
 800127e:	78bb      	ldrb	r3, [r7, #2]
 8001280:	787a      	ldrb	r2, [r7, #1]
 8001282:	7839      	ldrb	r1, [r7, #0]
 8001284:	f107 0008 	add.w	r0, r7, #8
 8001288:	9102      	str	r1, [sp, #8]
 800128a:	9201      	str	r2, [sp, #4]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	462b      	mov	r3, r5
 8001290:	4622      	mov	r2, r4
 8001292:	49b6      	ldr	r1, [pc, #728]	; (800156c <printRadioSettings+0x6c8>)
 8001294:	f003 fb54 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ff9f 	bl	80001e0 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	230a      	movs	r3, #10
 80012ac:	48ad      	ldr	r0, [pc, #692]	; (8001564 <printRadioSettings+0x6c0>)
 80012ae:	f002 ff92 	bl	80041d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80012b2:	463b      	mov	r3, r7
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	200c      	movs	r0, #12
 80012ba:	f7ff f9f5 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012be:	783b      	ldrb	r3, [r7, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	49aa      	ldr	r1, [pc, #680]	; (8001570 <printRadioSettings+0x6cc>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fb39 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7fe ff84 	bl	80001e0 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f107 0108 	add.w	r1, r7, #8
 80012e0:	230a      	movs	r3, #10
 80012e2:	48a0      	ldr	r0, [pc, #640]	; (8001564 <printRadioSettings+0x6c0>)
 80012e4:	f002 ff77 	bl	80041d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80012e8:	463b      	mov	r3, r7
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	200d      	movs	r0, #13
 80012f0:	f7ff f9da 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012f4:	783b      	ldrb	r3, [r7, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	499d      	ldr	r1, [pc, #628]	; (8001574 <printRadioSettings+0x6d0>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fb1e 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff69 	bl	80001e0 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f107 0108 	add.w	r1, r7, #8
 8001316:	230a      	movs	r3, #10
 8001318:	4892      	ldr	r0, [pc, #584]	; (8001564 <printRadioSettings+0x6c0>)
 800131a:	f002 ff5c 	bl	80041d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800131e:	463b      	mov	r3, r7
 8001320:	2201      	movs	r2, #1
 8001322:	4619      	mov	r1, r3
 8001324:	200e      	movs	r0, #14
 8001326:	f7ff f9bf 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800132a:	783b      	ldrb	r3, [r7, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4991      	ldr	r1, [pc, #580]	; (8001578 <printRadioSettings+0x6d4>)
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fb03 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ff4e 	bl	80001e0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f107 0108 	add.w	r1, r7, #8
 800134c:	230a      	movs	r3, #10
 800134e:	4885      	ldr	r0, [pc, #532]	; (8001564 <printRadioSettings+0x6c0>)
 8001350:	f002 ff41 	bl	80041d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001354:	463b      	mov	r3, r7
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	200f      	movs	r0, #15
 800135c:	f7ff f9a4 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001360:	783b      	ldrb	r3, [r7, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4984      	ldr	r1, [pc, #528]	; (800157c <printRadioSettings+0x6d8>)
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fae8 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ff33 	bl	80001e0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f107 0108 	add.w	r1, r7, #8
 8001382:	230a      	movs	r3, #10
 8001384:	4877      	ldr	r0, [pc, #476]	; (8001564 <printRadioSettings+0x6c0>)
 8001386:	f002 ff26 	bl	80041d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800138a:	463b      	mov	r3, r7
 800138c:	2205      	movs	r2, #5
 800138e:	4619      	mov	r1, r3
 8001390:	2010      	movs	r0, #16
 8001392:	f7ff f989 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	461c      	mov	r4, r3
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	461d      	mov	r5, r3
 800139e:	78bb      	ldrb	r3, [r7, #2]
 80013a0:	787a      	ldrb	r2, [r7, #1]
 80013a2:	7839      	ldrb	r1, [r7, #0]
 80013a4:	f107 0008 	add.w	r0, r7, #8
 80013a8:	9102      	str	r1, [sp, #8]
 80013aa:	9201      	str	r2, [sp, #4]
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	462b      	mov	r3, r5
 80013b0:	4622      	mov	r2, r4
 80013b2:	4973      	ldr	r1, [pc, #460]	; (8001580 <printRadioSettings+0x6dc>)
 80013b4:	f003 fac4 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff0f 	bl	80001e0 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f107 0108 	add.w	r1, r7, #8
 80013ca:	230a      	movs	r3, #10
 80013cc:	4865      	ldr	r0, [pc, #404]	; (8001564 <printRadioSettings+0x6c0>)
 80013ce:	f002 ff02 	bl	80041d6 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80013d2:	2011      	movs	r0, #17
 80013d4:	f7ff f940 	bl	8000658 <NRF24_read_register>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4966      	ldr	r1, [pc, #408]	; (8001584 <printRadioSettings+0x6e0>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 faa7 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe fef2 	bl	80001e0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f107 0108 	add.w	r1, r7, #8
 8001404:	230a      	movs	r3, #10
 8001406:	4857      	ldr	r0, [pc, #348]	; (8001564 <printRadioSettings+0x6c0>)
 8001408:	f002 fee5 	bl	80041d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800140c:	2012      	movs	r0, #18
 800140e:	f7ff f923 	bl	8000658 <NRF24_read_register>
 8001412:	4603      	mov	r3, r0
 8001414:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001418:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800141c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4958      	ldr	r1, [pc, #352]	; (8001588 <printRadioSettings+0x6e4>)
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fa8a 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe fed5 	bl	80001e0 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	f107 0108 	add.w	r1, r7, #8
 800143e:	230a      	movs	r3, #10
 8001440:	4848      	ldr	r0, [pc, #288]	; (8001564 <printRadioSettings+0x6c0>)
 8001442:	f002 fec8 	bl	80041d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001446:	2013      	movs	r0, #19
 8001448:	f7ff f906 	bl	8000658 <NRF24_read_register>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001452:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	494b      	ldr	r1, [pc, #300]	; (800158c <printRadioSettings+0x6e8>)
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fa6d 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe feb8 	bl	80001e0 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f107 0108 	add.w	r1, r7, #8
 8001478:	230a      	movs	r3, #10
 800147a:	483a      	ldr	r0, [pc, #232]	; (8001564 <printRadioSettings+0x6c0>)
 800147c:	f002 feab 	bl	80041d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001480:	2014      	movs	r0, #20
 8001482:	f7ff f8e9 	bl	8000658 <NRF24_read_register>
 8001486:	4603      	mov	r3, r0
 8001488:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800148c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001490:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	493d      	ldr	r1, [pc, #244]	; (8001590 <printRadioSettings+0x6ec>)
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fa50 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fe9b 	bl	80001e0 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f107 0108 	add.w	r1, r7, #8
 80014b2:	230a      	movs	r3, #10
 80014b4:	482b      	ldr	r0, [pc, #172]	; (8001564 <printRadioSettings+0x6c0>)
 80014b6:	f002 fe8e 	bl	80041d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80014ba:	2015      	movs	r0, #21
 80014bc:	f7ff f8cc 	bl	8000658 <NRF24_read_register>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4930      	ldr	r1, [pc, #192]	; (8001594 <printRadioSettings+0x6f0>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fa33 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe7e 	bl	80001e0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f107 0108 	add.w	r1, r7, #8
 80014ec:	230a      	movs	r3, #10
 80014ee:	481d      	ldr	r0, [pc, #116]	; (8001564 <printRadioSettings+0x6c0>)
 80014f0:	f002 fe71 	bl	80041d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80014f4:	2016      	movs	r0, #22
 80014f6:	f7ff f8af 	bl	8000658 <NRF24_read_register>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001500:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001504:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4922      	ldr	r1, [pc, #136]	; (8001598 <printRadioSettings+0x6f4>)
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fa16 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe61 	bl	80001e0 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	f107 0108 	add.w	r1, r7, #8
 8001526:	230a      	movs	r3, #10
 8001528:	480e      	ldr	r0, [pc, #56]	; (8001564 <printRadioSettings+0x6c0>)
 800152a:	f002 fe54 	bl	80041d6 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800152e:	201c      	movs	r0, #28
 8001530:	f7ff f892 	bl	8000658 <NRF24_read_register>
 8001534:	4603      	mov	r3, r0
 8001536:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800153a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800153e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001542:	2b00      	cmp	r3, #0
 8001544:	bfcc      	ite	gt
 8001546:	2301      	movgt	r3, #1
 8001548:	2300      	movle	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800154e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001552:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001556:	2b00      	cmp	r3, #0
 8001558:	bfcc      	ite	gt
 800155a:	2301      	movgt	r3, #1
 800155c:	2300      	movle	r3, #0
 800155e:	e01d      	b.n	800159c <printRadioSettings+0x6f8>
 8001560:	080053c4 	.word	0x080053c4
 8001564:	20000104 	.word	0x20000104
 8001568:	080053d8 	.word	0x080053d8
 800156c:	08005408 	.word	0x08005408
 8001570:	08005438 	.word	0x08005438
 8001574:	08005460 	.word	0x08005460
 8001578:	08005488 	.word	0x08005488
 800157c:	080054b0 	.word	0x080054b0
 8001580:	080054d8 	.word	0x080054d8
 8001584:	08005504 	.word	0x08005504
 8001588:	08005520 	.word	0x08005520
 800158c:	0800553c 	.word	0x0800553c
 8001590:	08005558 	.word	0x08005558
 8001594:	08005574 	.word	0x08005574
 8001598:	08005590 	.word	0x08005590
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015a4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bfcc      	ite	gt
 80015ac:	2301      	movgt	r3, #1
 80015ae:	2300      	movle	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bfcc      	ite	gt
 80015c0:	2301      	movgt	r3, #1
 80015c2:	2300      	movle	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015cc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bfcc      	ite	gt
 80015d4:	2301      	movgt	r3, #1
 80015d6:	2300      	movle	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bfcc      	ite	gt
 80015e8:	2301      	movgt	r3, #1
 80015ea:	2300      	movle	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f107 0008 	add.w	r0, r7, #8
 80015f2:	9303      	str	r3, [sp, #12]
 80015f4:	9402      	str	r4, [sp, #8]
 80015f6:	9101      	str	r1, [sp, #4]
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	4633      	mov	r3, r6
 80015fc:	462a      	mov	r2, r5
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <printRadioSettings+0x834>)
 8001600:	f003 f99e 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe fde9 	bl	80001e0 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	f107 0108 	add.w	r1, r7, #8
 8001616:	230a      	movs	r3, #10
 8001618:	4830      	ldr	r0, [pc, #192]	; (80016dc <printRadioSettings+0x838>)
 800161a:	f002 fddc 	bl	80041d6 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800161e:	201d      	movs	r0, #29
 8001620:	f7ff f81a 	bl	8000658 <NRF24_read_register>
 8001624:	4603      	mov	r3, r0
 8001626:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800162a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <printRadioSettings+0x7a0>
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4929      	ldr	r1, [pc, #164]	; (80016e0 <printRadioSettings+0x83c>)
 800163c:	4618      	mov	r0, r3
 800163e:	f003 f97f 	bl	8004940 <siprintf>
 8001642:	e005      	b.n	8001650 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4926      	ldr	r1, [pc, #152]	; (80016e4 <printRadioSettings+0x840>)
 800164a:	4618      	mov	r0, r3
 800164c:	f003 f978 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fdc3 	bl	80001e0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	230a      	movs	r3, #10
 8001664:	481d      	ldr	r0, [pc, #116]	; (80016dc <printRadioSettings+0x838>)
 8001666:	f002 fdb6 	bl	80041d6 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800166a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <printRadioSettings+0x7e0>
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	491b      	ldr	r1, [pc, #108]	; (80016e8 <printRadioSettings+0x844>)
 800167c:	4618      	mov	r0, r3
 800167e:	f003 f95f 	bl	8004940 <siprintf>
 8001682:	e005      	b.n	8001690 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4918      	ldr	r1, [pc, #96]	; (80016ec <printRadioSettings+0x848>)
 800168a:	4618      	mov	r0, r3
 800168c:	f003 f958 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fda3 	bl	80001e0 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	f107 0108 	add.w	r1, r7, #8
 80016a2:	230a      	movs	r3, #10
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <printRadioSettings+0x838>)
 80016a6:	f002 fd96 	bl	80041d6 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4910      	ldr	r1, [pc, #64]	; (80016f0 <printRadioSettings+0x84c>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 f945 	bl	8004940 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fd90 	bl	80001e0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f107 0108 	add.w	r1, r7, #8
 80016c8:	230a      	movs	r3, #10
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <printRadioSettings+0x838>)
 80016cc:	f002 fd83 	bl	80041d6 <HAL_UART_Transmit>
}
 80016d0:	bf00      	nop
 80016d2:	3774      	adds	r7, #116	; 0x74
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	080055ac 	.word	0x080055ac
 80016dc:	20000104 	.word	0x20000104
 80016e0:	080055f8 	.word	0x080055f8
 80016e4:	08005610 	.word	0x08005610
 80016e8:	08005628 	.word	0x08005628
 80016ec:	08005644 	.word	0x08005644
 80016f0:	08005218 	.word	0x08005218

080016f4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80016f4:	b084      	sub	sp, #16
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	f107 0c08 	add.w	ip, r7, #8
 80016fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <nrf24_DebugUART_Init+0x2c>)
 8001704:	4618      	mov	r0, r3
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2244      	movs	r2, #68	; 0x44
 800170c:	4619      	mov	r1, r3
 800170e:	f003 f901 	bl	8004914 <memcpy>
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800171a:	b004      	add	sp, #16
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000104 	.word	0x20000104

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001728:	f000 fbf2 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

   /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172c:	f000 f818 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001730:	f000 f932 	bl	8001998 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001734:	f000 f8d0 	bl	80018d8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001738:	f000 f904 	bl	8001944 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800173c:	f000 f87a 	bl	8001834 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  nrf_init();
 8001740:	f000 f9a8 	bl	8001a94 <nrf_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		send_DP_sensor_value_to_gateway();
 8001744:	f000 fb94 	bl	8001e70 <send_DP_sensor_value_to_gateway>
//		HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY();
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8001748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <main+0x38>)
 800174e:	f001 fada 	bl	8002d06 <HAL_GPIO_TogglePin>
		HAL_Delay(3000);
 8001752:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001756:	f000 fc4d 	bl	8001ff4 <HAL_Delay>
		send_DP_sensor_value_to_gateway();
 800175a:	e7f3      	b.n	8001744 <main+0x20>
 800175c:	40020800 	.word	0x40020800

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	; 0x50
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	2230      	movs	r2, #48	; 0x30
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f8de 	bl	8004930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <SystemClock_Config+0xcc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <SystemClock_Config+0xcc>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <SystemClock_Config+0xcc>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <SystemClock_Config+0xd0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <SystemClock_Config+0xd0>)
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <SystemClock_Config+0xd0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c8:	2310      	movs	r3, #16
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017cc:	2302      	movs	r3, #2
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d4:	2308      	movs	r3, #8
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017d8:	2348      	movs	r3, #72	; 0x48
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017dc:	2302      	movs	r3, #2
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 faa7 	bl	8002d3c <HAL_RCC_OscConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017f4:	f000 f948 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f8:	230f      	movs	r3, #15
 80017fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2102      	movs	r1, #2
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fd09 	bl	800322c <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001820:	f000 f932 	bl	8001a88 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	3750      	adds	r7, #80	; 0x50
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_ADC1_Init+0x98>)
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <MX_ADC1_Init+0x9c>)
 800184a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_ADC1_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <MX_ADC1_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_ADC1_Init+0x98>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_ADC1_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_ADC1_Init+0x98>)
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_ADC1_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_ADC1_Init+0x98>)
 8001874:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <MX_ADC1_Init+0xa0>)
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_ADC1_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_ADC1_Init+0x98>)
 8001880:	2201      	movs	r2, #1
 8001882:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_ADC1_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_ADC1_Init+0x98>)
 800188e:	2201      	movs	r2, #1
 8001890:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <MX_ADC1_Init+0x98>)
 8001894:	f000 fbd2 	bl	800203c <HAL_ADC_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 f8f3 	bl	8001a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <MX_ADC1_Init+0x98>)
 80018b4:	f000 fd86 	bl	80023c4 <HAL_ADC_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80018be:	f000 f8e3 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000148 	.word	0x20000148
 80018d0:	40012000 	.word	0x40012000
 80018d4:	0f000001 	.word	0x0f000001

080018d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_SPI2_Init+0x64>)
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <MX_SPI2_Init+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_SPI2_Init+0x64>)
 80018e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_SPI2_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_SPI2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_SPI2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_SPI2_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_SPI2_Init+0x64>)
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SPI2_Init+0x64>)
 800190c:	2220      	movs	r2, #32
 800190e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_SPI2_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SPI2_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_SPI2_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_SPI2_Init+0x64>)
 8001924:	220a      	movs	r2, #10
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_SPI2_Init+0x64>)
 800192a:	f001 fe5f 	bl	80035ec <HAL_SPI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001934:	f000 f8a8 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000190 	.word	0x20000190
 8001940:	40003800 	.word	0x40003800

08001944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <MX_USART2_UART_Init+0x50>)
 800194c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_USART2_UART_Init+0x4c>)
 800197c:	f002 fbde 	bl	800413c <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001986:	f000 f87f 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200001e8 	.word	0x200001e8
 8001994:	40004400 	.word	0x40004400

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b32      	ldr	r3, [pc, #200]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_GPIO_Init+0xe4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_GPIO_Init+0xe4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <MX_GPIO_Init+0xe4>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_GPIO_Init+0xe4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a24:	4816      	ldr	r0, [pc, #88]	; (8001a80 <MX_GPIO_Init+0xe8>)
 8001a26:	f001 f955 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_PIN_Pin|CE_PIN_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a30:	4814      	ldr	r0, [pc, #80]	; (8001a84 <MX_GPIO_Init+0xec>)
 8001a32:	f001 f94f 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8001a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_GPIO_Init+0xe8>)
 8001a50:	f000 ffbc 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_PIN_Pin CE_PIN_Pin */
  GPIO_InitStruct.Pin = CSN_PIN_Pin|CE_PIN_Pin;
 8001a54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_GPIO_Init+0xec>)
 8001a6e:	f000 ffad 	bl	80029cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020000 	.word	0x40020000

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>
	...

08001a94 <nrf_init>:
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
#define NRF_SPI_PORT hspi2

void nrf_init(void) {
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	b097      	sub	sp, #92	; 0x5c
 8001a98:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(CE_PIN_GPIO_Port, CSN_PIN_Pin, CE_PIN_Pin, NRF_SPI_PORT);
 8001a9a:	4c1c      	ldr	r4, [pc, #112]	; (8001b0c <nrf_init+0x78>)
 8001a9c:	4668      	mov	r0, sp
 8001a9e:	1d23      	adds	r3, r4, #4
 8001aa0:	2254      	movs	r2, #84	; 0x54
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f002 ff36 	bl	8004914 <memcpy>
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <nrf_init+0x7c>)
 8001ab4:	f7fe feaa 	bl	800080c <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001ab8:	4e16      	ldr	r6, [pc, #88]	; (8001b14 <nrf_init+0x80>)
 8001aba:	466d      	mov	r5, sp
 8001abc:	f106 0410 	add.w	r4, r6, #16
 8001ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	602b      	str	r3, [r5, #0]
 8001ad0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ad4:	f7ff fe0e 	bl	80016f4 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(true);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff f863 	bl	8000ba4 <NRF24_setAutoAck>
	NRF24_setChannel(node_channel_addr);
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <nrf_init+0x84>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f811 	bl	8000b0a <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001ae8:	2020      	movs	r0, #32
 8001aea:	f7ff f823 	bl	8000b34 <NRF24_setPayloadSize>
	NRF24_openWritingPipe(target_pipe_addr);
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <nrf_init+0x88>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7fe ffc8 	bl	8000a8c <NRF24_openWritingPipe>
	NRF24_stopListening();
 8001afc:	f7fe ff66 	bl	80009cc <NRF24_stopListening>
	printRadioSettings();
 8001b00:	f7ff f9d0 	bl	8000ea4 <printRadioSettings>
}
 8001b04:	bf00      	nop
 8001b06:	3704      	adds	r7, #4
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0c:	20000190 	.word	0x20000190
 8001b10:	40020000 	.word	0x40020000
 8001b14:	200001e8 	.word	0x200001e8
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000008 	.word	0x20000008

08001b20 <TRANSMITT_UPDATE_TO_GATEWAY>:
void Switch_to_Receiver_mode(void) {
	NRF24_openReadingPipe(1, node_pipe_addr);
	NRF24_setChannel(node_channel_addr);
	NRF24_startListening();
}
void TRANSMITT_UPDATE_TO_GATEWAY(char my_tx_data[]) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < +10; i++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e024      	b.n	8001b78 <TRANSMITT_UPDATE_TO_GATEWAY+0x58>
		if (!NRF24_write(my_tx_data, 32)) {
 8001b2e:	2120      	movs	r1, #32
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7fe ff57 	bl	80009e4 <NRF24_write>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <TRANSMITT_UPDATE_TO_GATEWAY+0x3e>
			NRF24_write(my_tx_data, 32);
 8001b42:	2120      	movs	r1, #32
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe ff4d 	bl	80009e4 <NRF24_write>
			HAL_UART_Transmit(&huart2,
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	2221      	movs	r2, #33	; 0x21
 8001b4e:	490e      	ldr	r1, [pc, #56]	; (8001b88 <TRANSMITT_UPDATE_TO_GATEWAY+0x68>)
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <TRANSMITT_UPDATE_TO_GATEWAY+0x6c>)
 8001b52:	f002 fb40 	bl	80041d6 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update waiting for ack\n",
					strlen("Transmitt_update waiting for ack\n"), 10);
			HAL_Delay(200);
 8001b56:	20c8      	movs	r0, #200	; 0xc8
 8001b58:	f000 fa4c 	bl	8001ff4 <HAL_Delay>
 8001b5c:	e009      	b.n	8001b72 <TRANSMITT_UPDATE_TO_GATEWAY+0x52>
		} else {
			HAL_UART_Transmit(&huart2,
 8001b5e:	230a      	movs	r3, #10
 8001b60:	222a      	movs	r2, #42	; 0x2a
 8001b62:	490b      	ldr	r1, [pc, #44]	; (8001b90 <TRANSMITT_UPDATE_TO_GATEWAY+0x70>)
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <TRANSMITT_UPDATE_TO_GATEWAY+0x6c>)
 8001b66:	f002 fb36 	bl	80041d6 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update Transmitted successfully\n",
					strlen("Transmitt_update Transmitted successfully\n"), 10);
			HAL_Delay(100);
 8001b6a:	2064      	movs	r0, #100	; 0x64
 8001b6c:	f000 fa42 	bl	8001ff4 <HAL_Delay>
			break;
 8001b70:	e006      	b.n	8001b80 <TRANSMITT_UPDATE_TO_GATEWAY+0x60>
	for (int i = 0; i < +10; i++) {
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	ddd7      	ble.n	8001b2e <TRANSMITT_UPDATE_TO_GATEWAY+0xe>
		}
	}
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	0800575c 	.word	0x0800575c
 8001b8c:	200001e8 	.word	0x200001e8
 8001b90:	08005780 	.word	0x08005780

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_ADC_MspInit+0x7c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d127      	bne.n	8001c56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_ADC_MspInit+0x80>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_ADC_MspInit+0x84>)
 8001c52:	f000 febb 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012000 	.word	0x40012000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_SPI_MspInit+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cc6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd8:	2305      	movs	r3, #5
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_SPI_MspInit+0x8c>)
 8001ce4:	f000 fe72 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40003800 	.word	0x40003800
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_UART_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d56:	230c      	movs	r3, #12
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d66:	2307      	movs	r3, #7
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d72:	f000 fe2b 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40004400 	.word	0x40004400
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <NMI_Handler+0x4>

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <MemManage_Handler+0x4>

08001d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler+0x4>

08001daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd8:	f000 f8ec 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f002 fd56 	bl	80048c0 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20010000 	.word	0x20010000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	2000022c 	.word	0x2000022c
 8001e48:	20000248 	.word	0x20000248

08001e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <SystemInit+0x20>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <SystemInit+0x20>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <send_DP_sensor_value_to_gateway>:
 */

#include "utilities.h"
extern ADC_HandleTypeDef hadc1;

void send_DP_sensor_value_to_gateway(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); //TAKE SAMPLE
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <send_DP_sensor_value_to_gateway+0x44>)
 8001e78:	f000 f924 	bl	80020c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001e7c:	2164      	movs	r1, #100	; 0x64
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <send_DP_sensor_value_to_gateway+0x44>)
 8001e80:	f000 fa07 	bl	8002292 <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001e84:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <send_DP_sensor_value_to_gateway+0x44>)
 8001e86:	f000 fa8f 	bl	80023a8 <HAL_ADC_GetValue>
 8001e8a:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_ADC_Stop(&hadc1);
 8001e8c:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <send_DP_sensor_value_to_gateway+0x44>)
 8001e8e:	f000 f9cd 	bl	800222c <HAL_ADC_Stop>

	char adc_str[32]; //UINT32_T TO CHAR ARRAY CONVERSION
	sprintf(adc_str, "%lu", adc_val);
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <send_DP_sensor_value_to_gateway+0x48>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fd51 	bl	8004940 <siprintf>
	adc_str[6] = '\r';
 8001e9e:	230d      	movs	r3, #13
 8001ea0:	72bb      	strb	r3, [r7, #10]
	TRANSMITT_UPDATE_TO_GATEWAY(adc_str); //TRANSMITT MESSAGE TO GATEWAY
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fe3b 	bl	8001b20 <TRANSMITT_UPDATE_TO_GATEWAY>
}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	; 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000148 	.word	0x20000148
 8001eb8:	080057ac 	.word	0x080057ac

08001ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec2:	490e      	ldr	r1, [pc, #56]	; (8001efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed8:	4c0b      	ldr	r4, [pc, #44]	; (8001f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ee6:	f7ff ffb1 	bl	8001e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eea:	f002 fcef 	bl	80048cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eee:	f7ff fc19 	bl	8001724 <main>
  bx  lr    
 8001ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f00:	0800580c 	.word	0x0800580c
  ldr r2, =_sbss
 8001f04:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f08:	20000244 	.word	0x20000244

08001f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <HAL_Init+0x40>)
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_Init+0x40>)
 8001f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_Init+0x40>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f000 fd13 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3e:	200f      	movs	r0, #15
 8001f40:	f000 f808 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f44:	f7ff fe26 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023c00 	.word	0x40023c00

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x54>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x58>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fd1d 	bl	80029b2 <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00e      	b.n	8001fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0f      	cmp	r3, #15
 8001f86:	d80a      	bhi.n	8001f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f000 fcf3 	bl	800297a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f94:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HAL_InitTick+0x5c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000010 	.word	0x20000010
 8001fac:	20000018 	.word	0x20000018
 8001fb0:	20000014 	.word	0x20000014

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000018 	.word	0x20000018
 8001fd8:	20000230 	.word	0x20000230

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000230 	.word	0x20000230

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffde 	bl	8001fdc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000018 	.word	0x20000018

0800203c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e033      	b.n	80020ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fdc2 	bl	8001be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002082:	f023 0302 	bic.w	r3, r3, #2
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 faba 	bl	8002608 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
 80020aa:	e001      	b.n	80020b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_ADC_Start+0x1a>
 80020da:	2302      	movs	r3, #2
 80020dc:	e097      	b.n	800220e <HAL_ADC_Start+0x14a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d018      	beq.n	8002126 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002104:	4b45      	ldr	r3, [pc, #276]	; (800221c <HAL_ADC_Start+0x158>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a45      	ldr	r2, [pc, #276]	; (8002220 <HAL_ADC_Start+0x15c>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0c9a      	lsrs	r2, r3, #18
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002118:	e002      	b.n	8002120 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d15f      	bne.n	80021f4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	d106      	bne.n	8002182 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f023 0206 	bic.w	r2, r3, #6
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
 8002180:	e002      	b.n	8002188 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_ADC_Start+0x160>)
 8002192:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800219c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10f      	bne.n	80021ca <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d129      	bne.n	800220c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e020      	b.n	800220c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_ADC_Start+0x164>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d11b      	bne.n	800220c <HAL_ADC_Start+0x148>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d114      	bne.n	800220c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	e00b      	b.n	800220c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0210 	orr.w	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000010 	.word	0x20000010
 8002220:	431bde83 	.word	0x431bde83
 8002224:	40012300 	.word	0x40012300
 8002228:	40012000 	.word	0x40012000

0800222c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Stop+0x16>
 800223e:	2302      	movs	r3, #2
 8002240:	e021      	b.n	8002286 <HAL_ADC_Stop+0x5a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ae:	d113      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022be:	d10b      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e063      	b.n	80023a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80022d8:	f7ff fe80 	bl	8001fdc <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022de:	e021      	b.n	8002324 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e6:	d01d      	beq.n	8002324 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_ADC_PollForConversion+0x6c>
 80022ee:	f7ff fe75 	bl	8001fdc <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d212      	bcs.n	8002324 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b02      	cmp	r3, #2
 800230a:	d00b      	beq.n	8002324 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f043 0204 	orr.w	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e03d      	b.n	80023a0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d1d6      	bne.n	80022e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f06f 0212 	mvn.w	r2, #18
 800233a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d123      	bne.n	800239e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11f      	bne.n	800239e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d111      	bne.n	800239e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1c>
 80023dc:	2302      	movs	r3, #2
 80023de:	e105      	b.n	80025ec <HAL_ADC_ConfigChannel+0x228>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b09      	cmp	r3, #9
 80023ee:	d925      	bls.n	800243c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	3b1e      	subs	r3, #30
 8002406:	2207      	movs	r2, #7
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43da      	mvns	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	400a      	ands	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68d9      	ldr	r1, [r3, #12]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	4603      	mov	r3, r0
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4403      	add	r3, r0
 800242e:	3b1e      	subs	r3, #30
 8002430:	409a      	lsls	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	e022      	b.n	8002482 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	2207      	movs	r2, #7
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	400a      	ands	r2, r1
 800245e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	4603      	mov	r3, r0
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4403      	add	r3, r0
 8002478:	409a      	lsls	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d824      	bhi.n	80024d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	3b05      	subs	r3, #5
 800249c:	221f      	movs	r2, #31
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4618      	mov	r0, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	3b05      	subs	r3, #5
 80024c6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34
 80024d2:	e04c      	b.n	800256e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d824      	bhi.n	8002526 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	3b23      	subs	r3, #35	; 0x23
 80024ee:	221f      	movs	r2, #31
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43da      	mvns	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	400a      	ands	r2, r1
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	3b23      	subs	r3, #35	; 0x23
 8002518:	fa00 f203 	lsl.w	r2, r0, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
 8002524:	e023      	b.n	800256e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	3b41      	subs	r3, #65	; 0x41
 8002538:	221f      	movs	r2, #31
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	400a      	ands	r2, r1
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	3b41      	subs	r3, #65	; 0x41
 8002562:	fa00 f203 	lsl.w	r2, r0, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_ADC_ConfigChannel+0x234>)
 8002570:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a21      	ldr	r2, [pc, #132]	; (80025fc <HAL_ADC_ConfigChannel+0x238>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d109      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1cc>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b12      	cmp	r3, #18
 8002582:	d105      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_ADC_ConfigChannel+0x238>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d123      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x21e>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d003      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x1e6>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b11      	cmp	r3, #17
 80025a8:	d11b      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d111      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_ADC_ConfigChannel+0x23c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_ADC_ConfigChannel+0x240>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	0c9a      	lsrs	r2, r3, #18
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025d4:	e002      	b.n	80025dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f9      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40012300 	.word	0x40012300
 80025fc:	40012000 	.word	0x40012000
 8002600:	20000010 	.word	0x20000010
 8002604:	431bde83 	.word	0x431bde83

08002608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <ADC_Init+0x1f0>)
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	021a      	lsls	r2, r3, #8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6899      	ldr	r1, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	4a58      	ldr	r2, [pc, #352]	; (80027fc <ADC_Init+0x1f4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d022      	beq.n	80026e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	e00f      	b.n	8002706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002704:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0202 	bic.w	r2, r2, #2
 8002714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6899      	ldr	r1, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
 8002720:	005a      	lsls	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01b      	beq.n	800276c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002742:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	3b01      	subs	r3, #1
 8002760:	035a      	lsls	r2, r3, #13
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	e007      	b.n	800277c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	3b01      	subs	r3, #1
 8002798:	051a      	lsls	r2, r3, #20
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027be:	025a      	lsls	r2, r3, #9
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	029a      	lsls	r2, r3, #10
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40012300 	.word	0x40012300
 80027fc:	0f000001 	.word	0x0f000001

08002800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff8e 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff47 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298c:	f7ff ff5c 	bl	8002848 <__NVIC_GetPriorityGrouping>
 8002990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff8e 	bl	80028b8 <NVIC_EncodePriority>
 800299c:	4602      	mov	r2, r0
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff5d 	bl	8002864 <__NVIC_SetPriority>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffb0 	bl	8002920 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e159      	b.n	8002c9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 8148 	bne.w	8002c96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d017      	beq.n	8002abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a2 	beq.w	8002c96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_GPIO_Init+0x2e8>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6e:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_GPIO_Init+0x2ec>)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_GPIO_Init+0x2f0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d019      	beq.n	8002bce <HAL_GPIO_Init+0x202>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_GPIO_Init+0x2f4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x1fe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_GPIO_Init+0x2f8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x1fa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_GPIO_Init+0x2fc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x1f6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a45      	ldr	r2, [pc, #276]	; (8002ccc <HAL_GPIO_Init+0x300>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x1f2>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e008      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bbe:	2307      	movs	r3, #7
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e004      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_GPIO_Init+0x204>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f002 0203 	and.w	r2, r2, #3
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	4093      	lsls	r3, r2
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be0:	4935      	ldr	r1, [pc, #212]	; (8002cb8 <HAL_GPIO_Init+0x2ec>)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3302      	adds	r3, #2
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bee:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c12:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c3c:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	f67f aea2 	bls.w	80029e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40020800 	.word	0x40020800
 8002cc8:	40020c00 	.word	0x40020c00
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce4:	787b      	ldrb	r3, [r7, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf0:	e003      	b.n	8002cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	619a      	str	r2, [r3, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	400b      	ands	r3, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e267      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d075      	beq.n	8002e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5a:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d00c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d66:	4b85      	ldr	r3, [pc, #532]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d112      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d72:	4b82      	ldr	r3, [pc, #520]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	4b7e      	ldr	r3, [pc, #504]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05b      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d157      	bne.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e242      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x74>
 8002da2:	4b76      	ldr	r3, [pc, #472]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x98>
 8002dba:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6f      	ldr	r2, [pc, #444]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6c      	ldr	r2, [pc, #432]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002dd4:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a68      	ldr	r2, [pc, #416]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a65      	ldr	r2, [pc, #404]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7ff f8f2 	bl	8001fdc <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f8ee 	bl	8001fdc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e207      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f8de 	bl	8001fdc <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e24:	f7ff f8da 	bl	8001fdc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1f3      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e52:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d11c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6a:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x152>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e1c7      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4937      	ldr	r1, [pc, #220]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	e03a      	b.n	8002f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eac:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <HAL_RCC_OscConfig+0x244>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7ff f893 	bl	8001fdc <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eba:	f7ff f88f 	bl	8001fdc <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e1a8      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed8:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4925      	ldr	r1, [pc, #148]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_RCC_OscConfig+0x244>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f872 	bl	8001fdc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efc:	f7ff f86e 	bl	8001fdc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e187      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d036      	beq.n	8002f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_RCC_OscConfig+0x248>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7ff f852 	bl	8001fdc <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7ff f84e 	bl	8001fdc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e167      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x200>
 8002f5a:	e01b      	b.n	8002f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_RCC_OscConfig+0x248>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7ff f83b 	bl	8001fdc <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	e00e      	b.n	8002f88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7ff f837 	bl	8001fdc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d907      	bls.n	8002f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e150      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	42470000 	.word	0x42470000
 8002f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	4b88      	ldr	r3, [pc, #544]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ea      	bne.n	8002f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8097 	beq.w	80030d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa6:	4b81      	ldr	r3, [pc, #516]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b7d      	ldr	r3, [pc, #500]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a7c      	ldr	r2, [pc, #496]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc2:	4b7a      	ldr	r3, [pc, #488]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d118      	bne.n	8003010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b74      	ldr	r3, [pc, #464]	; (80031b0 <HAL_RCC_OscConfig+0x474>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a73      	ldr	r2, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x474>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fff7 	bl	8001fdc <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fe fff3 	bl	8001fdc <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e10c      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x474>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x2ea>
 8003018:	4b64      	ldr	r3, [pc, #400]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6713      	str	r3, [r2, #112]	; 0x70
 8003024:	e01c      	b.n	8003060 <HAL_RCC_OscConfig+0x324>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b05      	cmp	r3, #5
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x30c>
 800302e:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a5e      	ldr	r2, [pc, #376]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a5b      	ldr	r2, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0x324>
 8003048:	4b58      	ldr	r3, [pc, #352]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a57      	ldr	r2, [pc, #348]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	4b55      	ldr	r3, [pc, #340]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a54      	ldr	r2, [pc, #336]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe ffb8 	bl	8001fdc <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe ffb4 	bl	8001fdc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0cb      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003086:	4b49      	ldr	r3, [pc, #292]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0ee      	beq.n	8003070 <HAL_RCC_OscConfig+0x334>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe ffa2 	bl	8001fdc <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe ff9e 	bl	8001fdc <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0b5      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ee      	bne.n	800309c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	4a38      	ldr	r2, [pc, #224]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a1 	beq.w	800321c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d05c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d141      	bne.n	8003172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_RCC_OscConfig+0x478>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe ff72 	bl	8001fdc <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe ff6e 	bl	8001fdc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e087      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	3b01      	subs	r3, #1
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	491b      	ldr	r1, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x478>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314a:	f7fe ff47 	bl	8001fdc <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003152:	f7fe ff43 	bl	8001fdc <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e05c      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x416>
 8003170:	e054      	b.n	800321c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_RCC_OscConfig+0x478>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe ff30 	bl	8001fdc <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe ff2c 	bl	8001fdc <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e045      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCC_OscConfig+0x470>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x444>
 800319e:	e03d      	b.n	800321c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e038      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40007000 	.word	0x40007000
 80031b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x4ec>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d028      	beq.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d121      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d11a      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d111      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	3b01      	subs	r3, #1
 8003202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0cc      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b68      	ldr	r3, [pc, #416]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d90c      	bls.n	8003268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0b8      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003280:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800328a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	494d      	ldr	r1, [pc, #308]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d044      	beq.n	800334c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d119      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e067      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4934      	ldr	r1, [pc, #208]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800331c:	f7fe fe5e 	bl	8001fdc <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fe fe5a 	bl	8001fdc <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e04f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 020c 	and.w	r2, r3, #12
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800334c:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d20c      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e032      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4916      	ldr	r1, [pc, #88]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490e      	ldr	r1, [pc, #56]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b2:	f000 f821 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490a      	ldr	r1, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fdbe 	bl	8001f54 <HAL_InitTick>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023c00 	.word	0x40023c00
 80033e8:	40023800 	.word	0x40023800
 80033ec:	080057b0 	.word	0x080057b0
 80033f0:	20000010 	.word	0x20000010
 80033f4:	20000014 	.word	0x20000014

080033f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b090      	sub	sp, #64	; 0x40
 80033fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
 8003404:	2300      	movs	r3, #0
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003408:	2300      	movs	r3, #0
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d00d      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x40>
 800341c:	2b08      	cmp	r3, #8
 800341e:	f200 80a1 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x16c>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x34>
 8003426:	2b04      	cmp	r3, #4
 8003428:	d003      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x3a>
 800342a:	e09b      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_GetSysClockFreq+0x184>)
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003430:	e09b      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003432:	4b53      	ldr	r3, [pc, #332]	; (8003580 <HAL_RCC_GetSysClockFreq+0x188>)
 8003434:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003436:	e098      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003438:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003442:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d028      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344e:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	2200      	movs	r2, #0
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	627a      	str	r2, [r7, #36]	; 0x24
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003460:	2100      	movs	r1, #0
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCC_GetSysClockFreq+0x188>)
 8003464:	fb03 f201 	mul.w	r2, r3, r1
 8003468:	2300      	movs	r3, #0
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	4413      	add	r3, r2
 8003470:	4a43      	ldr	r2, [pc, #268]	; (8003580 <HAL_RCC_GetSysClockFreq+0x188>)
 8003472:	fba0 1202 	umull	r1, r2, r0, r2
 8003476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003478:	460a      	mov	r2, r1
 800347a:	62ba      	str	r2, [r7, #40]	; 0x28
 800347c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800347e:	4413      	add	r3, r2
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003484:	2200      	movs	r2, #0
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	61fa      	str	r2, [r7, #28]
 800348a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003492:	f7fc fefd 	bl	8000290 <__aeabi_uldivmod>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4613      	mov	r3, r2
 800349c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349e:	e053      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	2200      	movs	r2, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	617a      	str	r2, [r7, #20]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034b2:	f04f 0b00 	mov.w	fp, #0
 80034b6:	4652      	mov	r2, sl
 80034b8:	465b      	mov	r3, fp
 80034ba:	f04f 0000 	mov.w	r0, #0
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	0159      	lsls	r1, r3, #5
 80034c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c8:	0150      	lsls	r0, r2, #5
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	ebb2 080a 	subs.w	r8, r2, sl
 80034d2:	eb63 090b 	sbc.w	r9, r3, fp
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ea:	ebb2 0408 	subs.w	r4, r2, r8
 80034ee:	eb63 0509 	sbc.w	r5, r3, r9
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	00eb      	lsls	r3, r5, #3
 80034fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003500:	00e2      	lsls	r2, r4, #3
 8003502:	4614      	mov	r4, r2
 8003504:	461d      	mov	r5, r3
 8003506:	eb14 030a 	adds.w	r3, r4, sl
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	eb45 030b 	adc.w	r3, r5, fp
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	2200      	movs	r2, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	60fa      	str	r2, [r7, #12]
 8003538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800353c:	f7fc fea8 	bl	8000290 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetSysClockFreq+0x184>)
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800356c:	4618      	mov	r0, r3
 800356e:	3740      	adds	r7, #64	; 0x40
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	017d7840 	.word	0x017d7840

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <HAL_RCC_GetHCLKFreq+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000010 	.word	0x20000010

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff0 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0a9b      	lsrs	r3, r3, #10
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	080057c0 	.word	0x080057c0

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffdc 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0b5b      	lsrs	r3, r3, #13
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	080057c0 	.word	0x080057c0

080035ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07b      	b.n	80036f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360e:	d009      	beq.n	8003624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
 8003616:	e005      	b.n	8003624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fb14 	bl	8001c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	ea42 0103 	orr.w	r1, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	f003 0104 	and.w	r1, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0210 	and.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_SPI_Transmit+0x22>
 800371c:	2302      	movs	r3, #2
 800371e:	e126      	b.n	800396e <HAL_SPI_Transmit+0x270>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003728:	f7fe fc58 	bl	8001fdc <HAL_GetTick>
 800372c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003742:	e10b      	b.n	800395c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Transmit+0x52>
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003754:	e102      	b.n	800395c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2203      	movs	r2, #3
 800375a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379c:	d10f      	bne.n	80037be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d007      	beq.n	80037dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e4:	d14b      	bne.n	800387e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0xf6>
 80037ee:	8afb      	ldrh	r3, [r7, #22]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d13e      	bne.n	8003872 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003818:	e02b      	b.n	8003872 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b02      	cmp	r3, #2
 8003826:	d112      	bne.n	800384e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	1c9a      	adds	r2, r3, #2
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	86da      	strh	r2, [r3, #54]	; 0x36
 800384c:	e011      	b.n	8003872 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384e:	f7fe fbc5 	bl	8001fdc <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d803      	bhi.n	8003866 <HAL_SPI_Transmit+0x168>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d102      	bne.n	800386c <HAL_SPI_Transmit+0x16e>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003870:	e074      	b.n	800395c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ce      	bne.n	800381a <HAL_SPI_Transmit+0x11c>
 800387c:	e04c      	b.n	8003918 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_SPI_Transmit+0x18e>
 8003886:	8afb      	ldrh	r3, [r7, #22]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d140      	bne.n	800390e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038b2:	e02c      	b.n	800390e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d113      	bne.n	80038ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80038e8:	e011      	b.n	800390e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ea:	f7fe fb77 	bl	8001fdc <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d803      	bhi.n	8003902 <HAL_SPI_Transmit+0x204>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d102      	bne.n	8003908 <HAL_SPI_Transmit+0x20a>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800390c:	e026      	b.n	800395c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1cd      	bne.n	80038b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fbcb 	bl	80040b8 <SPI_EndRxTxTransaction>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e000      	b.n	800395c <HAL_SPI_Transmit+0x25e>
  }

error:
 800395a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800396c:	7ffb      	ldrb	r3, [r7, #31]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b088      	sub	sp, #32
 800397a:	af02      	add	r7, sp, #8
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003992:	d112      	bne.n	80039ba <HAL_SPI_Receive+0x44>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10e      	bne.n	80039ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2204      	movs	r2, #4
 80039a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f8f1 	bl	8003b98 <HAL_SPI_TransmitReceive>
 80039b6:	4603      	mov	r3, r0
 80039b8:	e0ea      	b.n	8003b90 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_SPI_Receive+0x52>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0e3      	b.n	8003b90 <HAL_SPI_Receive+0x21a>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039d0:	f7fe fb04 	bl	8001fdc <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d002      	beq.n	80039e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
 80039e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039e6:	e0ca      	b.n	8003b7e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_SPI_Receive+0x7e>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039f8:	e0c1      	b.n	8003b7e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2204      	movs	r2, #4
 80039fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a40:	d10f      	bne.n	8003a62 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d007      	beq.n	8003a80 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d162      	bne.n	8003b4e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a88:	e02e      	b.n	8003ae8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d115      	bne.n	8003ac4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f103 020c 	add.w	r2, r3, #12
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ac2:	e011      	b.n	8003ae8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac4:	f7fe fa8a 	bl	8001fdc <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d803      	bhi.n	8003adc <HAL_SPI_Receive+0x166>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_Receive+0x16c>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ae6:	e04a      	b.n	8003b7e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cb      	bne.n	8003a8a <HAL_SPI_Receive+0x114>
 8003af2:	e031      	b.n	8003b58 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d113      	bne.n	8003b2a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	1c9a      	adds	r2, r3, #2
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b28:	e011      	b.n	8003b4e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b2a:	f7fe fa57 	bl	8001fdc <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d803      	bhi.n	8003b42 <HAL_SPI_Receive+0x1cc>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_Receive+0x1d2>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b4c:	e017      	b.n	8003b7e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1cd      	bne.n	8003af4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fa45 	bl	8003fec <SPI_EndRxTransaction>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
 8003b7a:	e000      	b.n	8003b7e <HAL_SPI_Receive+0x208>
  }

error :
 8003b7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_SPI_TransmitReceive+0x26>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e18a      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x33c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc6:	f7fe fa09 	bl	8001fdc <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d00f      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x70>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d107      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x68>
 8003bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d003      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c06:	e15b      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_SPI_TransmitReceive+0x82>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_SPI_TransmitReceive+0x82>
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c20:	e14e      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d003      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2205      	movs	r2, #5
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	887a      	ldrh	r2, [r7, #2]
 8003c46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	887a      	ldrh	r2, [r7, #2]
 8003c5e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d007      	beq.n	8003c8a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d178      	bne.n	8003d86 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SPI_TransmitReceive+0x10a>
 8003c9c:	8b7b      	ldrh	r3, [r7, #26]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d166      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	881a      	ldrh	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc6:	e053      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d11b      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x176>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d016      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x176>
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d113      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c9a      	adds	r2, r3, #2
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d119      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x1b8>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d014      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	b292      	uxth	r2, r2
 8003d32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d50:	f7fe f944 	bl	8001fdc <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d807      	bhi.n	8003d70 <HAL_SPI_TransmitReceive+0x1d8>
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d003      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d6e:	e0a7      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1a6      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x130>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1a1      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x130>
 8003d84:	e07c      	b.n	8003e80 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x1fc>
 8003d8e:	8b7b      	ldrh	r3, [r7, #26]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d16b      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	7812      	ldrb	r2, [r2, #0]
 8003da0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dba:	e057      	b.n	8003e6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d11c      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x26c>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d017      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x26c>
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d114      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d119      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x2ae>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d014      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e42:	2301      	movs	r3, #1
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e46:	f7fe f8c9 	bl	8001fdc <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d803      	bhi.n	8003e5e <HAL_SPI_TransmitReceive+0x2c6>
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d102      	bne.n	8003e64 <HAL_SPI_TransmitReceive+0x2cc>
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d103      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e6a:	e029      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1a2      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x224>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d19d      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f917 	bl	80040b8 <SPI_EndRxTxTransaction>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d006      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e9c:	e010      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	e000      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ebe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3730      	adds	r7, #48	; 0x30
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eec:	f7fe f876 	bl	8001fdc <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003efc:	f7fe f86e 	bl	8001fdc <HAL_GetTick>
 8003f00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f02:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	015b      	lsls	r3, r3, #5
 8003f08:	0d1b      	lsrs	r3, r3, #20
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	fb02 f303 	mul.w	r3, r2, r3
 8003f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f12:	e054      	b.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d050      	beq.n	8003fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f1c:	f7fe f85e 	bl	8001fdc <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d902      	bls.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d13d      	bne.n	8003fae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4a:	d111      	bne.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f54:	d004      	beq.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	d107      	bne.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f78:	d10f      	bne.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e017      	b.n	8003fde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d19b      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000010 	.word	0x20000010

08003fec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004000:	d111      	bne.n	8004026 <SPI_EndRxTransaction+0x3a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400a:	d004      	beq.n	8004016 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004014:	d107      	bne.n	8004026 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402e:	d12a      	bne.n	8004086 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d012      	beq.n	8004060 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ff49 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02d      	beq.n	80040ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e026      	b.n	80040ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	2101      	movs	r1, #1
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff ff36 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01a      	beq.n	80040ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f043 0220 	orr.w	r2, r3, #32
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e013      	b.n	80040ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	2101      	movs	r1, #1
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ff23 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e000      	b.n	80040ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <SPI_EndRxTxTransaction+0x7c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <SPI_EndRxTxTransaction+0x80>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0d5b      	lsrs	r3, r3, #21
 80040d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e2:	d112      	bne.n	800410a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff fef4 	bl	8003edc <SPI_WaitFlagStateUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e00f      	b.n	800412a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3b01      	subs	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d0f2      	beq.n	800410a <SPI_EndRxTxTransaction+0x52>
 8004124:	e000      	b.n	8004128 <SPI_EndRxTxTransaction+0x70>
        break;
 8004126:	bf00      	nop
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000010 	.word	0x20000010
 8004138:	165e9f81 	.word	0x165e9f81

0800413c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e03f      	b.n	80041ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fdca 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800417e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f929 	bl	80043d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b08a      	sub	sp, #40	; 0x28
 80041da:	af02      	add	r7, sp, #8
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d17c      	bne.n	80042f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_UART_Transmit+0x2c>
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e075      	b.n	80042f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_UART_Transmit+0x3e>
 8004210:	2302      	movs	r3, #2
 8004212:	e06e      	b.n	80042f2 <HAL_UART_Transmit+0x11c>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2221      	movs	r2, #33	; 0x21
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800422a:	f7fd fed7 	bl	8001fdc <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	88fa      	ldrh	r2, [r7, #6]
 8004234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	88fa      	ldrh	r2, [r7, #6]
 800423a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d108      	bne.n	8004258 <HAL_UART_Transmit+0x82>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e003      	b.n	8004260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004268:	e02a      	b.n	80042c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f840 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e036      	b.n	80042f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	3302      	adds	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	e007      	b.n	80042b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	3301      	adds	r3, #1
 80042b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1cf      	bne.n	800426a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2140      	movs	r1, #64	; 0x40
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f810 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e006      	b.n	80042f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b090      	sub	sp, #64	; 0x40
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	e050      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d04c      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0x30>
 800431a:	f7fd fe5f 	bl	8001fdc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004326:	429a      	cmp	r2, r3
 8004328:	d241      	bcs.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800434a:	637a      	str	r2, [r7, #52]	; 0x34
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e5      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3314      	adds	r3, #20
 8004364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	613b      	str	r3, [r7, #16]
   return(result);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	63bb      	str	r3, [r7, #56]	; 0x38
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437e:	623a      	str	r2, [r7, #32]
 8004380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	6a3a      	ldr	r2, [r7, #32]
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	61bb      	str	r3, [r7, #24]
   return(result);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e5      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00f      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d09f      	beq.n	800430c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3740      	adds	r7, #64	; 0x40
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043dc:	b0c0      	sub	sp, #256	; 0x100
 80043de:	af00      	add	r7, sp, #0
 80043e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	68d9      	ldr	r1, [r3, #12]
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	ea40 0301 	orr.w	r3, r0, r1
 8004400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	431a      	orrs	r2, r3
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004430:	f021 010c 	bic.w	r1, r1, #12
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800443e:	430b      	orrs	r3, r1
 8004440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	6999      	ldr	r1, [r3, #24]
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	ea40 0301 	orr.w	r3, r0, r1
 800445e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b8f      	ldr	r3, [pc, #572]	; (80046a4 <UART_SetConfig+0x2cc>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d005      	beq.n	8004478 <UART_SetConfig+0xa0>
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b8d      	ldr	r3, [pc, #564]	; (80046a8 <UART_SetConfig+0x2d0>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d104      	bne.n	8004482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7ff f8a4 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 800447c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004480:	e003      	b.n	800448a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004482:	f7ff f88b 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 8004486:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004494:	f040 810c 	bne.w	80046b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044b2:	415b      	adcs	r3, r3
 80044b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ba:	4621      	mov	r1, r4
 80044bc:	eb12 0801 	adds.w	r8, r2, r1
 80044c0:	4629      	mov	r1, r5
 80044c2:	eb43 0901 	adc.w	r9, r3, r1
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044da:	4690      	mov	r8, r2
 80044dc:	4699      	mov	r9, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	eb18 0303 	adds.w	r3, r8, r3
 80044e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044e8:	462b      	mov	r3, r5
 80044ea:	eb49 0303 	adc.w	r3, r9, r3
 80044ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004506:	460b      	mov	r3, r1
 8004508:	18db      	adds	r3, r3, r3
 800450a:	653b      	str	r3, [r7, #80]	; 0x50
 800450c:	4613      	mov	r3, r2
 800450e:	eb42 0303 	adc.w	r3, r2, r3
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
 8004514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800451c:	f7fb feb8 	bl	8000290 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4b61      	ldr	r3, [pc, #388]	; (80046ac <UART_SetConfig+0x2d4>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011c      	lsls	r4, r3, #4
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004538:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800453c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	64b9      	str	r1, [r7, #72]	; 0x48
 8004548:	415b      	adcs	r3, r3
 800454a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800454c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004550:	4641      	mov	r1, r8
 8004552:	eb12 0a01 	adds.w	sl, r2, r1
 8004556:	4649      	mov	r1, r9
 8004558:	eb43 0b01 	adc.w	fp, r3, r1
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800456c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004570:	4692      	mov	sl, r2
 8004572:	469b      	mov	fp, r3
 8004574:	4643      	mov	r3, r8
 8004576:	eb1a 0303 	adds.w	r3, sl, r3
 800457a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800457e:	464b      	mov	r3, r9
 8004580:	eb4b 0303 	adc.w	r3, fp, r3
 8004584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004594:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800459c:	460b      	mov	r3, r1
 800459e:	18db      	adds	r3, r3, r3
 80045a0:	643b      	str	r3, [r7, #64]	; 0x40
 80045a2:	4613      	mov	r3, r2
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	647b      	str	r3, [r7, #68]	; 0x44
 80045aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045b2:	f7fb fe6d 	bl	8000290 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <UART_SetConfig+0x2d4>)
 80045be:	fba3 2301 	umull	r2, r3, r3, r1
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2264      	movs	r2, #100	; 0x64
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <UART_SetConfig+0x2d4>)
 80045d4:	fba3 2302 	umull	r2, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045e0:	441c      	add	r4, r3
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80045fc:	415b      	adcs	r3, r3
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004604:	4641      	mov	r1, r8
 8004606:	1851      	adds	r1, r2, r1
 8004608:	6339      	str	r1, [r7, #48]	; 0x30
 800460a:	4649      	mov	r1, r9
 800460c:	414b      	adcs	r3, r1
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800461c:	4659      	mov	r1, fp
 800461e:	00cb      	lsls	r3, r1, #3
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004626:	4651      	mov	r1, sl
 8004628:	00ca      	lsls	r2, r1, #3
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	4603      	mov	r3, r0
 8004630:	4642      	mov	r2, r8
 8004632:	189b      	adds	r3, r3, r2
 8004634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004638:	464b      	mov	r3, r9
 800463a:	460a      	mov	r2, r1
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800466e:	f7fb fe0f 	bl	8000290 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <UART_SetConfig+0x2d4>)
 8004678:	fba3 1302 	umull	r1, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2164      	movs	r1, #100	; 0x64
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	3332      	adds	r3, #50	; 0x32
 800468a:	4a08      	ldr	r2, [pc, #32]	; (80046ac <UART_SetConfig+0x2d4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 0207 	and.w	r2, r3, #7
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4422      	add	r2, r4
 800469e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a0:	e105      	b.n	80048ae <UART_SetConfig+0x4d6>
 80046a2:	bf00      	nop
 80046a4:	40011000 	.word	0x40011000
 80046a8:	40011400 	.word	0x40011400
 80046ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	6239      	str	r1, [r7, #32]
 80046ca:	415b      	adcs	r3, r3
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
 80046ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d2:	4641      	mov	r1, r8
 80046d4:	1854      	adds	r4, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb43 0501 	adc.w	r5, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	00eb      	lsls	r3, r5, #3
 80046e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ea:	00e2      	lsls	r2, r4, #3
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	4643      	mov	r3, r8
 80046f2:	18e3      	adds	r3, r4, r3
 80046f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046f8:	464b      	mov	r3, r9
 80046fa:	eb45 0303 	adc.w	r3, r5, r3
 80046fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800470e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800471e:	4629      	mov	r1, r5
 8004720:	008b      	lsls	r3, r1, #2
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004728:	4621      	mov	r1, r4
 800472a:	008a      	lsls	r2, r1, #2
 800472c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004730:	f7fb fdae 	bl	8000290 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4b60      	ldr	r3, [pc, #384]	; (80048bc <UART_SetConfig+0x4e4>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	011c      	lsls	r4, r3, #4
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800474c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	1891      	adds	r1, r2, r2
 800475a:	61b9      	str	r1, [r7, #24]
 800475c:	415b      	adcs	r3, r3
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004764:	4641      	mov	r1, r8
 8004766:	1851      	adds	r1, r2, r1
 8004768:	6139      	str	r1, [r7, #16]
 800476a:	4649      	mov	r1, r9
 800476c:	414b      	adcs	r3, r1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800477c:	4659      	mov	r1, fp
 800477e:	00cb      	lsls	r3, r1, #3
 8004780:	4651      	mov	r1, sl
 8004782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004786:	4651      	mov	r1, sl
 8004788:	00ca      	lsls	r2, r1, #3
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	4603      	mov	r3, r0
 8004790:	4642      	mov	r2, r8
 8004792:	189b      	adds	r3, r3, r2
 8004794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004798:	464b      	mov	r3, r9
 800479a:	460a      	mov	r2, r1
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047bc:	4649      	mov	r1, r9
 80047be:	008b      	lsls	r3, r1, #2
 80047c0:	4641      	mov	r1, r8
 80047c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c6:	4641      	mov	r1, r8
 80047c8:	008a      	lsls	r2, r1, #2
 80047ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ce:	f7fb fd5f 	bl	8000290 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <UART_SetConfig+0x4e4>)
 80047d8:	fba3 1302 	umull	r1, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	2164      	movs	r1, #100	; 0x64
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	3332      	adds	r3, #50	; 0x32
 80047ea:	4a34      	ldr	r2, [pc, #208]	; (80048bc <UART_SetConfig+0x4e4>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f6:	441c      	add	r4, r3
 80047f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fc:	2200      	movs	r2, #0
 80047fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004800:	677a      	str	r2, [r7, #116]	; 0x74
 8004802:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004806:	4642      	mov	r2, r8
 8004808:	464b      	mov	r3, r9
 800480a:	1891      	adds	r1, r2, r2
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	415b      	adcs	r3, r3
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004816:	4641      	mov	r1, r8
 8004818:	1851      	adds	r1, r2, r1
 800481a:	6039      	str	r1, [r7, #0]
 800481c:	4649      	mov	r1, r9
 800481e:	414b      	adcs	r3, r1
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800482e:	4659      	mov	r1, fp
 8004830:	00cb      	lsls	r3, r1, #3
 8004832:	4651      	mov	r1, sl
 8004834:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004838:	4651      	mov	r1, sl
 800483a:	00ca      	lsls	r2, r1, #3
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	4603      	mov	r3, r0
 8004842:	4642      	mov	r2, r8
 8004844:	189b      	adds	r3, r3, r2
 8004846:	66bb      	str	r3, [r7, #104]	; 0x68
 8004848:	464b      	mov	r3, r9
 800484a:	460a      	mov	r2, r1
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	663b      	str	r3, [r7, #96]	; 0x60
 800485c:	667a      	str	r2, [r7, #100]	; 0x64
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800486a:	4649      	mov	r1, r9
 800486c:	008b      	lsls	r3, r1, #2
 800486e:	4641      	mov	r1, r8
 8004870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004874:	4641      	mov	r1, r8
 8004876:	008a      	lsls	r2, r1, #2
 8004878:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800487c:	f7fb fd08 	bl	8000290 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <UART_SetConfig+0x4e4>)
 8004886:	fba3 1302 	umull	r1, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2164      	movs	r1, #100	; 0x64
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	; 0x32
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <UART_SetConfig+0x4e4>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4422      	add	r2, r4
 80048ac:	609a      	str	r2, [r3, #8]
}
 80048ae:	bf00      	nop
 80048b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048b4:	46bd      	mov	sp, r7
 80048b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ba:	bf00      	nop
 80048bc:	51eb851f 	.word	0x51eb851f

080048c0 <__errno>:
 80048c0:	4b01      	ldr	r3, [pc, #4]	; (80048c8 <__errno+0x8>)
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	2000001c 	.word	0x2000001c

080048cc <__libc_init_array>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	4d0d      	ldr	r5, [pc, #52]	; (8004904 <__libc_init_array+0x38>)
 80048d0:	4c0d      	ldr	r4, [pc, #52]	; (8004908 <__libc_init_array+0x3c>)
 80048d2:	1b64      	subs	r4, r4, r5
 80048d4:	10a4      	asrs	r4, r4, #2
 80048d6:	2600      	movs	r6, #0
 80048d8:	42a6      	cmp	r6, r4
 80048da:	d109      	bne.n	80048f0 <__libc_init_array+0x24>
 80048dc:	4d0b      	ldr	r5, [pc, #44]	; (800490c <__libc_init_array+0x40>)
 80048de:	4c0c      	ldr	r4, [pc, #48]	; (8004910 <__libc_init_array+0x44>)
 80048e0:	f000 fc8e 	bl	8005200 <_init>
 80048e4:	1b64      	subs	r4, r4, r5
 80048e6:	10a4      	asrs	r4, r4, #2
 80048e8:	2600      	movs	r6, #0
 80048ea:	42a6      	cmp	r6, r4
 80048ec:	d105      	bne.n	80048fa <__libc_init_array+0x2e>
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f4:	4798      	blx	r3
 80048f6:	3601      	adds	r6, #1
 80048f8:	e7ee      	b.n	80048d8 <__libc_init_array+0xc>
 80048fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fe:	4798      	blx	r3
 8004900:	3601      	adds	r6, #1
 8004902:	e7f2      	b.n	80048ea <__libc_init_array+0x1e>
 8004904:	08005804 	.word	0x08005804
 8004908:	08005804 	.word	0x08005804
 800490c:	08005804 	.word	0x08005804
 8004910:	08005808 	.word	0x08005808

08004914 <memcpy>:
 8004914:	440a      	add	r2, r1
 8004916:	4291      	cmp	r1, r2
 8004918:	f100 33ff 	add.w	r3, r0, #4294967295
 800491c:	d100      	bne.n	8004920 <memcpy+0xc>
 800491e:	4770      	bx	lr
 8004920:	b510      	push	{r4, lr}
 8004922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492a:	4291      	cmp	r1, r2
 800492c:	d1f9      	bne.n	8004922 <memcpy+0xe>
 800492e:	bd10      	pop	{r4, pc}

08004930 <memset>:
 8004930:	4402      	add	r2, r0
 8004932:	4603      	mov	r3, r0
 8004934:	4293      	cmp	r3, r2
 8004936:	d100      	bne.n	800493a <memset+0xa>
 8004938:	4770      	bx	lr
 800493a:	f803 1b01 	strb.w	r1, [r3], #1
 800493e:	e7f9      	b.n	8004934 <memset+0x4>

08004940 <siprintf>:
 8004940:	b40e      	push	{r1, r2, r3}
 8004942:	b500      	push	{lr}
 8004944:	b09c      	sub	sp, #112	; 0x70
 8004946:	ab1d      	add	r3, sp, #116	; 0x74
 8004948:	9002      	str	r0, [sp, #8]
 800494a:	9006      	str	r0, [sp, #24]
 800494c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004950:	4809      	ldr	r0, [pc, #36]	; (8004978 <siprintf+0x38>)
 8004952:	9107      	str	r1, [sp, #28]
 8004954:	9104      	str	r1, [sp, #16]
 8004956:	4909      	ldr	r1, [pc, #36]	; (800497c <siprintf+0x3c>)
 8004958:	f853 2b04 	ldr.w	r2, [r3], #4
 800495c:	9105      	str	r1, [sp, #20]
 800495e:	6800      	ldr	r0, [r0, #0]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	a902      	add	r1, sp, #8
 8004964:	f000 f868 	bl	8004a38 <_svfiprintf_r>
 8004968:	9b02      	ldr	r3, [sp, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	b01c      	add	sp, #112	; 0x70
 8004970:	f85d eb04 	ldr.w	lr, [sp], #4
 8004974:	b003      	add	sp, #12
 8004976:	4770      	bx	lr
 8004978:	2000001c 	.word	0x2000001c
 800497c:	ffff0208 	.word	0xffff0208

08004980 <__ssputs_r>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	688e      	ldr	r6, [r1, #8]
 8004986:	429e      	cmp	r6, r3
 8004988:	4682      	mov	sl, r0
 800498a:	460c      	mov	r4, r1
 800498c:	4690      	mov	r8, r2
 800498e:	461f      	mov	r7, r3
 8004990:	d838      	bhi.n	8004a04 <__ssputs_r+0x84>
 8004992:	898a      	ldrh	r2, [r1, #12]
 8004994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004998:	d032      	beq.n	8004a00 <__ssputs_r+0x80>
 800499a:	6825      	ldr	r5, [r4, #0]
 800499c:	6909      	ldr	r1, [r1, #16]
 800499e:	eba5 0901 	sub.w	r9, r5, r1
 80049a2:	6965      	ldr	r5, [r4, #20]
 80049a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049ac:	3301      	adds	r3, #1
 80049ae:	444b      	add	r3, r9
 80049b0:	106d      	asrs	r5, r5, #1
 80049b2:	429d      	cmp	r5, r3
 80049b4:	bf38      	it	cc
 80049b6:	461d      	movcc	r5, r3
 80049b8:	0553      	lsls	r3, r2, #21
 80049ba:	d531      	bpl.n	8004a20 <__ssputs_r+0xa0>
 80049bc:	4629      	mov	r1, r5
 80049be:	f000 fb55 	bl	800506c <_malloc_r>
 80049c2:	4606      	mov	r6, r0
 80049c4:	b950      	cbnz	r0, 80049dc <__ssputs_r+0x5c>
 80049c6:	230c      	movs	r3, #12
 80049c8:	f8ca 3000 	str.w	r3, [sl]
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049dc:	6921      	ldr	r1, [r4, #16]
 80049de:	464a      	mov	r2, r9
 80049e0:	f7ff ff98 	bl	8004914 <memcpy>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	6126      	str	r6, [r4, #16]
 80049f2:	6165      	str	r5, [r4, #20]
 80049f4:	444e      	add	r6, r9
 80049f6:	eba5 0509 	sub.w	r5, r5, r9
 80049fa:	6026      	str	r6, [r4, #0]
 80049fc:	60a5      	str	r5, [r4, #8]
 80049fe:	463e      	mov	r6, r7
 8004a00:	42be      	cmp	r6, r7
 8004a02:	d900      	bls.n	8004a06 <__ssputs_r+0x86>
 8004a04:	463e      	mov	r6, r7
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	f000 faa8 	bl	8004f60 <memmove>
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	1b9b      	subs	r3, r3, r6
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4433      	add	r3, r6
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e7db      	b.n	80049d8 <__ssputs_r+0x58>
 8004a20:	462a      	mov	r2, r5
 8004a22:	f000 fb97 	bl	8005154 <_realloc_r>
 8004a26:	4606      	mov	r6, r0
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d1e1      	bne.n	80049f0 <__ssputs_r+0x70>
 8004a2c:	6921      	ldr	r1, [r4, #16]
 8004a2e:	4650      	mov	r0, sl
 8004a30:	f000 fab0 	bl	8004f94 <_free_r>
 8004a34:	e7c7      	b.n	80049c6 <__ssputs_r+0x46>
	...

08004a38 <_svfiprintf_r>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	4698      	mov	r8, r3
 8004a3e:	898b      	ldrh	r3, [r1, #12]
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	b09d      	sub	sp, #116	; 0x74
 8004a44:	4607      	mov	r7, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	d50e      	bpl.n	8004a6a <_svfiprintf_r+0x32>
 8004a4c:	690b      	ldr	r3, [r1, #16]
 8004a4e:	b963      	cbnz	r3, 8004a6a <_svfiprintf_r+0x32>
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	f000 fb0b 	bl	800506c <_malloc_r>
 8004a56:	6028      	str	r0, [r5, #0]
 8004a58:	6128      	str	r0, [r5, #16]
 8004a5a:	b920      	cbnz	r0, 8004a66 <_svfiprintf_r+0x2e>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	e0d1      	b.n	8004c0a <_svfiprintf_r+0x1d2>
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	616b      	str	r3, [r5, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6e:	2320      	movs	r3, #32
 8004a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a78:	2330      	movs	r3, #48	; 0x30
 8004a7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c24 <_svfiprintf_r+0x1ec>
 8004a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a82:	f04f 0901 	mov.w	r9, #1
 8004a86:	4623      	mov	r3, r4
 8004a88:	469a      	mov	sl, r3
 8004a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a8e:	b10a      	cbz	r2, 8004a94 <_svfiprintf_r+0x5c>
 8004a90:	2a25      	cmp	r2, #37	; 0x25
 8004a92:	d1f9      	bne.n	8004a88 <_svfiprintf_r+0x50>
 8004a94:	ebba 0b04 	subs.w	fp, sl, r4
 8004a98:	d00b      	beq.n	8004ab2 <_svfiprintf_r+0x7a>
 8004a9a:	465b      	mov	r3, fp
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff ff6d 	bl	8004980 <__ssputs_r>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f000 80aa 	beq.w	8004c00 <_svfiprintf_r+0x1c8>
 8004aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aae:	445a      	add	r2, fp
 8004ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80a2 	beq.w	8004c00 <_svfiprintf_r+0x1c8>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ac6:	f10a 0a01 	add.w	sl, sl, #1
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	9307      	str	r3, [sp, #28]
 8004ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ad4:	4654      	mov	r4, sl
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004adc:	4851      	ldr	r0, [pc, #324]	; (8004c24 <_svfiprintf_r+0x1ec>)
 8004ade:	f7fb fb87 	bl	80001f0 <memchr>
 8004ae2:	9a04      	ldr	r2, [sp, #16]
 8004ae4:	b9d8      	cbnz	r0, 8004b1e <_svfiprintf_r+0xe6>
 8004ae6:	06d0      	lsls	r0, r2, #27
 8004ae8:	bf44      	itt	mi
 8004aea:	2320      	movmi	r3, #32
 8004aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004af0:	0711      	lsls	r1, r2, #28
 8004af2:	bf44      	itt	mi
 8004af4:	232b      	movmi	r3, #43	; 0x2b
 8004af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004afa:	f89a 3000 	ldrb.w	r3, [sl]
 8004afe:	2b2a      	cmp	r3, #42	; 0x2a
 8004b00:	d015      	beq.n	8004b2e <_svfiprintf_r+0xf6>
 8004b02:	9a07      	ldr	r2, [sp, #28]
 8004b04:	4654      	mov	r4, sl
 8004b06:	2000      	movs	r0, #0
 8004b08:	f04f 0c0a 	mov.w	ip, #10
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b12:	3b30      	subs	r3, #48	; 0x30
 8004b14:	2b09      	cmp	r3, #9
 8004b16:	d94e      	bls.n	8004bb6 <_svfiprintf_r+0x17e>
 8004b18:	b1b0      	cbz	r0, 8004b48 <_svfiprintf_r+0x110>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e014      	b.n	8004b48 <_svfiprintf_r+0x110>
 8004b1e:	eba0 0308 	sub.w	r3, r0, r8
 8004b22:	fa09 f303 	lsl.w	r3, r9, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	9304      	str	r3, [sp, #16]
 8004b2a:	46a2      	mov	sl, r4
 8004b2c:	e7d2      	b.n	8004ad4 <_svfiprintf_r+0x9c>
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	9103      	str	r1, [sp, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfbb      	ittet	lt
 8004b3a:	425b      	neglt	r3, r3
 8004b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b40:	9307      	strge	r3, [sp, #28]
 8004b42:	9307      	strlt	r3, [sp, #28]
 8004b44:	bfb8      	it	lt
 8004b46:	9204      	strlt	r2, [sp, #16]
 8004b48:	7823      	ldrb	r3, [r4, #0]
 8004b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b4c:	d10c      	bne.n	8004b68 <_svfiprintf_r+0x130>
 8004b4e:	7863      	ldrb	r3, [r4, #1]
 8004b50:	2b2a      	cmp	r3, #42	; 0x2a
 8004b52:	d135      	bne.n	8004bc0 <_svfiprintf_r+0x188>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	9203      	str	r2, [sp, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bfb8      	it	lt
 8004b60:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b64:	3402      	adds	r4, #2
 8004b66:	9305      	str	r3, [sp, #20]
 8004b68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c34 <_svfiprintf_r+0x1fc>
 8004b6c:	7821      	ldrb	r1, [r4, #0]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	4650      	mov	r0, sl
 8004b72:	f7fb fb3d 	bl	80001f0 <memchr>
 8004b76:	b140      	cbz	r0, 8004b8a <_svfiprintf_r+0x152>
 8004b78:	2340      	movs	r3, #64	; 0x40
 8004b7a:	eba0 000a 	sub.w	r0, r0, sl
 8004b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	4303      	orrs	r3, r0
 8004b86:	3401      	adds	r4, #1
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b8e:	4826      	ldr	r0, [pc, #152]	; (8004c28 <_svfiprintf_r+0x1f0>)
 8004b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b94:	2206      	movs	r2, #6
 8004b96:	f7fb fb2b 	bl	80001f0 <memchr>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d038      	beq.n	8004c10 <_svfiprintf_r+0x1d8>
 8004b9e:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <_svfiprintf_r+0x1f4>)
 8004ba0:	bb1b      	cbnz	r3, 8004bea <_svfiprintf_r+0x1b2>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	3307      	adds	r3, #7
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	3308      	adds	r3, #8
 8004bac:	9303      	str	r3, [sp, #12]
 8004bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb0:	4433      	add	r3, r6
 8004bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb4:	e767      	b.n	8004a86 <_svfiprintf_r+0x4e>
 8004bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bba:	460c      	mov	r4, r1
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	e7a5      	b.n	8004b0c <_svfiprintf_r+0xd4>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	3401      	adds	r4, #1
 8004bc4:	9305      	str	r3, [sp, #20]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f04f 0c0a 	mov.w	ip, #10
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bd2:	3a30      	subs	r2, #48	; 0x30
 8004bd4:	2a09      	cmp	r2, #9
 8004bd6:	d903      	bls.n	8004be0 <_svfiprintf_r+0x1a8>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0c5      	beq.n	8004b68 <_svfiprintf_r+0x130>
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	e7c3      	b.n	8004b68 <_svfiprintf_r+0x130>
 8004be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004be4:	4604      	mov	r4, r0
 8004be6:	2301      	movs	r3, #1
 8004be8:	e7f0      	b.n	8004bcc <_svfiprintf_r+0x194>
 8004bea:	ab03      	add	r3, sp, #12
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	462a      	mov	r2, r5
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <_svfiprintf_r+0x1f8>)
 8004bf2:	a904      	add	r1, sp, #16
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f3af 8000 	nop.w
 8004bfa:	1c42      	adds	r2, r0, #1
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	d1d6      	bne.n	8004bae <_svfiprintf_r+0x176>
 8004c00:	89ab      	ldrh	r3, [r5, #12]
 8004c02:	065b      	lsls	r3, r3, #25
 8004c04:	f53f af2c 	bmi.w	8004a60 <_svfiprintf_r+0x28>
 8004c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c0a:	b01d      	add	sp, #116	; 0x74
 8004c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c10:	ab03      	add	r3, sp, #12
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	462a      	mov	r2, r5
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <_svfiprintf_r+0x1f8>)
 8004c18:	a904      	add	r1, sp, #16
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	f000 f87a 	bl	8004d14 <_printf_i>
 8004c20:	e7eb      	b.n	8004bfa <_svfiprintf_r+0x1c2>
 8004c22:	bf00      	nop
 8004c24:	080057c8 	.word	0x080057c8
 8004c28:	080057d2 	.word	0x080057d2
 8004c2c:	00000000 	.word	0x00000000
 8004c30:	08004981 	.word	0x08004981
 8004c34:	080057ce 	.word	0x080057ce

08004c38 <_printf_common>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	4699      	mov	r9, r3
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	690b      	ldr	r3, [r1, #16]
 8004c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	bfb8      	it	lt
 8004c4c:	4613      	movlt	r3, r2
 8004c4e:	6033      	str	r3, [r6, #0]
 8004c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c54:	4607      	mov	r7, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	b10a      	cbz	r2, 8004c5e <_printf_common+0x26>
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	6033      	str	r3, [r6, #0]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	0699      	lsls	r1, r3, #26
 8004c62:	bf42      	ittt	mi
 8004c64:	6833      	ldrmi	r3, [r6, #0]
 8004c66:	3302      	addmi	r3, #2
 8004c68:	6033      	strmi	r3, [r6, #0]
 8004c6a:	6825      	ldr	r5, [r4, #0]
 8004c6c:	f015 0506 	ands.w	r5, r5, #6
 8004c70:	d106      	bne.n	8004c80 <_printf_common+0x48>
 8004c72:	f104 0a19 	add.w	sl, r4, #25
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	6832      	ldr	r2, [r6, #0]
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dc26      	bgt.n	8004cce <_printf_common+0x96>
 8004c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c84:	1e13      	subs	r3, r2, #0
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	bf18      	it	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	0692      	lsls	r2, r2, #26
 8004c8e:	d42b      	bmi.n	8004ce8 <_printf_common+0xb0>
 8004c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c94:	4649      	mov	r1, r9
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d01e      	beq.n	8004cdc <_printf_common+0xa4>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	68e5      	ldr	r5, [r4, #12]
 8004ca2:	6832      	ldr	r2, [r6, #0]
 8004ca4:	f003 0306 	and.w	r3, r3, #6
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	bf08      	it	eq
 8004cac:	1aad      	subeq	r5, r5, r2
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	6922      	ldr	r2, [r4, #16]
 8004cb2:	bf0c      	ite	eq
 8004cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb8:	2500      	movne	r5, #0
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	bfc4      	itt	gt
 8004cbe:	1a9b      	subgt	r3, r3, r2
 8004cc0:	18ed      	addgt	r5, r5, r3
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	341a      	adds	r4, #26
 8004cc6:	42b5      	cmp	r5, r6
 8004cc8:	d11a      	bne.n	8004d00 <_printf_common+0xc8>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e008      	b.n	8004ce0 <_printf_common+0xa8>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	47c0      	blx	r8
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d103      	bne.n	8004ce4 <_printf_common+0xac>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	e7c6      	b.n	8004c76 <_printf_common+0x3e>
 8004ce8:	18e1      	adds	r1, r4, r3
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	2030      	movs	r0, #48	; 0x30
 8004cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf2:	4422      	add	r2, r4
 8004cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	e7c7      	b.n	8004c90 <_printf_common+0x58>
 8004d00:	2301      	movs	r3, #1
 8004d02:	4622      	mov	r2, r4
 8004d04:	4649      	mov	r1, r9
 8004d06:	4638      	mov	r0, r7
 8004d08:	47c0      	blx	r8
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d0e6      	beq.n	8004cdc <_printf_common+0xa4>
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7d9      	b.n	8004cc6 <_printf_common+0x8e>
	...

08004d14 <_printf_i>:
 8004d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	7e0f      	ldrb	r7, [r1, #24]
 8004d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d1c:	2f78      	cmp	r7, #120	; 0x78
 8004d1e:	4691      	mov	r9, r2
 8004d20:	4680      	mov	r8, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	469a      	mov	sl, r3
 8004d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d2a:	d807      	bhi.n	8004d3c <_printf_i+0x28>
 8004d2c:	2f62      	cmp	r7, #98	; 0x62
 8004d2e:	d80a      	bhi.n	8004d46 <_printf_i+0x32>
 8004d30:	2f00      	cmp	r7, #0
 8004d32:	f000 80d8 	beq.w	8004ee6 <_printf_i+0x1d2>
 8004d36:	2f58      	cmp	r7, #88	; 0x58
 8004d38:	f000 80a3 	beq.w	8004e82 <_printf_i+0x16e>
 8004d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d44:	e03a      	b.n	8004dbc <_printf_i+0xa8>
 8004d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d4a:	2b15      	cmp	r3, #21
 8004d4c:	d8f6      	bhi.n	8004d3c <_printf_i+0x28>
 8004d4e:	a101      	add	r1, pc, #4	; (adr r1, 8004d54 <_printf_i+0x40>)
 8004d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d54:	08004dad 	.word	0x08004dad
 8004d58:	08004dc1 	.word	0x08004dc1
 8004d5c:	08004d3d 	.word	0x08004d3d
 8004d60:	08004d3d 	.word	0x08004d3d
 8004d64:	08004d3d 	.word	0x08004d3d
 8004d68:	08004d3d 	.word	0x08004d3d
 8004d6c:	08004dc1 	.word	0x08004dc1
 8004d70:	08004d3d 	.word	0x08004d3d
 8004d74:	08004d3d 	.word	0x08004d3d
 8004d78:	08004d3d 	.word	0x08004d3d
 8004d7c:	08004d3d 	.word	0x08004d3d
 8004d80:	08004ecd 	.word	0x08004ecd
 8004d84:	08004df1 	.word	0x08004df1
 8004d88:	08004eaf 	.word	0x08004eaf
 8004d8c:	08004d3d 	.word	0x08004d3d
 8004d90:	08004d3d 	.word	0x08004d3d
 8004d94:	08004eef 	.word	0x08004eef
 8004d98:	08004d3d 	.word	0x08004d3d
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004d3d 	.word	0x08004d3d
 8004da4:	08004d3d 	.word	0x08004d3d
 8004da8:	08004eb7 	.word	0x08004eb7
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	602a      	str	r2, [r5, #0]
 8004db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0a3      	b.n	8004f08 <_printf_i+0x1f4>
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	6829      	ldr	r1, [r5, #0]
 8004dc4:	0606      	lsls	r6, r0, #24
 8004dc6:	f101 0304 	add.w	r3, r1, #4
 8004dca:	d50a      	bpl.n	8004de2 <_printf_i+0xce>
 8004dcc:	680e      	ldr	r6, [r1, #0]
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	2e00      	cmp	r6, #0
 8004dd2:	da03      	bge.n	8004ddc <_printf_i+0xc8>
 8004dd4:	232d      	movs	r3, #45	; 0x2d
 8004dd6:	4276      	negs	r6, r6
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	485e      	ldr	r0, [pc, #376]	; (8004f58 <_printf_i+0x244>)
 8004dde:	230a      	movs	r3, #10
 8004de0:	e019      	b.n	8004e16 <_printf_i+0x102>
 8004de2:	680e      	ldr	r6, [r1, #0]
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dea:	bf18      	it	ne
 8004dec:	b236      	sxthne	r6, r6
 8004dee:	e7ef      	b.n	8004dd0 <_printf_i+0xbc>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	6029      	str	r1, [r5, #0]
 8004df8:	0601      	lsls	r1, r0, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0xec>
 8004dfc:	681e      	ldr	r6, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0xf2>
 8004e00:	0646      	lsls	r6, r0, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0xe8>
 8004e04:	881e      	ldrh	r6, [r3, #0]
 8004e06:	4854      	ldr	r0, [pc, #336]	; (8004f58 <_printf_i+0x244>)
 8004e08:	2f6f      	cmp	r7, #111	; 0x6f
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2308      	moveq	r3, #8
 8004e0e:	230a      	movne	r3, #10
 8004e10:	2100      	movs	r1, #0
 8004e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e16:	6865      	ldr	r5, [r4, #4]
 8004e18:	60a5      	str	r5, [r4, #8]
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	bfa2      	ittt	ge
 8004e1e:	6821      	ldrge	r1, [r4, #0]
 8004e20:	f021 0104 	bicge.w	r1, r1, #4
 8004e24:	6021      	strge	r1, [r4, #0]
 8004e26:	b90e      	cbnz	r6, 8004e2c <_printf_i+0x118>
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	d04d      	beq.n	8004ec8 <_printf_i+0x1b4>
 8004e2c:	4615      	mov	r5, r2
 8004e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e32:	fb03 6711 	mls	r7, r3, r1, r6
 8004e36:	5dc7      	ldrb	r7, [r0, r7]
 8004e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e3c:	4637      	mov	r7, r6
 8004e3e:	42bb      	cmp	r3, r7
 8004e40:	460e      	mov	r6, r1
 8004e42:	d9f4      	bls.n	8004e2e <_printf_i+0x11a>
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d10b      	bne.n	8004e60 <_printf_i+0x14c>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07de      	lsls	r6, r3, #31
 8004e4c:	d508      	bpl.n	8004e60 <_printf_i+0x14c>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	6861      	ldr	r1, [r4, #4]
 8004e52:	4299      	cmp	r1, r3
 8004e54:	bfde      	ittt	le
 8004e56:	2330      	movle	r3, #48	; 0x30
 8004e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e60:	1b52      	subs	r2, r2, r5
 8004e62:	6122      	str	r2, [r4, #16]
 8004e64:	f8cd a000 	str.w	sl, [sp]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	aa03      	add	r2, sp, #12
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f7ff fee2 	bl	8004c38 <_printf_common>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d14c      	bne.n	8004f12 <_printf_i+0x1fe>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	b004      	add	sp, #16
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	4835      	ldr	r0, [pc, #212]	; (8004f58 <_printf_i+0x244>)
 8004e84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e88:	6829      	ldr	r1, [r5, #0]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e90:	6029      	str	r1, [r5, #0]
 8004e92:	061d      	lsls	r5, r3, #24
 8004e94:	d514      	bpl.n	8004ec0 <_printf_i+0x1ac>
 8004e96:	07df      	lsls	r7, r3, #31
 8004e98:	bf44      	itt	mi
 8004e9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e9e:	6023      	strmi	r3, [r4, #0]
 8004ea0:	b91e      	cbnz	r6, 8004eaa <_printf_i+0x196>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	f023 0320 	bic.w	r3, r3, #32
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	2310      	movs	r3, #16
 8004eac:	e7b0      	b.n	8004e10 <_printf_i+0xfc>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f043 0320 	orr.w	r3, r3, #32
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	2378      	movs	r3, #120	; 0x78
 8004eb8:	4828      	ldr	r0, [pc, #160]	; (8004f5c <_printf_i+0x248>)
 8004eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ebe:	e7e3      	b.n	8004e88 <_printf_i+0x174>
 8004ec0:	0659      	lsls	r1, r3, #25
 8004ec2:	bf48      	it	mi
 8004ec4:	b2b6      	uxthmi	r6, r6
 8004ec6:	e7e6      	b.n	8004e96 <_printf_i+0x182>
 8004ec8:	4615      	mov	r5, r2
 8004eca:	e7bb      	b.n	8004e44 <_printf_i+0x130>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	6826      	ldr	r6, [r4, #0]
 8004ed0:	6961      	ldr	r1, [r4, #20]
 8004ed2:	1d18      	adds	r0, r3, #4
 8004ed4:	6028      	str	r0, [r5, #0]
 8004ed6:	0635      	lsls	r5, r6, #24
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	d501      	bpl.n	8004ee0 <_printf_i+0x1cc>
 8004edc:	6019      	str	r1, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <_printf_i+0x1d2>
 8004ee0:	0670      	lsls	r0, r6, #25
 8004ee2:	d5fb      	bpl.n	8004edc <_printf_i+0x1c8>
 8004ee4:	8019      	strh	r1, [r3, #0]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	4615      	mov	r5, r2
 8004eec:	e7ba      	b.n	8004e64 <_printf_i+0x150>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	6862      	ldr	r2, [r4, #4]
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fb f978 	bl	80001f0 <memchr>
 8004f00:	b108      	cbz	r0, 8004f06 <_printf_i+0x1f2>
 8004f02:	1b40      	subs	r0, r0, r5
 8004f04:	6060      	str	r0, [r4, #4]
 8004f06:	6863      	ldr	r3, [r4, #4]
 8004f08:	6123      	str	r3, [r4, #16]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f10:	e7a8      	b.n	8004e64 <_printf_i+0x150>
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	462a      	mov	r2, r5
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	47d0      	blx	sl
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d0ab      	beq.n	8004e78 <_printf_i+0x164>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	079b      	lsls	r3, r3, #30
 8004f24:	d413      	bmi.n	8004f4e <_printf_i+0x23a>
 8004f26:	68e0      	ldr	r0, [r4, #12]
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	4298      	cmp	r0, r3
 8004f2c:	bfb8      	it	lt
 8004f2e:	4618      	movlt	r0, r3
 8004f30:	e7a4      	b.n	8004e7c <_printf_i+0x168>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4632      	mov	r2, r6
 8004f36:	4649      	mov	r1, r9
 8004f38:	4640      	mov	r0, r8
 8004f3a:	47d0      	blx	sl
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d09b      	beq.n	8004e78 <_printf_i+0x164>
 8004f40:	3501      	adds	r5, #1
 8004f42:	68e3      	ldr	r3, [r4, #12]
 8004f44:	9903      	ldr	r1, [sp, #12]
 8004f46:	1a5b      	subs	r3, r3, r1
 8004f48:	42ab      	cmp	r3, r5
 8004f4a:	dcf2      	bgt.n	8004f32 <_printf_i+0x21e>
 8004f4c:	e7eb      	b.n	8004f26 <_printf_i+0x212>
 8004f4e:	2500      	movs	r5, #0
 8004f50:	f104 0619 	add.w	r6, r4, #25
 8004f54:	e7f5      	b.n	8004f42 <_printf_i+0x22e>
 8004f56:	bf00      	nop
 8004f58:	080057d9 	.word	0x080057d9
 8004f5c:	080057ea 	.word	0x080057ea

08004f60 <memmove>:
 8004f60:	4288      	cmp	r0, r1
 8004f62:	b510      	push	{r4, lr}
 8004f64:	eb01 0402 	add.w	r4, r1, r2
 8004f68:	d902      	bls.n	8004f70 <memmove+0x10>
 8004f6a:	4284      	cmp	r4, r0
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	d807      	bhi.n	8004f80 <memmove+0x20>
 8004f70:	1e43      	subs	r3, r0, #1
 8004f72:	42a1      	cmp	r1, r4
 8004f74:	d008      	beq.n	8004f88 <memmove+0x28>
 8004f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f7e:	e7f8      	b.n	8004f72 <memmove+0x12>
 8004f80:	4402      	add	r2, r0
 8004f82:	4601      	mov	r1, r0
 8004f84:	428a      	cmp	r2, r1
 8004f86:	d100      	bne.n	8004f8a <memmove+0x2a>
 8004f88:	bd10      	pop	{r4, pc}
 8004f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f92:	e7f7      	b.n	8004f84 <memmove+0x24>

08004f94 <_free_r>:
 8004f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d044      	beq.n	8005024 <_free_r+0x90>
 8004f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9e:	9001      	str	r0, [sp, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fa6:	bfb8      	it	lt
 8004fa8:	18e4      	addlt	r4, r4, r3
 8004faa:	f000 f913 	bl	80051d4 <__malloc_lock>
 8004fae:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <_free_r+0x94>)
 8004fb0:	9801      	ldr	r0, [sp, #4]
 8004fb2:	6813      	ldr	r3, [r2, #0]
 8004fb4:	b933      	cbnz	r3, 8004fc4 <_free_r+0x30>
 8004fb6:	6063      	str	r3, [r4, #4]
 8004fb8:	6014      	str	r4, [r2, #0]
 8004fba:	b003      	add	sp, #12
 8004fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc0:	f000 b90e 	b.w	80051e0 <__malloc_unlock>
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	d908      	bls.n	8004fda <_free_r+0x46>
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	1961      	adds	r1, r4, r5
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	bf01      	itttt	eq
 8004fd0:	6819      	ldreq	r1, [r3, #0]
 8004fd2:	685b      	ldreq	r3, [r3, #4]
 8004fd4:	1949      	addeq	r1, r1, r5
 8004fd6:	6021      	streq	r1, [r4, #0]
 8004fd8:	e7ed      	b.n	8004fb6 <_free_r+0x22>
 8004fda:	461a      	mov	r2, r3
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	b10b      	cbz	r3, 8004fe4 <_free_r+0x50>
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d9fa      	bls.n	8004fda <_free_r+0x46>
 8004fe4:	6811      	ldr	r1, [r2, #0]
 8004fe6:	1855      	adds	r5, r2, r1
 8004fe8:	42a5      	cmp	r5, r4
 8004fea:	d10b      	bne.n	8005004 <_free_r+0x70>
 8004fec:	6824      	ldr	r4, [r4, #0]
 8004fee:	4421      	add	r1, r4
 8004ff0:	1854      	adds	r4, r2, r1
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	6011      	str	r1, [r2, #0]
 8004ff6:	d1e0      	bne.n	8004fba <_free_r+0x26>
 8004ff8:	681c      	ldr	r4, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	6053      	str	r3, [r2, #4]
 8004ffe:	4421      	add	r1, r4
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	e7da      	b.n	8004fba <_free_r+0x26>
 8005004:	d902      	bls.n	800500c <_free_r+0x78>
 8005006:	230c      	movs	r3, #12
 8005008:	6003      	str	r3, [r0, #0]
 800500a:	e7d6      	b.n	8004fba <_free_r+0x26>
 800500c:	6825      	ldr	r5, [r4, #0]
 800500e:	1961      	adds	r1, r4, r5
 8005010:	428b      	cmp	r3, r1
 8005012:	bf04      	itt	eq
 8005014:	6819      	ldreq	r1, [r3, #0]
 8005016:	685b      	ldreq	r3, [r3, #4]
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	bf04      	itt	eq
 800501c:	1949      	addeq	r1, r1, r5
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	6054      	str	r4, [r2, #4]
 8005022:	e7ca      	b.n	8004fba <_free_r+0x26>
 8005024:	b003      	add	sp, #12
 8005026:	bd30      	pop	{r4, r5, pc}
 8005028:	20000234 	.word	0x20000234

0800502c <sbrk_aligned>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0e      	ldr	r6, [pc, #56]	; (8005068 <sbrk_aligned+0x3c>)
 8005030:	460c      	mov	r4, r1
 8005032:	6831      	ldr	r1, [r6, #0]
 8005034:	4605      	mov	r5, r0
 8005036:	b911      	cbnz	r1, 800503e <sbrk_aligned+0x12>
 8005038:	f000 f8bc 	bl	80051b4 <_sbrk_r>
 800503c:	6030      	str	r0, [r6, #0]
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 f8b7 	bl	80051b4 <_sbrk_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d00a      	beq.n	8005060 <sbrk_aligned+0x34>
 800504a:	1cc4      	adds	r4, r0, #3
 800504c:	f024 0403 	bic.w	r4, r4, #3
 8005050:	42a0      	cmp	r0, r4
 8005052:	d007      	beq.n	8005064 <sbrk_aligned+0x38>
 8005054:	1a21      	subs	r1, r4, r0
 8005056:	4628      	mov	r0, r5
 8005058:	f000 f8ac 	bl	80051b4 <_sbrk_r>
 800505c:	3001      	adds	r0, #1
 800505e:	d101      	bne.n	8005064 <sbrk_aligned+0x38>
 8005060:	f04f 34ff 	mov.w	r4, #4294967295
 8005064:	4620      	mov	r0, r4
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	20000238 	.word	0x20000238

0800506c <_malloc_r>:
 800506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005070:	1ccd      	adds	r5, r1, #3
 8005072:	f025 0503 	bic.w	r5, r5, #3
 8005076:	3508      	adds	r5, #8
 8005078:	2d0c      	cmp	r5, #12
 800507a:	bf38      	it	cc
 800507c:	250c      	movcc	r5, #12
 800507e:	2d00      	cmp	r5, #0
 8005080:	4607      	mov	r7, r0
 8005082:	db01      	blt.n	8005088 <_malloc_r+0x1c>
 8005084:	42a9      	cmp	r1, r5
 8005086:	d905      	bls.n	8005094 <_malloc_r+0x28>
 8005088:	230c      	movs	r3, #12
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	2600      	movs	r6, #0
 800508e:	4630      	mov	r0, r6
 8005090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005094:	4e2e      	ldr	r6, [pc, #184]	; (8005150 <_malloc_r+0xe4>)
 8005096:	f000 f89d 	bl	80051d4 <__malloc_lock>
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	461c      	mov	r4, r3
 800509e:	bb34      	cbnz	r4, 80050ee <_malloc_r+0x82>
 80050a0:	4629      	mov	r1, r5
 80050a2:	4638      	mov	r0, r7
 80050a4:	f7ff ffc2 	bl	800502c <sbrk_aligned>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	4604      	mov	r4, r0
 80050ac:	d14d      	bne.n	800514a <_malloc_r+0xde>
 80050ae:	6834      	ldr	r4, [r6, #0]
 80050b0:	4626      	mov	r6, r4
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	d140      	bne.n	8005138 <_malloc_r+0xcc>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	4631      	mov	r1, r6
 80050ba:	4638      	mov	r0, r7
 80050bc:	eb04 0803 	add.w	r8, r4, r3
 80050c0:	f000 f878 	bl	80051b4 <_sbrk_r>
 80050c4:	4580      	cmp	r8, r0
 80050c6:	d13a      	bne.n	800513e <_malloc_r+0xd2>
 80050c8:	6821      	ldr	r1, [r4, #0]
 80050ca:	3503      	adds	r5, #3
 80050cc:	1a6d      	subs	r5, r5, r1
 80050ce:	f025 0503 	bic.w	r5, r5, #3
 80050d2:	3508      	adds	r5, #8
 80050d4:	2d0c      	cmp	r5, #12
 80050d6:	bf38      	it	cc
 80050d8:	250c      	movcc	r5, #12
 80050da:	4629      	mov	r1, r5
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff ffa5 	bl	800502c <sbrk_aligned>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d02b      	beq.n	800513e <_malloc_r+0xd2>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	442b      	add	r3, r5
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	e00e      	b.n	800510c <_malloc_r+0xa0>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	1b52      	subs	r2, r2, r5
 80050f2:	d41e      	bmi.n	8005132 <_malloc_r+0xc6>
 80050f4:	2a0b      	cmp	r2, #11
 80050f6:	d916      	bls.n	8005126 <_malloc_r+0xba>
 80050f8:	1961      	adds	r1, r4, r5
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	6025      	str	r5, [r4, #0]
 80050fe:	bf18      	it	ne
 8005100:	6059      	strne	r1, [r3, #4]
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	bf08      	it	eq
 8005106:	6031      	streq	r1, [r6, #0]
 8005108:	5162      	str	r2, [r4, r5]
 800510a:	604b      	str	r3, [r1, #4]
 800510c:	4638      	mov	r0, r7
 800510e:	f104 060b 	add.w	r6, r4, #11
 8005112:	f000 f865 	bl	80051e0 <__malloc_unlock>
 8005116:	f026 0607 	bic.w	r6, r6, #7
 800511a:	1d23      	adds	r3, r4, #4
 800511c:	1af2      	subs	r2, r6, r3
 800511e:	d0b6      	beq.n	800508e <_malloc_r+0x22>
 8005120:	1b9b      	subs	r3, r3, r6
 8005122:	50a3      	str	r3, [r4, r2]
 8005124:	e7b3      	b.n	800508e <_malloc_r+0x22>
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	42a3      	cmp	r3, r4
 800512a:	bf0c      	ite	eq
 800512c:	6032      	streq	r2, [r6, #0]
 800512e:	605a      	strne	r2, [r3, #4]
 8005130:	e7ec      	b.n	800510c <_malloc_r+0xa0>
 8005132:	4623      	mov	r3, r4
 8005134:	6864      	ldr	r4, [r4, #4]
 8005136:	e7b2      	b.n	800509e <_malloc_r+0x32>
 8005138:	4634      	mov	r4, r6
 800513a:	6876      	ldr	r6, [r6, #4]
 800513c:	e7b9      	b.n	80050b2 <_malloc_r+0x46>
 800513e:	230c      	movs	r3, #12
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4638      	mov	r0, r7
 8005144:	f000 f84c 	bl	80051e0 <__malloc_unlock>
 8005148:	e7a1      	b.n	800508e <_malloc_r+0x22>
 800514a:	6025      	str	r5, [r4, #0]
 800514c:	e7de      	b.n	800510c <_malloc_r+0xa0>
 800514e:	bf00      	nop
 8005150:	20000234 	.word	0x20000234

08005154 <_realloc_r>:
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	4680      	mov	r8, r0
 800515a:	4614      	mov	r4, r2
 800515c:	460e      	mov	r6, r1
 800515e:	b921      	cbnz	r1, 800516a <_realloc_r+0x16>
 8005160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	4611      	mov	r1, r2
 8005166:	f7ff bf81 	b.w	800506c <_malloc_r>
 800516a:	b92a      	cbnz	r2, 8005178 <_realloc_r+0x24>
 800516c:	f7ff ff12 	bl	8004f94 <_free_r>
 8005170:	4625      	mov	r5, r4
 8005172:	4628      	mov	r0, r5
 8005174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005178:	f000 f838 	bl	80051ec <_malloc_usable_size_r>
 800517c:	4284      	cmp	r4, r0
 800517e:	4607      	mov	r7, r0
 8005180:	d802      	bhi.n	8005188 <_realloc_r+0x34>
 8005182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005186:	d812      	bhi.n	80051ae <_realloc_r+0x5a>
 8005188:	4621      	mov	r1, r4
 800518a:	4640      	mov	r0, r8
 800518c:	f7ff ff6e 	bl	800506c <_malloc_r>
 8005190:	4605      	mov	r5, r0
 8005192:	2800      	cmp	r0, #0
 8005194:	d0ed      	beq.n	8005172 <_realloc_r+0x1e>
 8005196:	42bc      	cmp	r4, r7
 8005198:	4622      	mov	r2, r4
 800519a:	4631      	mov	r1, r6
 800519c:	bf28      	it	cs
 800519e:	463a      	movcs	r2, r7
 80051a0:	f7ff fbb8 	bl	8004914 <memcpy>
 80051a4:	4631      	mov	r1, r6
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7ff fef4 	bl	8004f94 <_free_r>
 80051ac:	e7e1      	b.n	8005172 <_realloc_r+0x1e>
 80051ae:	4635      	mov	r5, r6
 80051b0:	e7df      	b.n	8005172 <_realloc_r+0x1e>
	...

080051b4 <_sbrk_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4d06      	ldr	r5, [pc, #24]	; (80051d0 <_sbrk_r+0x1c>)
 80051b8:	2300      	movs	r3, #0
 80051ba:	4604      	mov	r4, r0
 80051bc:	4608      	mov	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fc fe0e 	bl	8001de0 <_sbrk>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_sbrk_r+0x1a>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_sbrk_r+0x1a>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	2000023c 	.word	0x2000023c

080051d4 <__malloc_lock>:
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <__malloc_lock+0x8>)
 80051d6:	f000 b811 	b.w	80051fc <__retarget_lock_acquire_recursive>
 80051da:	bf00      	nop
 80051dc:	20000240 	.word	0x20000240

080051e0 <__malloc_unlock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	; (80051e8 <__malloc_unlock+0x8>)
 80051e2:	f000 b80c 	b.w	80051fe <__retarget_lock_release_recursive>
 80051e6:	bf00      	nop
 80051e8:	20000240 	.word	0x20000240

080051ec <_malloc_usable_size_r>:
 80051ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f0:	1f18      	subs	r0, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfbc      	itt	lt
 80051f6:	580b      	ldrlt	r3, [r1, r0]
 80051f8:	18c0      	addlt	r0, r0, r3
 80051fa:	4770      	bx	lr

080051fc <__retarget_lock_acquire_recursive>:
 80051fc:	4770      	bx	lr

080051fe <__retarget_lock_release_recursive>:
 80051fe:	4770      	bx	lr

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
