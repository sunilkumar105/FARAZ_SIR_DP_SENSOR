
dp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005164  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e8  080058e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f0  080058f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080058f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000007c  08005974  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005974  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2a5  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7b  00000000  00000000  0002d351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e0b  00000000  00000000  00030788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d612  00000000  00000000  00048593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093556  00000000  00000000  00055ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e90fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003154  00000000  00000000  000e914c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052ec 	.word	0x080052ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080052ec 	.word	0x080052ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <NRF24_DelayMicroSeconds+0x3c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <NRF24_DelayMicroSeconds+0x40>)
 80005a6:	fba2 2303 	umull	r2, r3, r2, r3
 80005aa:	0c9a      	lsrs	r2, r3, #18
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005b4:	bf00      	nop
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	60fa      	str	r2, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1fa      	bne.n	80005b6 <NRF24_DelayMicroSeconds+0x22>
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	165e9f81 	.word	0x165e9f81

080005d8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d008      	beq.n	80005f8 <NRF24_csn+0x20>
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <NRF24_csn+0x38>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <NRF24_csn+0x3c>)
 80005ec:	8811      	ldrh	r1, [r2, #0]
 80005ee:	2201      	movs	r2, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fbe5 	bl	8002dc0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005f6:	e007      	b.n	8000608 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <NRF24_csn+0x38>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <NRF24_csn+0x3c>)
 80005fe:	8811      	ldrh	r1, [r2, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fbdc 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000a0 	.word	0x200000a0
 8000614:	200000a4 	.word	0x200000a4

08000618 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d008      	beq.n	8000638 <NRF24_ce+0x20>
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <NRF24_ce+0x38>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <NRF24_ce+0x3c>)
 800062c:	8811      	ldrh	r1, [r2, #0]
 800062e:	2201      	movs	r2, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fbc5 	bl	8002dc0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000636:	e007      	b.n	8000648 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <NRF24_ce+0x38>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <NRF24_ce+0x3c>)
 800063e:	8811      	ldrh	r1, [r2, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fbbc 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000a0 	.word	0x200000a0
 8000654:	200000a6 	.word	0x200000a6

08000658 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ffb8 	bl	80005d8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	b2db      	uxtb	r3, r3
 8000670:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000672:	f107 010c 	add.w	r1, r7, #12
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	2201      	movs	r2, #1
 800067a:	480a      	ldr	r0, [pc, #40]	; (80006a4 <NRF24_read_register+0x4c>)
 800067c:	f003 f8b5 	bl	80037ea <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	1c59      	adds	r1, r3, #1
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2201      	movs	r2, #1
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <NRF24_read_register+0x4c>)
 800068c:	f003 f9e9 	bl	8003a62 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff9f 	bl	80005d8 <NRF24_csn>
	return retData;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000a8 	.word	0x200000a8

080006a8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff ff8d 	bl	80005d8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 031f 	and.w	r3, r3, #31
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <NRF24_read_registerN+0x4c>)
 80006d2:	f003 f88a 	bl	80037ea <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	6839      	ldr	r1, [r7, #0]
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <NRF24_read_registerN+0x4c>)
 80006e0:	f003 f9bf 	bl	8003a62 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff77 	bl	80005d8 <NRF24_csn>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000a8 	.word	0x200000a8

080006f8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff65 	bl	80005d8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	b2db      	uxtb	r3, r3
 8000716:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800071c:	f107 010c 	add.w	r1, r7, #12
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2202      	movs	r2, #2
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <NRF24_write_register+0x40>)
 8000726:	f003 f860 	bl	80037ea <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff ff54 	bl	80005d8 <NRF24_csn>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000a8 	.word	0x200000a8

0800073c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff43 	bl	80005d8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	b2db      	uxtb	r3, r3
 800075a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800075c:	f107 010c 	add.w	r1, r7, #12
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <NRF24_write_registerN+0x4c>)
 8000766:	f003 f840 	bl	80037ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	b29a      	uxth	r2, r3
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	6839      	ldr	r1, [r7, #0]
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <NRF24_write_registerN+0x4c>)
 8000774:	f003 f839 	bl	80037ea <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff2d 	bl	80005d8 <NRF24_csn>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000a8 	.word	0x200000a8

0800078c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ff1d 	bl	80005d8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80007a2:	f107 010f 	add.w	r1, r7, #15
 80007a6:	2364      	movs	r3, #100	; 0x64
 80007a8:	2201      	movs	r2, #1
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <NRF24_write_payload+0x40>)
 80007ac:	f003 f81d 	bl	80037ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <NRF24_write_payload+0x40>)
 80007ba:	f003 f816 	bl	80037ea <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff0a 	bl	80005d8 <NRF24_csn>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000a8 	.word	0x200000a8

080007d0 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80007dc:	f000 fa12 	bl	8000c04 <NRF24_getPayloadSize>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d303      	bcc.n	80007f2 <NRF24_read_payload+0x22>
 80007ea:	f000 fa0b 	bl	8000c04 <NRF24_getPayloadSize>
 80007ee:	4603      	mov	r3, r0
 80007f0:	e000      	b.n	80007f4 <NRF24_read_payload+0x24>
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff feee 	bl	80005d8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80007fc:	2361      	movs	r3, #97	; 0x61
 80007fe:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000800:	f107 010e 	add.w	r1, r7, #14
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	2201      	movs	r2, #1
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <NRF24_read_payload+0x5c>)
 800080a:	f002 ffee 	bl	80037ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	b29a      	uxth	r2, r3
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <NRF24_read_payload+0x5c>)
 8000818:	f003 f923 	bl	8003a62 <HAL_SPI_Receive>
	NRF24_csn(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff fedb 	bl	80005d8 <NRF24_csn>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000a8 	.word	0x200000a8

08000830 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000834:	21ff      	movs	r1, #255	; 0xff
 8000836:	20e1      	movs	r0, #225	; 0xe1
 8000838:	f7ff ff5e 	bl	80006f8 <NRF24_write_register>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000844:	21ff      	movs	r1, #255	; 0xff
 8000846:	20e2      	movs	r0, #226	; 0xe2
 8000848:	f7ff ff56 	bl	80006f8 <NRF24_write_register>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000856:	2007      	movs	r0, #7
 8000858:	f7ff fefe 	bl	8000658 <NRF24_read_register>
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000860:	79fb      	ldrb	r3, [r7, #7]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800086c:	b082      	sub	sp, #8
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
 800087c:	4613      	mov	r3, r2
 800087e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000880:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <NRF24_begin+0x1b0>)
 8000882:	4618      	mov	r0, r3
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	2258      	movs	r2, #88	; 0x58
 800088a:	4619      	mov	r1, r3
 800088c:	f004 f8b8 	bl	8004a00 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000890:	4a63      	ldr	r2, [pc, #396]	; (8000a20 <NRF24_begin+0x1b4>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000896:	4a63      	ldr	r2, [pc, #396]	; (8000a24 <NRF24_begin+0x1b8>)
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800089c:	4a62      	ldr	r2, [pc, #392]	; (8000a28 <NRF24_begin+0x1bc>)
 800089e:	883b      	ldrh	r3, [r7, #0]
 80008a0:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff fe98 	bl	80005d8 <NRF24_csn>
	NRF24_ce(0);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff feb5 	bl	8000618 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80008ae:	2005      	movs	r0, #5
 80008b0:	f001 fc16 	bl	80020e0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80008b4:	2108      	movs	r1, #8
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ff1e 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80008bc:	213f      	movs	r1, #63	; 0x3f
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff ff1a 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80008c4:	2103      	movs	r1, #3
 80008c6:	2002      	movs	r0, #2
 80008c8:	f7ff ff16 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80008cc:	2103      	movs	r1, #3
 80008ce:	2003      	movs	r0, #3
 80008d0:	f7ff ff12 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80008d4:	2103      	movs	r1, #3
 80008d6:	2004      	movs	r0, #4
 80008d8:	f7ff ff0e 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80008dc:	2102      	movs	r1, #2
 80008de:	2005      	movs	r0, #5
 80008e0:	f7ff ff0a 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80008e4:	210f      	movs	r1, #15
 80008e6:	2006      	movs	r0, #6
 80008e8:	f7ff ff06 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80008ec:	210e      	movs	r1, #14
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff ff02 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2008      	movs	r0, #8
 80008f8:	f7ff fefe 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80008fc:	2100      	movs	r1, #0
 80008fe:	2009      	movs	r0, #9
 8000900:	f7ff fefa 	bl	80006f8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000904:	23e7      	movs	r3, #231	; 0xe7
 8000906:	733b      	strb	r3, [r7, #12]
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	72fb      	strb	r3, [r7, #11]
 800090c:	23e7      	movs	r3, #231	; 0xe7
 800090e:	72bb      	strb	r3, [r7, #10]
 8000910:	23e7      	movs	r3, #231	; 0xe7
 8000912:	727b      	strb	r3, [r7, #9]
 8000914:	23e7      	movs	r3, #231	; 0xe7
 8000916:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2205      	movs	r2, #5
 800091e:	4619      	mov	r1, r3
 8000920:	200a      	movs	r0, #10
 8000922:	f7ff ff0b 	bl	800073c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000926:	23c2      	movs	r3, #194	; 0xc2
 8000928:	733b      	strb	r3, [r7, #12]
 800092a:	23c2      	movs	r3, #194	; 0xc2
 800092c:	72fb      	strb	r3, [r7, #11]
 800092e:	23c2      	movs	r3, #194	; 0xc2
 8000930:	72bb      	strb	r3, [r7, #10]
 8000932:	23c2      	movs	r3, #194	; 0xc2
 8000934:	727b      	strb	r3, [r7, #9]
 8000936:	23c2      	movs	r3, #194	; 0xc2
 8000938:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2205      	movs	r2, #5
 8000940:	4619      	mov	r1, r3
 8000942:	200b      	movs	r0, #11
 8000944:	f7ff fefa 	bl	800073c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000948:	21c3      	movs	r1, #195	; 0xc3
 800094a:	200c      	movs	r0, #12
 800094c:	f7ff fed4 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000950:	21c4      	movs	r1, #196	; 0xc4
 8000952:	200d      	movs	r0, #13
 8000954:	f7ff fed0 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000958:	21c5      	movs	r1, #197	; 0xc5
 800095a:	200e      	movs	r0, #14
 800095c:	f7ff fecc 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000960:	21c6      	movs	r1, #198	; 0xc6
 8000962:	200f      	movs	r0, #15
 8000964:	f7ff fec8 	bl	80006f8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000968:	23e7      	movs	r3, #231	; 0xe7
 800096a:	733b      	strb	r3, [r7, #12]
 800096c:	23e7      	movs	r3, #231	; 0xe7
 800096e:	72fb      	strb	r3, [r7, #11]
 8000970:	23e7      	movs	r3, #231	; 0xe7
 8000972:	72bb      	strb	r3, [r7, #10]
 8000974:	23e7      	movs	r3, #231	; 0xe7
 8000976:	727b      	strb	r3, [r7, #9]
 8000978:	23e7      	movs	r3, #231	; 0xe7
 800097a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2205      	movs	r2, #5
 8000982:	4619      	mov	r1, r3
 8000984:	2010      	movs	r0, #16
 8000986:	f7ff fed9 	bl	800073c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800098a:	2100      	movs	r1, #0
 800098c:	2011      	movs	r0, #17
 800098e:	f7ff feb3 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000992:	2100      	movs	r1, #0
 8000994:	2012      	movs	r0, #18
 8000996:	f7ff feaf 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800099a:	2100      	movs	r1, #0
 800099c:	2013      	movs	r0, #19
 800099e:	f7ff feab 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2014      	movs	r0, #20
 80009a6:	f7ff fea7 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2015      	movs	r0, #21
 80009ae:	f7ff fea3 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2016      	movs	r0, #22
 80009b6:	f7ff fe9f 	bl	80006f8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80009ba:	f000 fab5 	bl	8000f28 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80009be:	2100      	movs	r1, #0
 80009c0:	201c      	movs	r0, #28
 80009c2:	f7ff fe99 	bl	80006f8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80009c6:	2100      	movs	r1, #0
 80009c8:	201d      	movs	r0, #29
 80009ca:	f7ff fe95 	bl	80006f8 <NRF24_write_register>
	printRadioSettings();
 80009ce:	f000 fac5 	bl	8000f5c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80009d2:	210f      	movs	r1, #15
 80009d4:	200f      	movs	r0, #15
 80009d6:	f000 f8cd 	bl	8000b74 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 f953 	bl	8000c86 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 f989 	bl	8000cf8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80009e6:	2002      	movs	r0, #2
 80009e8:	f000 f9cc 	bl	8000d84 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80009ec:	f000 f91e 	bl	8000c2c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80009f0:	2020      	movs	r0, #32
 80009f2:	f000 f8ef 	bl	8000bd4 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80009f6:	f000 fa8e 	bl	8000f16 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80009fa:	204c      	movs	r0, #76	; 0x4c
 80009fc:	f000 f8d5 	bl	8000baa <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000a00:	f7ff ff16 	bl	8000830 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a04:	f7ff ff1c 	bl	8000840 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000a08:	f000 f9e4 	bl	8000dd4 <NRF24_powerDown>
	
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a16:	b002      	add	sp, #8
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200000a8 	.word	0x200000a8
 8000a20:	200000a0 	.word	0x200000a0
 8000a24:	200000a4 	.word	0x200000a4
 8000a28:	200000a6 	.word	0x200000a6

08000a2c <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fdf1 	bl	8000618 <NRF24_ce>
	NRF24_flush_tx();
 8000a36:	f7ff fefb 	bl	8000830 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a3a:	f7ff ff01 	bl	8000840 <NRF24_flush_rx>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000a50:	f000 fa61 	bl	8000f16 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	4619      	mov	r1, r3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f9fa 	bl	8000e52 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000a5e:	f001 fb33 	bl	80020c8 <HAL_GetTick>
 8000a62:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000a64:	230a      	movs	r3, #10
 8000a66:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000a68:	f107 030d 	add.w	r3, r7, #13
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff fe19 	bl	80006a8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000a76:	f7ff feeb 	bl	8000850 <NRF24_get_status>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <NRF24_write+0x54>
 8000a88:	f001 fb1e 	bl	80020c8 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8e7      	bhi.n	8000a68 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a98:	f107 010b 	add.w	r1, r7, #11
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <NRF24_write+0x90>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa04 	bl	8000eb0 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000aa8:	7b3b      	ldrb	r3, [r7, #12]
 8000aaa:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <NRF24_write+0x90>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000ab4:	f000 f8b2 	bl	8000c1c <NRF24_getDynamicPayloadSize>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <NRF24_write+0x94>)
 8000abe:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000ac0:	f000 f80c 	bl	8000adc <NRF24_available>
	NRF24_flush_tx();
 8000ac4:	f7ff feb4 	bl	8000830 <NRF24_flush_tx>
	return retStatus;
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000098 	.word	0x20000098
 8000ad8:	20000099 	.word	0x20000099

08000adc <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 f986 	bl	8000df2 <NRF24_availablePipe>
 8000ae6:	4603      	mov	r3, r0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	bd80      	pop	{r7, pc}

08000aec <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	4619      	mov	r1, r3
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fe67 	bl	80007d0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000b02:	2017      	movs	r0, #23
 8000b04:	f7ff fda8 	bl	8000658 <NRF24_read_register>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000b10:	f7ff fe96 	bl	8000840 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000b14:	f000 f882 	bl	8000c1c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bf14      	ite	ne
 8000b1e:	2301      	movne	r3, #1
 8000b20:	2300      	moveq	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000b36:	463b      	mov	r3, r7
 8000b38:	2205      	movs	r2, #5
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f7ff fdfd 	bl	800073c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000b42:	463b      	mov	r3, r7
 8000b44:	2205      	movs	r2, #5
 8000b46:	4619      	mov	r1, r3
 8000b48:	2010      	movs	r0, #16
 8000b4a:	f7ff fdf7 	bl	800073c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <NRF24_openWritingPipe+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	7bfa      	ldrb	r2, [r7, #15]
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	bf28      	it	cs
 8000b5c:	4613      	movcs	r3, r2
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	2011      	movs	r0, #17
 8000b64:	f7ff fdc8 	bl	80006f8 <NRF24_write_register>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000009a 	.word	0x2000009a

08000b74 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2004      	movs	r0, #4
 8000b9e:	f7ff fdab 	bl	80006f8 <NRF24_write_register>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000bb4:	237f      	movs	r3, #127	; 0x7f
 8000bb6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	bf28      	it	cs
 8000bc0:	4613      	movcs	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	2005      	movs	r0, #5
 8000bc8:	f7ff fd96 	bl	80006f8 <NRF24_write_register>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000bde:	2320      	movs	r3, #32
 8000be0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000be2:	7bfa      	ldrb	r2, [r7, #15]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	bf28      	it	cs
 8000bea:	4613      	movcs	r3, r2
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <NRF24_setPayloadSize+0x2c>)
 8000bf0:	701a      	strb	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	2000009a 	.word	0x2000009a

08000c04 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	return payload_size;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <NRF24_getPayloadSize+0x14>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000009a 	.word	0x2000009a

08000c1c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000c20:	2060      	movs	r0, #96	; 0x60
 8000c22:	f7ff fd19 	bl	8000658 <NRF24_read_register>
 8000c26:	4603      	mov	r3, r0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000c30:	201d      	movs	r0, #29
 8000c32:	f7ff fd11 	bl	8000658 <NRF24_read_register>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f023 0304 	bic.w	r3, r3, #4
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4619      	mov	r1, r3
 8000c40:	201d      	movs	r0, #29
 8000c42:	f7ff fd59 	bl	80006f8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	201c      	movs	r0, #28
 8000c4a:	f7ff fd55 	bl	80006f8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000c4e:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <NRF24_disableDynamicPayloads+0x2c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000009b 	.word	0x2000009b

08000c5c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000c6c:	213f      	movs	r1, #63	; 0x3f
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fd42 	bl	80006f8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000c74:	e003      	b.n	8000c7e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000c76:	2100      	movs	r1, #0
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fd3d 	bl	80006f8 <NRF24_write_register>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff fce1 	bl	8000658 <NRF24_read_register>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f023 0306 	bic.w	r3, r3, #6
 8000ca0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d104      	bne.n	8000cb2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f043 0306 	orr.w	r3, r3, #6
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e019      	b.n	8000ce6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d104      	bne.n	8000cc2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e011      	b.n	8000ce6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e009      	b.n	8000ce6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d103      	bne.n	8000ce6 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	f043 0306 	orr.w	r3, r3, #6
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2006      	movs	r0, #6
 8000cec:	f7ff fd04 	bl	80006f8 <NRF24_write_register>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d06:	2006      	movs	r0, #6
 8000d08:	f7ff fca6 	bl	8000658 <NRF24_read_register>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000d1c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d107      	bne.n	8000d34 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	73bb      	strb	r3, [r7, #14]
 8000d32:	e00d      	b.n	8000d50 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d107      	bne.n	8000d4a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	73bb      	strb	r3, [r7, #14]
 8000d48:	e002      	b.n	8000d50 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	4619      	mov	r1, r3
 8000d54:	2006      	movs	r0, #6
 8000d56:	f7ff fccf 	bl	80006f8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f7ff fc7c 	bl	8000658 <NRF24_read_register>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d102      	bne.n	8000d70 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e002      	b.n	8000d76 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <NRF24_setDataRate+0x88>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000009c 	.word	0x2000009c

08000d84 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fc62 	bl	8000658 <NRF24_read_register>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f023 030c 	bic.w	r3, r3, #12
 8000d9a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00f      	beq.n	8000dc2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d104      	bne.n	8000db2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e007      	b.n	8000dc2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fc96 	bl	80006f8 <NRF24_write_register>
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fc3d 	bl	8000658 <NRF24_read_register>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f023 0302 	bic.w	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fc85 	bl	80006f8 <NRF24_write_register>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000dfa:	f7ff fd29 	bl	8000850 <NRF24_get_status>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d017      	beq.n	8000e48 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	085b      	lsrs	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	2007      	movs	r0, #7
 8000e32:	f7ff fc61 	bl	80006f8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 0320 	and.w	r3, r3, #32
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000e40:	2120      	movs	r1, #32
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff fc58 	bl	80006f8 <NRF24_write_register>
    }
  }
  return result;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fbda 	bl	8000618 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fbf7 	bl	8000658 <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fc3c 	bl	80006f8 <NRF24_write_register>
  NRF24_ce(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fbc9 	bl	8000618 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000e86:	2096      	movs	r0, #150	; 0x96
 8000e88:	f7ff fb84 	bl	8000594 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fc7b 	bl	800078c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fbbe 	bl	8000618 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f7ff fb79 	bl	8000594 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fbb8 	bl	8000618 <NRF24_ce>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000ebc:	f7ff fcc8 	bl	8000850 <NRF24_get_status>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000eca:	2170      	movs	r1, #112	; 0x70
 8000ecc:	2007      	movs	r0, #7
 8000ece:	f7ff fc13 	bl	80006f8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	bf14      	ite	ne
 8000ef0:	2301      	movne	r3, #1
 8000ef2:	2300      	moveq	r3, #0
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf14      	ite	ne
 8000f04:	2301      	movne	r3, #1
 8000f06:	2300      	moveq	r3, #0
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000f1a:	2170      	movs	r1, #112	; 0x70
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f7ff fbeb 	bl	80006f8 <NRF24_write_register>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fb52 	bl	80005d8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000f34:	2350      	movs	r3, #80	; 0x50
 8000f36:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000f38:	2373      	movs	r3, #115	; 0x73
 8000f3a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000f3c:	1d39      	adds	r1, r7, #4
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	2202      	movs	r2, #2
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <NRF24_ACTIVATE_cmd+0x30>)
 8000f44:	f002 fc51 	bl	80037ea <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fb45 	bl	80005d8 <NRF24_csn>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000a8 	.word	0x200000a8

08000f5c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	b0a1      	sub	sp, #132	; 0x84
 8000f60:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	49c3      	ldr	r1, [pc, #780]	; (8001274 <printRadioSettings+0x318>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fd5f 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff f934 	bl	80001e0 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	f107 0108 	add.w	r1, r7, #8
 8000f80:	230a      	movs	r3, #10
 8000f82:	48bd      	ldr	r0, [pc, #756]	; (8001278 <printRadioSettings+0x31c>)
 8000f84:	f003 f99d 	bl	80042c2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fb65 	bl	8000658 <NRF24_read_register>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000f94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000fa0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <printRadioSettings+0x5e>
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	49b2      	ldr	r1, [pc, #712]	; (800127c <printRadioSettings+0x320>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fd3a 	bl	8004a2c <siprintf>
 8000fb8:	e00c      	b.n	8000fd4 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	49b0      	ldr	r1, [pc, #704]	; (8001280 <printRadioSettings+0x324>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fd33 	bl	8004a2c <siprintf>
 8000fc6:	e005      	b.n	8000fd4 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	49ad      	ldr	r1, [pc, #692]	; (8001284 <printRadioSettings+0x328>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fd2c 	bl	8004a2c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f901 	bl	80001e0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f107 0108 	add.w	r1, r7, #8
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	48a3      	ldr	r0, [pc, #652]	; (8001278 <printRadioSettings+0x31c>)
 8000fea:	f003 f96a 	bl	80042c2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fb32 	bl	8000658 <NRF24_read_register>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ffa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ffe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001002:	2b00      	cmp	r3, #0
 8001004:	bfcc      	ite	gt
 8001006:	2301      	movgt	r3, #1
 8001008:	2300      	movle	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800100e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001012:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001016:	2b00      	cmp	r3, #0
 8001018:	bfcc      	ite	gt
 800101a:	2301      	movgt	r3, #1
 800101c:	2300      	movle	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001022:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001026:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800102a:	2b00      	cmp	r3, #0
 800102c:	bfcc      	ite	gt
 800102e:	2301      	movgt	r3, #1
 8001030:	2300      	movle	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001036:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800103a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfcc      	ite	gt
 8001042:	2301      	movgt	r3, #1
 8001044:	2300      	movle	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800104a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800104e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001052:	2b00      	cmp	r3, #0
 8001054:	bfcc      	ite	gt
 8001056:	2301      	movgt	r3, #1
 8001058:	2300      	movle	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800105e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001062:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfcc      	ite	gt
 800106a:	2301      	movgt	r3, #1
 800106c:	2300      	movle	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f107 0008 	add.w	r0, r7, #8
 8001074:	9303      	str	r3, [sp, #12]
 8001076:	9402      	str	r4, [sp, #8]
 8001078:	9101      	str	r1, [sp, #4]
 800107a:	9200      	str	r2, [sp, #0]
 800107c:	4633      	mov	r3, r6
 800107e:	462a      	mov	r2, r5
 8001080:	4981      	ldr	r1, [pc, #516]	; (8001288 <printRadioSettings+0x32c>)
 8001082:	f003 fcd3 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f8a8 	bl	80001e0 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	b29a      	uxth	r2, r3
 8001094:	f107 0108 	add.w	r1, r7, #8
 8001098:	230a      	movs	r3, #10
 800109a:	4877      	ldr	r0, [pc, #476]	; (8001278 <printRadioSettings+0x31c>)
 800109c:	f003 f911 	bl	80042c2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff fad9 	bl	8000658 <NRF24_read_register>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010b0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfcc      	ite	gt
 80010b8:	2301      	movgt	r3, #1
 80010ba:	2300      	movle	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010c4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bfcc      	ite	gt
 80010cc:	2301      	movgt	r3, #1
 80010ce:	2300      	movle	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bfcc      	ite	gt
 80010e0:	2301      	movgt	r3, #1
 80010e2:	2300      	movle	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ec:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bfcc      	ite	gt
 80010f4:	2301      	movgt	r3, #1
 80010f6:	2300      	movle	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001100:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001104:	2b00      	cmp	r3, #0
 8001106:	bfcc      	ite	gt
 8001108:	2301      	movgt	r3, #1
 800110a:	2300      	movle	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001110:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001114:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001118:	2b00      	cmp	r3, #0
 800111a:	bfcc      	ite	gt
 800111c:	2301      	movgt	r3, #1
 800111e:	2300      	movle	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f107 0008 	add.w	r0, r7, #8
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	9402      	str	r4, [sp, #8]
 800112a:	9101      	str	r1, [sp, #4]
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	4633      	mov	r3, r6
 8001130:	462a      	mov	r2, r5
 8001132:	4956      	ldr	r1, [pc, #344]	; (800128c <printRadioSettings+0x330>)
 8001134:	f003 fc7a 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f84f 	bl	80001e0 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	f107 0108 	add.w	r1, r7, #8
 800114a:	230a      	movs	r3, #10
 800114c:	484a      	ldr	r0, [pc, #296]	; (8001278 <printRadioSettings+0x31c>)
 800114e:	f003 f8b8 	bl	80042c2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001152:	2003      	movs	r0, #3
 8001154:	f7ff fa80 	bl	8000658 <NRF24_read_register>
 8001158:	4603      	mov	r3, r0
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001162:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001166:	3302      	adds	r3, #2
 8001168:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800116c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4946      	ldr	r1, [pc, #280]	; (8001290 <printRadioSettings+0x334>)
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fc58 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f82d 	bl	80001e0 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	f107 0108 	add.w	r1, r7, #8
 800118e:	230a      	movs	r3, #10
 8001190:	4839      	ldr	r0, [pc, #228]	; (8001278 <printRadioSettings+0x31c>)
 8001192:	f003 f896 	bl	80042c2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001196:	2005      	movs	r0, #5
 8001198:	f7ff fa5e 	bl	8000658 <NRF24_read_register>
 800119c:	4603      	mov	r3, r0
 800119e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80011a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4939      	ldr	r1, [pc, #228]	; (8001294 <printRadioSettings+0x338>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fc3b 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f810 	bl	80001e0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f107 0108 	add.w	r1, r7, #8
 80011c8:	230a      	movs	r3, #10
 80011ca:	482b      	ldr	r0, [pc, #172]	; (8001278 <printRadioSettings+0x31c>)
 80011cc:	f003 f879 	bl	80042c2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80011d0:	2006      	movs	r0, #6
 80011d2:	f7ff fa41 	bl	8000658 <NRF24_read_register>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80011dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <printRadioSettings+0x29a>
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	492a      	ldr	r1, [pc, #168]	; (8001298 <printRadioSettings+0x33c>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fc1c 	bl	8004a2c <siprintf>
 80011f4:	e005      	b.n	8001202 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4928      	ldr	r1, [pc, #160]	; (800129c <printRadioSettings+0x340>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fc15 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffea 	bl	80001e0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f107 0108 	add.w	r1, r7, #8
 8001214:	230a      	movs	r3, #10
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <printRadioSettings+0x31c>)
 8001218:	f003 f853 	bl	80042c2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800121c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001220:	f003 0306 	and.w	r3, r3, #6
 8001224:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001228:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800122c:	085b      	lsrs	r3, r3, #1
 800122e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001232:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <printRadioSettings+0x2ec>
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4918      	ldr	r1, [pc, #96]	; (80012a0 <printRadioSettings+0x344>)
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fbf3 	bl	8004a2c <siprintf>
 8001246:	e03b      	b.n	80012c0 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124c:	2b01      	cmp	r3, #1
 800124e:	d106      	bne.n	800125e <printRadioSettings+0x302>
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4913      	ldr	r1, [pc, #76]	; (80012a4 <printRadioSettings+0x348>)
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fbe8 	bl	8004a2c <siprintf>
 800125c:	e030      	b.n	80012c0 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800125e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001262:	2b02      	cmp	r3, #2
 8001264:	d122      	bne.n	80012ac <printRadioSettings+0x350>
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	490f      	ldr	r1, [pc, #60]	; (80012a8 <printRadioSettings+0x34c>)
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fbdd 	bl	8004a2c <siprintf>
 8001272:	e025      	b.n	80012c0 <printRadioSettings+0x364>
 8001274:	08005304 	.word	0x08005304
 8001278:	20000100 	.word	0x20000100
 800127c:	08005338 	.word	0x08005338
 8001280:	08005354 	.word	0x08005354
 8001284:	08005370 	.word	0x08005370
 8001288:	08005384 	.word	0x08005384
 800128c:	080053c8 	.word	0x080053c8
 8001290:	08005414 	.word	0x08005414
 8001294:	08005430 	.word	0x08005430
 8001298:	08005444 	.word	0x08005444
 800129c:	0800545c 	.word	0x0800545c
 80012a0:	08005474 	.word	0x08005474
 80012a4:	08005488 	.word	0x08005488
 80012a8:	0800549c 	.word	0x0800549c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80012ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d105      	bne.n	80012c0 <printRadioSettings+0x364>
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	49d7      	ldr	r1, [pc, #860]	; (8001618 <printRadioSettings+0x6bc>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fbb6 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe ff8b 	bl	80001e0 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 0108 	add.w	r1, r7, #8
 80012d2:	230a      	movs	r3, #10
 80012d4:	48d1      	ldr	r0, [pc, #836]	; (800161c <printRadioSettings+0x6c0>)
 80012d6:	f002 fff4 	bl	80042c2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80012da:	463b      	mov	r3, r7
 80012dc:	2205      	movs	r2, #5
 80012de:	4619      	mov	r1, r3
 80012e0:	200a      	movs	r0, #10
 80012e2:	f7ff f9e1 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012e6:	793b      	ldrb	r3, [r7, #4]
 80012e8:	461c      	mov	r4, r3
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	461d      	mov	r5, r3
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	787a      	ldrb	r2, [r7, #1]
 80012f2:	7839      	ldrb	r1, [r7, #0]
 80012f4:	f107 0008 	add.w	r0, r7, #8
 80012f8:	9102      	str	r1, [sp, #8]
 80012fa:	9201      	str	r2, [sp, #4]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	462b      	mov	r3, r5
 8001300:	4622      	mov	r2, r4
 8001302:	49c7      	ldr	r1, [pc, #796]	; (8001620 <printRadioSettings+0x6c4>)
 8001304:	f003 fb92 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4618      	mov	r0, r3
 800130e:	f7fe ff67 	bl	80001e0 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29a      	uxth	r2, r3
 8001316:	f107 0108 	add.w	r1, r7, #8
 800131a:	230a      	movs	r3, #10
 800131c:	48bf      	ldr	r0, [pc, #764]	; (800161c <printRadioSettings+0x6c0>)
 800131e:	f002 ffd0 	bl	80042c2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001322:	463b      	mov	r3, r7
 8001324:	2205      	movs	r2, #5
 8001326:	4619      	mov	r1, r3
 8001328:	200b      	movs	r0, #11
 800132a:	f7ff f9bd 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800132e:	793b      	ldrb	r3, [r7, #4]
 8001330:	461c      	mov	r4, r3
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	461d      	mov	r5, r3
 8001336:	78bb      	ldrb	r3, [r7, #2]
 8001338:	787a      	ldrb	r2, [r7, #1]
 800133a:	7839      	ldrb	r1, [r7, #0]
 800133c:	f107 0008 	add.w	r0, r7, #8
 8001340:	9102      	str	r1, [sp, #8]
 8001342:	9201      	str	r2, [sp, #4]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	462b      	mov	r3, r5
 8001348:	4622      	mov	r2, r4
 800134a:	49b6      	ldr	r1, [pc, #728]	; (8001624 <printRadioSettings+0x6c8>)
 800134c:	f003 fb6e 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ff43 	bl	80001e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f107 0108 	add.w	r1, r7, #8
 8001362:	230a      	movs	r3, #10
 8001364:	48ad      	ldr	r0, [pc, #692]	; (800161c <printRadioSettings+0x6c0>)
 8001366:	f002 ffac 	bl	80042c2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800136a:	463b      	mov	r3, r7
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	200c      	movs	r0, #12
 8001372:	f7ff f999 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001376:	783b      	ldrb	r3, [r7, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	49aa      	ldr	r1, [pc, #680]	; (8001628 <printRadioSettings+0x6cc>)
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fb53 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff28 	bl	80001e0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0108 	add.w	r1, r7, #8
 8001398:	230a      	movs	r3, #10
 800139a:	48a0      	ldr	r0, [pc, #640]	; (800161c <printRadioSettings+0x6c0>)
 800139c:	f002 ff91 	bl	80042c2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80013a0:	463b      	mov	r3, r7
 80013a2:	2201      	movs	r2, #1
 80013a4:	4619      	mov	r1, r3
 80013a6:	200d      	movs	r0, #13
 80013a8:	f7ff f97e 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013ac:	783b      	ldrb	r3, [r7, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	499d      	ldr	r1, [pc, #628]	; (800162c <printRadioSettings+0x6d0>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fb38 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe ff0d 	bl	80001e0 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f107 0108 	add.w	r1, r7, #8
 80013ce:	230a      	movs	r3, #10
 80013d0:	4892      	ldr	r0, [pc, #584]	; (800161c <printRadioSettings+0x6c0>)
 80013d2:	f002 ff76 	bl	80042c2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80013d6:	463b      	mov	r3, r7
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	200e      	movs	r0, #14
 80013de:	f7ff f963 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013e2:	783b      	ldrb	r3, [r7, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4991      	ldr	r1, [pc, #580]	; (8001630 <printRadioSettings+0x6d4>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fb1d 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe fef2 	bl	80001e0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f107 0108 	add.w	r1, r7, #8
 8001404:	230a      	movs	r3, #10
 8001406:	4885      	ldr	r0, [pc, #532]	; (800161c <printRadioSettings+0x6c0>)
 8001408:	f002 ff5b 	bl	80042c2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800140c:	463b      	mov	r3, r7
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff f948 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001418:	783b      	ldrb	r3, [r7, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4984      	ldr	r1, [pc, #528]	; (8001634 <printRadioSettings+0x6d8>)
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fb02 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe fed7 	bl	80001e0 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	f107 0108 	add.w	r1, r7, #8
 800143a:	230a      	movs	r3, #10
 800143c:	4877      	ldr	r0, [pc, #476]	; (800161c <printRadioSettings+0x6c0>)
 800143e:	f002 ff40 	bl	80042c2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001442:	463b      	mov	r3, r7
 8001444:	2205      	movs	r2, #5
 8001446:	4619      	mov	r1, r3
 8001448:	2010      	movs	r0, #16
 800144a:	f7ff f92d 	bl	80006a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800144e:	793b      	ldrb	r3, [r7, #4]
 8001450:	461c      	mov	r4, r3
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	461d      	mov	r5, r3
 8001456:	78bb      	ldrb	r3, [r7, #2]
 8001458:	787a      	ldrb	r2, [r7, #1]
 800145a:	7839      	ldrb	r1, [r7, #0]
 800145c:	f107 0008 	add.w	r0, r7, #8
 8001460:	9102      	str	r1, [sp, #8]
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	462b      	mov	r3, r5
 8001468:	4622      	mov	r2, r4
 800146a:	4973      	ldr	r1, [pc, #460]	; (8001638 <printRadioSettings+0x6dc>)
 800146c:	f003 fade 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe feb3 	bl	80001e0 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f107 0108 	add.w	r1, r7, #8
 8001482:	230a      	movs	r3, #10
 8001484:	4865      	ldr	r0, [pc, #404]	; (800161c <printRadioSettings+0x6c0>)
 8001486:	f002 ff1c 	bl	80042c2 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800148a:	2011      	movs	r0, #17
 800148c:	f7ff f8e4 	bl	8000658 <NRF24_read_register>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001496:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800149a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4966      	ldr	r1, [pc, #408]	; (800163c <printRadioSettings+0x6e0>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fac1 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe fe96 	bl	80001e0 <strlen>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f107 0108 	add.w	r1, r7, #8
 80014bc:	230a      	movs	r3, #10
 80014be:	4857      	ldr	r0, [pc, #348]	; (800161c <printRadioSettings+0x6c0>)
 80014c0:	f002 feff 	bl	80042c2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80014c4:	2012      	movs	r0, #18
 80014c6:	f7ff f8c7 	bl	8000658 <NRF24_read_register>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4958      	ldr	r1, [pc, #352]	; (8001640 <printRadioSettings+0x6e4>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 faa4 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe79 	bl	80001e0 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f107 0108 	add.w	r1, r7, #8
 80014f6:	230a      	movs	r3, #10
 80014f8:	4848      	ldr	r0, [pc, #288]	; (800161c <printRadioSettings+0x6c0>)
 80014fa:	f002 fee2 	bl	80042c2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80014fe:	2013      	movs	r0, #19
 8001500:	f7ff f8aa 	bl	8000658 <NRF24_read_register>
 8001504:	4603      	mov	r3, r0
 8001506:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800150a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800150e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	494b      	ldr	r1, [pc, #300]	; (8001644 <printRadioSettings+0x6e8>)
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fa87 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fe5c 	bl	80001e0 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	f107 0108 	add.w	r1, r7, #8
 8001530:	230a      	movs	r3, #10
 8001532:	483a      	ldr	r0, [pc, #232]	; (800161c <printRadioSettings+0x6c0>)
 8001534:	f002 fec5 	bl	80042c2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001538:	2014      	movs	r0, #20
 800153a:	f7ff f88d 	bl	8000658 <NRF24_read_register>
 800153e:	4603      	mov	r3, r0
 8001540:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001544:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	493d      	ldr	r1, [pc, #244]	; (8001648 <printRadioSettings+0x6ec>)
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fa6a 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fe3f 	bl	80001e0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	f107 0108 	add.w	r1, r7, #8
 800156a:	230a      	movs	r3, #10
 800156c:	482b      	ldr	r0, [pc, #172]	; (800161c <printRadioSettings+0x6c0>)
 800156e:	f002 fea8 	bl	80042c2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001572:	2015      	movs	r0, #21
 8001574:	f7ff f870 	bl	8000658 <NRF24_read_register>
 8001578:	4603      	mov	r3, r0
 800157a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800157e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4930      	ldr	r1, [pc, #192]	; (800164c <printRadioSettings+0x6f0>)
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fa4d 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fe22 	bl	80001e0 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f107 0108 	add.w	r1, r7, #8
 80015a4:	230a      	movs	r3, #10
 80015a6:	481d      	ldr	r0, [pc, #116]	; (800161c <printRadioSettings+0x6c0>)
 80015a8:	f002 fe8b 	bl	80042c2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80015ac:	2016      	movs	r0, #22
 80015ae:	f7ff f853 	bl	8000658 <NRF24_read_register>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4922      	ldr	r1, [pc, #136]	; (8001650 <printRadioSettings+0x6f4>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fa30 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe05 	bl	80001e0 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29a      	uxth	r2, r3
 80015da:	f107 0108 	add.w	r1, r7, #8
 80015de:	230a      	movs	r3, #10
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <printRadioSettings+0x6c0>)
 80015e2:	f002 fe6e 	bl	80042c2 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80015e6:	201c      	movs	r0, #28
 80015e8:	f7ff f836 	bl	8000658 <NRF24_read_register>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfcc      	ite	gt
 80015fe:	2301      	movgt	r3, #1
 8001600:	2300      	movle	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	e01d      	b.n	8001654 <printRadioSettings+0x6f8>
 8001618:	080054b0 	.word	0x080054b0
 800161c:	20000100 	.word	0x20000100
 8001620:	080054c4 	.word	0x080054c4
 8001624:	080054f4 	.word	0x080054f4
 8001628:	08005524 	.word	0x08005524
 800162c:	0800554c 	.word	0x0800554c
 8001630:	08005574 	.word	0x08005574
 8001634:	0800559c 	.word	0x0800559c
 8001638:	080055c4 	.word	0x080055c4
 800163c:	080055f0 	.word	0x080055f0
 8001640:	0800560c 	.word	0x0800560c
 8001644:	08005628 	.word	0x08005628
 8001648:	08005644 	.word	0x08005644
 800164c:	08005660 	.word	0x08005660
 8001650:	0800567c 	.word	0x0800567c
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001658:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800165c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001660:	2b00      	cmp	r3, #0
 8001662:	bfcc      	ite	gt
 8001664:	2301      	movgt	r3, #1
 8001666:	2300      	movle	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800166c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001670:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001674:	2b00      	cmp	r3, #0
 8001676:	bfcc      	ite	gt
 8001678:	2301      	movgt	r3, #1
 800167a:	2300      	movle	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001680:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001684:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001688:	2b00      	cmp	r3, #0
 800168a:	bfcc      	ite	gt
 800168c:	2301      	movgt	r3, #1
 800168e:	2300      	movle	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001698:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800169c:	2b00      	cmp	r3, #0
 800169e:	bfcc      	ite	gt
 80016a0:	2301      	movgt	r3, #1
 80016a2:	2300      	movle	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f107 0008 	add.w	r0, r7, #8
 80016aa:	9303      	str	r3, [sp, #12]
 80016ac:	9402      	str	r4, [sp, #8]
 80016ae:	9101      	str	r1, [sp, #4]
 80016b0:	9200      	str	r2, [sp, #0]
 80016b2:	4633      	mov	r3, r6
 80016b4:	462a      	mov	r2, r5
 80016b6:	4936      	ldr	r1, [pc, #216]	; (8001790 <printRadioSettings+0x834>)
 80016b8:	f003 f9b8 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fd8d 	bl	80001e0 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f107 0108 	add.w	r1, r7, #8
 80016ce:	230a      	movs	r3, #10
 80016d0:	4830      	ldr	r0, [pc, #192]	; (8001794 <printRadioSettings+0x838>)
 80016d2:	f002 fdf6 	bl	80042c2 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80016d6:	201d      	movs	r0, #29
 80016d8:	f7fe ffbe 	bl	8000658 <NRF24_read_register>
 80016dc:	4603      	mov	r3, r0
 80016de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80016e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <printRadioSettings+0x7a0>
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	4929      	ldr	r1, [pc, #164]	; (8001798 <printRadioSettings+0x83c>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 f999 	bl	8004a2c <siprintf>
 80016fa:	e005      	b.n	8001708 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4926      	ldr	r1, [pc, #152]	; (800179c <printRadioSettings+0x840>)
 8001702:	4618      	mov	r0, r3
 8001704:	f003 f992 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fd67 	bl	80001e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 0108 	add.w	r1, r7, #8
 800171a:	230a      	movs	r3, #10
 800171c:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x838>)
 800171e:	f002 fdd0 	bl	80042c2 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001722:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <printRadioSettings+0x7e0>
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	491b      	ldr	r1, [pc, #108]	; (80017a0 <printRadioSettings+0x844>)
 8001734:	4618      	mov	r0, r3
 8001736:	f003 f979 	bl	8004a2c <siprintf>
 800173a:	e005      	b.n	8001748 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4918      	ldr	r1, [pc, #96]	; (80017a4 <printRadioSettings+0x848>)
 8001742:	4618      	mov	r0, r3
 8001744:	f003 f972 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd47 	bl	80001e0 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	f107 0108 	add.w	r1, r7, #8
 800175a:	230a      	movs	r3, #10
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <printRadioSettings+0x838>)
 800175e:	f002 fdb0 	bl	80042c2 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4910      	ldr	r1, [pc, #64]	; (80017a8 <printRadioSettings+0x84c>)
 8001768:	4618      	mov	r0, r3
 800176a:	f003 f95f 	bl	8004a2c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fd34 	bl	80001e0 <strlen>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	f107 0108 	add.w	r1, r7, #8
 8001780:	230a      	movs	r3, #10
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <printRadioSettings+0x838>)
 8001784:	f002 fd9d 	bl	80042c2 <HAL_UART_Transmit>
}
 8001788:	bf00      	nop
 800178a:	3774      	adds	r7, #116	; 0x74
 800178c:	46bd      	mov	sp, r7
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001790:	08005698 	.word	0x08005698
 8001794:	20000100 	.word	0x20000100
 8001798:	080056e4 	.word	0x080056e4
 800179c:	080056fc 	.word	0x080056fc
 80017a0:	08005714 	.word	0x08005714
 80017a4:	08005730 	.word	0x08005730
 80017a8:	08005304 	.word	0x08005304

080017ac <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80017ac:	b084      	sub	sp, #16
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	f107 0c08 	add.w	ip, r7, #8
 80017b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <nrf24_DebugUART_Init+0x2c>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2244      	movs	r2, #68	; 0x44
 80017c4:	4619      	mov	r1, r3
 80017c6:	f003 f91b 	bl	8004a00 <memcpy>
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017d2:	b004      	add	sp, #16
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000100 	.word	0x20000100

080017dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017e0:	f000 fc0c 	bl	8001ffc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017e4:	f000 f81c 	bl	8001820 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017e8:	f000 f936 	bl	8001a58 <MX_GPIO_Init>
	MX_SPI2_Init();
 80017ec:	f000 f8d4 	bl	8001998 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 80017f0:	f000 f908 	bl	8001a04 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80017f4:	f000 f87e 	bl	80018f4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	nrf_init();
 80017f8:	f000 f9ac 	bl	8001b54 <nrf_init>
	Switch_to_Transmitt_mode();
 80017fc:	f000 f9de 	bl	8001bbc <Switch_to_Transmitt_mode>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		send_DP_sensor_value_to_gateway();
 8001800:	f000 fb9a 	bl	8001f38 <send_DP_sensor_value_to_gateway>
		HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY();
 8001804:	f000 fbbe 	bl	8001f84 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8001808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <main+0x40>)
 800180e:	f001 faf0 	bl	8002df2 <HAL_GPIO_TogglePin>
		HAL_Delay(3000);
 8001812:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001816:	f000 fc63 	bl	80020e0 <HAL_Delay>
		send_DP_sensor_value_to_gateway();
 800181a:	e7f1      	b.n	8001800 <main+0x24>
 800181c:	40020800 	.word	0x40020800

08001820 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	2230      	movs	r2, #48	; 0x30
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f8f4 	bl	8004a1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <SystemClock_Config+0xcc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <SystemClock_Config+0xcc>)
 800184e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <SystemClock_Config+0xcc>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <SystemClock_Config+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <SystemClock_Config+0xd0>)
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <SystemClock_Config+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001888:	2310      	movs	r3, #16
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188c:	2302      	movs	r3, #2
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001894:	2308      	movs	r3, #8
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001898:	2348      	movs	r3, #72	; 0x48
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189c:	2302      	movs	r3, #2
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fabd 	bl	8002e28 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x98>
		Error_Handler();
 80018b4:	f000 f948 	bl	8001b48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2102      	movs	r1, #2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 fd1f 	bl	8003318 <HAL_RCC_ClockConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0xc4>
		Error_Handler();
 80018e0:	f000 f932 	bl	8001b48 <Error_Handler>
	}
}
 80018e4:	bf00      	nop
 80018e6:	3750      	adds	r7, #80	; 0x50
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_ADC1_Init+0x98>)
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <MX_ADC1_Init+0x9c>)
 800190a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_ADC1_Init+0x98>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <MX_ADC1_Init+0x98>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_ADC1_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_ADC1_Init+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_ADC1_Init+0x98>)
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_ADC1_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_ADC1_Init+0x98>)
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <MX_ADC1_Init+0xa0>)
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_ADC1_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_ADC1_Init+0x98>)
 8001940:	2201      	movs	r2, #1
 8001942:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_ADC1_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_ADC1_Init+0x98>)
 800194e:	2201      	movs	r2, #1
 8001950:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <MX_ADC1_Init+0x98>)
 8001954:	f000 fbe8 	bl	8002128 <HAL_ADC_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC1_Init+0x6e>
		Error_Handler();
 800195e:	f000 f8f3 	bl	8001b48 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800196e:	463b      	mov	r3, r7
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <MX_ADC1_Init+0x98>)
 8001974:	f000 fd9c 	bl	80024b0 <HAL_ADC_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC1_Init+0x8e>
		Error_Handler();
 800197e:	f000 f8e3 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000144 	.word	0x20000144
 8001990:	40012000 	.word	0x40012000
 8001994:	0f000001 	.word	0x0f000001

08001998 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_SPI2_Init+0x64>)
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <MX_SPI2_Init+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_SPI2_Init+0x64>)
 80019a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_SPI2_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_SPI2_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_SPI2_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_SPI2_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_SPI2_Init+0x64>)
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_SPI2_Init+0x64>)
 80019cc:	2220      	movs	r2, #32
 80019ce:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <MX_SPI2_Init+0x64>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_SPI2_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <MX_SPI2_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_SPI2_Init+0x64>)
 80019e4:	220a      	movs	r2, #10
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_SPI2_Init+0x64>)
 80019ea:	f001 fe75 	bl	80036d8 <HAL_SPI_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_SPI2_Init+0x60>
		Error_Handler();
 80019f4:	f000 f8a8 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000018c 	.word	0x2000018c
 8001a00:	40003800 	.word	0x40003800

08001a04 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <MX_USART2_UART_Init+0x50>)
 8001a0c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_USART2_UART_Init+0x4c>)
 8001a3c:	f002 fbf4 	bl	8004228 <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001a46:	f000 f87f 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001e4 	.word	0x200001e4
 8001a54:	40004400 	.word	0x40004400

08001a58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae4:	4816      	ldr	r0, [pc, #88]	; (8001b40 <MX_GPIO_Init+0xe8>)
 8001ae6:	f001 f96b 	bl	8002dc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CSN_PIN_Pin | CE_PIN_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <MX_GPIO_Init+0xec>)
 8001af2:	f001 f965 	bl	8002dc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_GPIO_Init+0xe8>)
 8001b10:	f000 ffd2 	bl	8002ab8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CSN_PIN_Pin CE_PIN_Pin */
	GPIO_InitStruct.Pin = CSN_PIN_Pin | CE_PIN_Pin;
 8001b14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_GPIO_Init+0xec>)
 8001b2e:	f000 ffc3 	bl	8002ab8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020000 	.word	0x40020000

08001b48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <nrf_init>:
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
#define NRF_SPI_PORT hspi2

void nrf_init(void) {
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	b097      	sub	sp, #92	; 0x5c
 8001b58:	af16      	add	r7, sp, #88	; 0x58
	NRF24_begin(CE_PIN_GPIO_Port, CSN_PIN_Pin, CE_PIN_Pin, NRF_SPI_PORT);
 8001b5a:	4c15      	ldr	r4, [pc, #84]	; (8001bb0 <nrf_init+0x5c>)
 8001b5c:	4668      	mov	r0, sp
 8001b5e:	1d23      	adds	r3, r4, #4
 8001b60:	2254      	movs	r2, #84	; 0x54
 8001b62:	4619      	mov	r1, r3
 8001b64:	f002 ff4c 	bl	8004a00 <memcpy>
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b72:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <nrf_init+0x60>)
 8001b74:	f7fe fe7a 	bl	800086c <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001b78:	4e0f      	ldr	r6, [pc, #60]	; (8001bb8 <nrf_init+0x64>)
 8001b7a:	466d      	mov	r5, sp
 8001b7c:	f106 0410 	add.w	r4, r6, #16
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b94:	f7ff fe0a 	bl	80017ac <nrf24_DebugUART_Init>
	NRF24_setAutoAck(true);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff f85f 	bl	8000c5c <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8001b9e:	2020      	movs	r0, #32
 8001ba0:	f7ff f818 	bl	8000bd4 <NRF24_setPayloadSize>
//	NRF24_stopListening();
//	NRF24_openWritingPipe(target_pipe_addr);
//	NRF24_setChannel(node_channel_addr);
	printRadioSettings();
 8001ba4:	f7ff f9da 	bl	8000f5c <printRadioSettings>
}
 8001ba8:	bf00      	nop
 8001baa:	3704      	adds	r7, #4
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb0:	2000018c 	.word	0x2000018c
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	200001e4 	.word	0x200001e4

08001bbc <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	NRF24_stopListening();
 8001bc0:	f7fe ff34 	bl	8000a2c <NRF24_stopListening>
	NRF24_openWritingPipe(target_pipe_addr);
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <Switch_to_Transmitt_mode+0x24>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ffad 	bl	8000b2c <NRF24_openWritingPipe>
	NRF24_setChannel(target_channel_addr);
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <Switch_to_Transmitt_mode+0x28>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe ffe7 	bl	8000baa <NRF24_setChannel>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000008 	.word	0x20000008

08001be8 <TRANSMITT_UPDATE_TO_GATEWAY>:
void Switch_to_Receiver_mode(void) {
	NRF24_openReadingPipe(1, node_pipe_addr);
	NRF24_setChannel(node_channel_addr);
	NRF24_startListening();
}
void TRANSMITT_UPDATE_TO_GATEWAY(char my_tx_data[]) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < +10; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e024      	b.n	8001c40 <TRANSMITT_UPDATE_TO_GATEWAY+0x58>
		if (!NRF24_write(my_tx_data, 32)) {
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe ff23 	bl	8000a44 <NRF24_write>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00d      	beq.n	8001c26 <TRANSMITT_UPDATE_TO_GATEWAY+0x3e>
			NRF24_write(my_tx_data, 32);
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe ff19 	bl	8000a44 <NRF24_write>
			HAL_UART_Transmit(&huart2,
 8001c12:	230a      	movs	r3, #10
 8001c14:	2221      	movs	r2, #33	; 0x21
 8001c16:	490e      	ldr	r1, [pc, #56]	; (8001c50 <TRANSMITT_UPDATE_TO_GATEWAY+0x68>)
 8001c18:	480e      	ldr	r0, [pc, #56]	; (8001c54 <TRANSMITT_UPDATE_TO_GATEWAY+0x6c>)
 8001c1a:	f002 fb52 	bl	80042c2 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update waiting for ack\n",
					strlen("Transmitt_update waiting for ack\n"), 10);
			HAL_Delay(200);
 8001c1e:	20c8      	movs	r0, #200	; 0xc8
 8001c20:	f000 fa5e 	bl	80020e0 <HAL_Delay>
 8001c24:	e009      	b.n	8001c3a <TRANSMITT_UPDATE_TO_GATEWAY+0x52>
		} else {
			HAL_UART_Transmit(&huart2,
 8001c26:	230a      	movs	r3, #10
 8001c28:	222a      	movs	r2, #42	; 0x2a
 8001c2a:	490b      	ldr	r1, [pc, #44]	; (8001c58 <TRANSMITT_UPDATE_TO_GATEWAY+0x70>)
 8001c2c:	4809      	ldr	r0, [pc, #36]	; (8001c54 <TRANSMITT_UPDATE_TO_GATEWAY+0x6c>)
 8001c2e:	f002 fb48 	bl	80042c2 <HAL_UART_Transmit>
					(uint8_t*) "Transmitt_update Transmitted successfully\n",
					strlen("Transmitt_update Transmitted successfully\n"), 10);
			HAL_Delay(100);
 8001c32:	2064      	movs	r0, #100	; 0x64
 8001c34:	f000 fa54 	bl	80020e0 <HAL_Delay>
			break;
 8001c38:	e006      	b.n	8001c48 <TRANSMITT_UPDATE_TO_GATEWAY+0x60>
	for (int i = 0; i < +10; i++) {
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	ddd7      	ble.n	8001bf6 <TRANSMITT_UPDATE_TO_GATEWAY+0xe>
		}
	}
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	08005848 	.word	0x08005848
 8001c54:	200001e4 	.word	0x200001e4
 8001c58:	0800586c 	.word	0x0800586c

08001c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_ADC_MspInit+0x7c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d127      	bne.n	8001d1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d06:	2301      	movs	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_ADC_MspInit+0x84>)
 8001d1a:	f000 fecd 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_SPI_MspInit+0x84>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12c      	bne.n	8001db0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001da0:	2305      	movs	r3, #5
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <HAL_SPI_MspInit+0x8c>)
 8001dac:	f000 fe84 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40003800 	.word	0x40003800
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_UART_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12b      	bne.n	8001e3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e1e:	230c      	movs	r3, #12
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <HAL_UART_MspInit+0x8c>)
 8001e3a:	f000 fe3d 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 f8fe 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb0:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <_sbrk+0x5c>)
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <_sbrk+0x60>)
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <_sbrk+0x64>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <_sbrk+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d207      	bcs.n	8001ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed8:	f002 fd68 	bl	80049ac <__errno>
 8001edc:	4603      	mov	r3, r0
 8001ede:	220c      	movs	r2, #12
 8001ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	e009      	b.n	8001efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <_sbrk+0x64>)
 8001ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20010000 	.word	0x20010000
 8001f08:	00000400 	.word	0x00000400
 8001f0c:	20000228 	.word	0x20000228
 8001f10:	20000240 	.word	0x20000240

08001f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <SystemInit+0x20>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <SystemInit+0x20>)
 8001f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <send_DP_sensor_value_to_gateway>:
 */

#include "utilities.h"
extern ADC_HandleTypeDef hadc1;

void send_DP_sensor_value_to_gateway(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); //TAKE SAMPLE
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <send_DP_sensor_value_to_gateway+0x44>)
 8001f40:	f000 f936 	bl	80021b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001f44:	2164      	movs	r1, #100	; 0x64
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <send_DP_sensor_value_to_gateway+0x44>)
 8001f48:	f000 fa19 	bl	800237e <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <send_DP_sensor_value_to_gateway+0x44>)
 8001f4e:	f000 faa1 	bl	8002494 <HAL_ADC_GetValue>
 8001f52:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_ADC_Stop(&hadc1);
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <send_DP_sensor_value_to_gateway+0x44>)
 8001f56:	f000 f9df 	bl	8002318 <HAL_ADC_Stop>
	char adc_str[32]; //UINT32_T TO CHAR ARRAY CONVERSION
	sprintf(adc_str, "%lu", adc_val);
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <send_DP_sensor_value_to_gateway+0x48>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fd63 	bl	8004a2c <siprintf>
	adc_str[6] = '\r';
 8001f66:	230d      	movs	r3, #13
 8001f68:	72bb      	strb	r3, [r7, #10]
	TRANSMITT_UPDATE_TO_GATEWAY(adc_str); //TRANSMITT MESSAGE TO GATEWAY
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fe3b 	bl	8001be8 <TRANSMITT_UPDATE_TO_GATEWAY>
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000144 	.word	0x20000144
 8001f80:	08005898 	.word	0x08005898

08001f84 <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY>:
void HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
	//check for availability of message
	if (NRF24_available()) {
 8001f8a:	f7fe fda7 	bl	8000adc <NRF24_available>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HANDLE_RECEIVED_MESSAGE_FROM_GATEWAY+0x1a>
		char received_data_from_nodes[50];
		NRF24_read(received_data_from_nodes, 32);
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2120      	movs	r1, #32
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fda7 	bl	8000aec <NRF24_read>
		//take action according to the message
	}
}
 8001f9e:	bf00      	nop
 8001fa0:	3738      	adds	r7, #56	; 0x38
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fae:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd2:	f7ff ff9f 	bl	8001f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f002 fcef 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff fbff 	bl	80017dc <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001fec:	080058f8 	.word	0x080058f8
  ldr r2, =_sbss
 8001ff0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ff4:	20000240 	.word	0x20000240

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_Init+0x40>)
 8002006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_Init+0x40>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_Init+0x40>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 fd13 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fe14 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fd1d 	bl	8002a9e <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 fcf3 	bl	8002a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000000c 	.word	0x2000000c
 8002098:	20000014 	.word	0x20000014
 800209c:	20000010 	.word	0x20000010

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000014 	.word	0x20000014
 80020c4:	2000022c 	.word	0x2000022c

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000022c 	.word	0x2000022c

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000014 	.word	0x20000014

08002128 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e033      	b.n	80021a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fdb0 	bl	8001cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800216e:	f023 0302 	bic.w	r3, r3, #2
 8002172:	f043 0202 	orr.w	r2, r3, #2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 faba 	bl	80026f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
 8002196:	e001      	b.n	800219c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Start+0x1a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e097      	b.n	80022fa <HAL_ADC_Start+0x14a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d018      	beq.n	8002212 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f0:	4b45      	ldr	r3, [pc, #276]	; (8002308 <HAL_ADC_Start+0x158>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a45      	ldr	r2, [pc, #276]	; (800230c <HAL_ADC_Start+0x15c>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9a      	lsrs	r2, r3, #18
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002204:	e002      	b.n	800220c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d15f      	bne.n	80022e0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800224a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225e:	d106      	bne.n	800226e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f023 0206 	bic.w	r2, r3, #6
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
 800226c:	e002      	b.n	8002274 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_ADC_Start+0x160>)
 800227e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002288:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d129      	bne.n	80022f8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	e020      	b.n	80022f8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <HAL_ADC_Start+0x164>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d11b      	bne.n	80022f8 <HAL_ADC_Start+0x148>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d114      	bne.n	80022f8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	e00b      	b.n	80022f8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0210 	orr.w	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2000000c 	.word	0x2000000c
 800230c:	431bde83 	.word	0x431bde83
 8002310:	40012300 	.word	0x40012300
 8002314:	40012000 	.word	0x40012000

08002318 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_ADC_Stop+0x16>
 800232a:	2302      	movs	r3, #2
 800232c:	e021      	b.n	8002372 <HAL_ADC_Stop+0x5a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239a:	d113      	bne.n	80023c4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023aa:	d10b      	bne.n	80023c4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e063      	b.n	800248c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80023c4:	f7ff fe80 	bl	80020c8 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023ca:	e021      	b.n	8002410 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d01d      	beq.n	8002410 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_ADC_PollForConversion+0x6c>
 80023da:	f7ff fe75 	bl	80020c8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d212      	bcs.n	8002410 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d00b      	beq.n	8002410 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e03d      	b.n	800248c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d1d6      	bne.n	80023cc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f06f 0212 	mvn.w	r2, #18
 8002426:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d123      	bne.n	800248a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11f      	bne.n	800248a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002462:	2b00      	cmp	r3, #0
 8002464:	d111      	bne.n	800248a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e105      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x228>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d925      	bls.n	8002528 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	2207      	movs	r2, #7
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43da      	mvns	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	400a      	ands	r2, r1
 8002500:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	4618      	mov	r0, r3
 8002514:	4603      	mov	r3, r0
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4403      	add	r3, r0
 800251a:	3b1e      	subs	r3, #30
 800251c:	409a      	lsls	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	e022      	b.n	800256e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6919      	ldr	r1, [r3, #16]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	2207      	movs	r2, #7
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	400a      	ands	r2, r1
 800254a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	4603      	mov	r3, r0
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4403      	add	r3, r0
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b06      	cmp	r3, #6
 8002574:	d824      	bhi.n	80025c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b05      	subs	r3, #5
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	3b05      	subs	r3, #5
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	635a      	str	r2, [r3, #52]	; 0x34
 80025be:	e04c      	b.n	800265a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	d824      	bhi.n	8002612 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b23      	subs	r3, #35	; 0x23
 80025da:	221f      	movs	r2, #31
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43da      	mvns	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	400a      	ands	r2, r1
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	3b23      	subs	r3, #35	; 0x23
 8002604:	fa00 f203 	lsl.w	r2, r0, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
 8002610:	e023      	b.n	800265a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b41      	subs	r3, #65	; 0x41
 8002624:	221f      	movs	r2, #31
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	400a      	ands	r2, r1
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3b41      	subs	r3, #65	; 0x41
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_ADC_ConfigChannel+0x234>)
 800265c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <HAL_ADC_ConfigChannel+0x238>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d109      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1cc>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b12      	cmp	r3, #18
 800266e:	d105      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_ADC_ConfigChannel+0x238>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d123      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x21e>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b10      	cmp	r3, #16
 800268c:	d003      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x1e6>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b11      	cmp	r3, #17
 8002694:	d11b      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d111      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_ADC_ConfigChannel+0x23c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <HAL_ADC_ConfigChannel+0x240>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	0c9a      	lsrs	r2, r3, #18
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026c0:	e002      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f9      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40012300 	.word	0x40012300
 80026e8:	40012000 	.word	0x40012000
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	431bde83 	.word	0x431bde83

080026f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fc:	4b79      	ldr	r3, [pc, #484]	; (80028e4 <ADC_Init+0x1f0>)
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	021a      	lsls	r2, r3, #8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800274c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <ADC_Init+0x1f4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d022      	beq.n	80027d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800279a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e00f      	b.n	80027f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0202 	bic.w	r2, r2, #2
 8002800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7e1b      	ldrb	r3, [r3, #24]
 800280c:	005a      	lsls	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800282e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800283e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	3b01      	subs	r3, #1
 800284c:	035a      	lsls	r2, r3, #13
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	e007      	b.n	8002868 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002866:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	3b01      	subs	r3, #1
 8002884:	051a      	lsls	r2, r3, #20
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800289c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028aa:	025a      	lsls	r2, r3, #9
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	029a      	lsls	r2, r3, #10
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012300 	.word	0x40012300
 80028e8:	0f000001 	.word	0x0f000001

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff47 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff5c 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffb0 	bl	8002a0c <SysTick_Config>
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e159      	b.n	8002d88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8148 	bne.w	8002d82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d005      	beq.n	8002b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d017      	beq.n	8002ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a2 	beq.w	8002d82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a56      	ldr	r2, [pc, #344]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <HAL_GPIO_Init+0x2e8>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5a:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_GPIO_Init+0x2ec>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_GPIO_Init+0x2f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x202>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_GPIO_Init+0x2f4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x1fe>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a47      	ldr	r2, [pc, #284]	; (8002db0 <HAL_GPIO_Init+0x2f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x1fa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a46      	ldr	r2, [pc, #280]	; (8002db4 <HAL_GPIO_Init+0x2fc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x1f6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a45      	ldr	r2, [pc, #276]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x1f2>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e008      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e004      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e002      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x204>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f002 0203 	and.w	r2, r2, #3
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	4093      	lsls	r3, r2
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ccc:	4935      	ldr	r1, [pc, #212]	; (8002da4 <HAL_GPIO_Init+0x2ec>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d28:	4a24      	ldr	r2, [pc, #144]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d2e:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	f67f aea2 	bls.w	8002ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40020000 	.word	0x40020000
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e04:	887a      	ldrh	r2, [r7, #2]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	041a      	lsls	r2, r3, #16
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	400b      	ands	r3, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	619a      	str	r2, [r3, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e267      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d075      	beq.n	8002f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e46:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d00c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d112      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05b      	beq.n	8002f30 <HAL_RCC_OscConfig+0x108>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d157      	bne.n	8002f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e242      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x74>
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x98>
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6f      	ldr	r2, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a68      	ldr	r2, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff f8f2 	bl	80020c8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff f8ee 	bl	80020c8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e207      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xc0>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7ff f8de 	bl	80020c8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7ff f8da 	bl	80020c8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1f3      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0xe8>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d063      	beq.n	8003006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1c7      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4937      	ldr	r1, [pc, #220]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	e03a      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x244>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7ff f893 	bl	80020c8 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7ff f88f 	bl	80020c8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1a8      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4925      	ldr	r1, [pc, #148]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x244>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f872 	bl	80020c8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7ff f86e 	bl	80020c8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e187      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d036      	beq.n	8003080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x248>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7ff f852 	bl	80020c8 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7ff f84e 	bl	80020c8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e167      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x200>
 8003046:	e01b      	b.n	8003080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x248>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7ff f83b 	bl	80020c8 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	e00e      	b.n	8003074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003056:	f7ff f837 	bl	80020c8 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d907      	bls.n	8003074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e150      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
 8003068:	40023800 	.word	0x40023800
 800306c:	42470000 	.word	0x42470000
 8003070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ea      	bne.n	8003056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8097 	beq.w	80031bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a7c      	ldr	r2, [pc, #496]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b7a      	ldr	r3, [pc, #488]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b77      	ldr	r3, [pc, #476]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b74      	ldr	r3, [pc, #464]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a73      	ldr	r2, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fff7 	bl	80020c8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe fff3 	bl	80020c8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e10c      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x2ea>
 8003104:	4b64      	ldr	r3, [pc, #400]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	e01c      	b.n	800314c <HAL_RCC_OscConfig+0x324>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b05      	cmp	r3, #5
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x30c>
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a5e      	ldr	r2, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a5b      	ldr	r2, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0x324>
 8003134:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b55      	ldr	r3, [pc, #340]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a54      	ldr	r2, [pc, #336]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0304 	bic.w	r3, r3, #4
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe ffb8 	bl	80020c8 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fe ffb4 	bl	80020c8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0cb      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ee      	beq.n	800315c <HAL_RCC_OscConfig+0x334>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003180:	f7fe ffa2 	bl	80020c8 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fe ff9e 	bl	80020c8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0b5      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319e:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ee      	bne.n	8003188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4a38      	ldr	r2, [pc, #224]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a1 	beq.w	8003308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d05c      	beq.n	800328c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d141      	bne.n	800325e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe ff72 	bl	80020c8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe ff6e 	bl	80020c8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e087      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	3b01      	subs	r3, #1
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	491b      	ldr	r1, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe ff47 	bl	80020c8 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323e:	f7fe ff43 	bl	80020c8 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e05c      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x416>
 800325c:	e054      	b.n	8003308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe ff30 	bl	80020c8 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe ff2c 	bl	80020c8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e045      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x444>
 800328a:	e03d      	b.n	8003308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e038      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
 8003298:	40023800 	.word	0x40023800
 800329c:	40007000 	.word	0x40007000
 80032a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x4ec>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d028      	beq.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d121      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d11a      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032dc:	4293      	cmp	r3, r2
 80032de:	d111      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0cc      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d90c      	bls.n	8003354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b8      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003384:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	494d      	ldr	r1, [pc, #308]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d044      	beq.n	8003438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d119      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e07f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e06f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e067      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f6:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4934      	ldr	r1, [pc, #208]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003408:	f7fe fe5e 	bl	80020c8 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fe fe5a 	bl	80020c8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e04f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 020c 	and.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	429a      	cmp	r2, r3
 8003436:	d1eb      	bne.n	8003410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d20c      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e032      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4916      	ldr	r1, [pc, #88]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	490e      	ldr	r1, [pc, #56]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349e:	f000 f821 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	490a      	ldr	r1, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fdbe 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023c00 	.word	0x40023c00
 80034d4:	40023800 	.word	0x40023800
 80034d8:	0800589c 	.word	0x0800589c
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	20000010 	.word	0x20000010

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e8:	b090      	sub	sp, #64	; 0x40
 80034ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
 80034f0:	2300      	movs	r3, #0
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	2300      	movs	r3, #0
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d00d      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x40>
 8003508:	2b08      	cmp	r3, #8
 800350a:	f200 80a1 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x16c>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 8003512:	2b04      	cmp	r3, #4
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x3a>
 8003516:	e09b      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_GetSysClockFreq+0x184>)
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800351c:	e09b      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351e:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003522:	e098      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352e:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d028      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	2200      	movs	r2, #0
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	627a      	str	r2, [r7, #36]	; 0x24
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800354c:	2100      	movs	r1, #0
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 8003550:	fb03 f201 	mul.w	r2, r3, r1
 8003554:	2300      	movs	r3, #0
 8003556:	fb00 f303 	mul.w	r3, r0, r3
 800355a:	4413      	add	r3, r2
 800355c:	4a43      	ldr	r2, [pc, #268]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 800355e:	fba0 1202 	umull	r1, r2, r0, r2
 8003562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003564:	460a      	mov	r2, r1
 8003566:	62ba      	str	r2, [r7, #40]	; 0x28
 8003568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356a:	4413      	add	r3, r2
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	2200      	movs	r2, #0
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	61fa      	str	r2, [r7, #28]
 8003576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800357e:	f7fc fe87 	bl	8000290 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4613      	mov	r3, r2
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358a:	e053      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358c:	4b35      	ldr	r3, [pc, #212]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	2200      	movs	r2, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	617a      	str	r2, [r7, #20]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800359e:	f04f 0b00 	mov.w	fp, #0
 80035a2:	4652      	mov	r2, sl
 80035a4:	465b      	mov	r3, fp
 80035a6:	f04f 0000 	mov.w	r0, #0
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	0159      	lsls	r1, r3, #5
 80035b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b4:	0150      	lsls	r0, r2, #5
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ebb2 080a 	subs.w	r8, r2, sl
 80035be:	eb63 090b 	sbc.w	r9, r3, fp
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035d6:	ebb2 0408 	subs.w	r4, r2, r8
 80035da:	eb63 0509 	sbc.w	r5, r3, r9
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	00eb      	lsls	r3, r5, #3
 80035e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ec:	00e2      	lsls	r2, r4, #3
 80035ee:	4614      	mov	r4, r2
 80035f0:	461d      	mov	r5, r3
 80035f2:	eb14 030a 	adds.w	r3, r4, sl
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	eb45 030b 	adc.w	r3, r5, fp
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360a:	4629      	mov	r1, r5
 800360c:	028b      	lsls	r3, r1, #10
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003614:	4621      	mov	r1, r4
 8003616:	028a      	lsls	r2, r1, #10
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	2200      	movs	r2, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	60fa      	str	r2, [r7, #12]
 8003624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003628:	f7fc fe32 	bl	8000290 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetSysClockFreq+0x184>)
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003658:	4618      	mov	r0, r3
 800365a:	3740      	adds	r7, #64	; 0x40
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	017d7840 	.word	0x017d7840

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000000c 	.word	0x2000000c

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff0 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	080058ac 	.word	0x080058ac

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff ffdc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0b5b      	lsrs	r3, r3, #13
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	080058ac 	.word	0x080058ac

080036d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07b      	b.n	80037e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fa:	d009      	beq.n	8003710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
 8003702:	e005      	b.n	8003710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe fb02 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	ea42 0103 	orr.w	r1, r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 0104 	and.w	r1, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	f003 0210 	and.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b088      	sub	sp, #32
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_SPI_Transmit+0x22>
 8003808:	2302      	movs	r3, #2
 800380a:	e126      	b.n	8003a5a <HAL_SPI_Transmit+0x270>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003814:	f7fe fc58 	bl	80020c8 <HAL_GetTick>
 8003818:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d002      	beq.n	8003830 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800382e:	e10b      	b.n	8003a48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_Transmit+0x52>
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003840:	e102      	b.n	8003a48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2203      	movs	r2, #3
 8003846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003888:	d10f      	bne.n	80038aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d007      	beq.n	80038c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d0:	d14b      	bne.n	800396a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_Transmit+0xf6>
 80038da:	8afb      	ldrh	r3, [r7, #22]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d13e      	bne.n	800395e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	881a      	ldrh	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	1c9a      	adds	r2, r3, #2
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003904:	e02b      	b.n	800395e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d112      	bne.n	800393a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	881a      	ldrh	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	1c9a      	adds	r2, r3, #2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	86da      	strh	r2, [r3, #54]	; 0x36
 8003938:	e011      	b.n	800395e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800393a:	f7fe fbc5 	bl	80020c8 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d803      	bhi.n	8003952 <HAL_SPI_Transmit+0x168>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d102      	bne.n	8003958 <HAL_SPI_Transmit+0x16e>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800395c:	e074      	b.n	8003a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ce      	bne.n	8003906 <HAL_SPI_Transmit+0x11c>
 8003968:	e04c      	b.n	8003a04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Transmit+0x18e>
 8003972:	8afb      	ldrh	r3, [r7, #22]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d140      	bne.n	80039fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800399e:	e02c      	b.n	80039fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d113      	bne.n	80039d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80039d4:	e011      	b.n	80039fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d6:	f7fe fb77 	bl	80020c8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d803      	bhi.n	80039ee <HAL_SPI_Transmit+0x204>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_Transmit+0x20a>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f8:	e026      	b.n	8003a48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1cd      	bne.n	80039a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	6839      	ldr	r1, [r7, #0]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fbcb 	bl	80041a4 <SPI_EndRxTxTransaction>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e000      	b.n	8003a48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b088      	sub	sp, #32
 8003a66:	af02      	add	r7, sp, #8
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7e:	d112      	bne.n	8003aa6 <HAL_SPI_Receive+0x44>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10e      	bne.n	8003aa6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a90:	88fa      	ldrh	r2, [r7, #6]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f8f1 	bl	8003c84 <HAL_SPI_TransmitReceive>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	e0ea      	b.n	8003c7c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_SPI_Receive+0x52>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0e3      	b.n	8003c7c <HAL_SPI_Receive+0x21a>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003abc:	f7fe fb04 	bl	80020c8 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad2:	e0ca      	b.n	8003c6a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Receive+0x7e>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ae4:	e0c1      	b.n	8003c6a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	88fa      	ldrh	r2, [r7, #6]
 8003afe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	d10f      	bne.n	8003b4e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d007      	beq.n	8003b6c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d162      	bne.n	8003c3a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b74:	e02e      	b.n	8003bd4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d115      	bne.n	8003bb0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f103 020c 	add.w	r2, r3, #12
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bae:	e011      	b.n	8003bd4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb0:	f7fe fa8a 	bl	80020c8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d803      	bhi.n	8003bc8 <HAL_SPI_Receive+0x166>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d102      	bne.n	8003bce <HAL_SPI_Receive+0x16c>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bd2:	e04a      	b.n	8003c6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1cb      	bne.n	8003b76 <HAL_SPI_Receive+0x114>
 8003bde:	e031      	b.n	8003c44 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d113      	bne.n	8003c16 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	b292      	uxth	r2, r2
 8003bfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	1c9a      	adds	r2, r3, #2
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c14:	e011      	b.n	8003c3a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c16:	f7fe fa57 	bl	80020c8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d803      	bhi.n	8003c2e <HAL_SPI_Receive+0x1cc>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d102      	bne.n	8003c34 <HAL_SPI_Receive+0x1d2>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c38:	e017      	b.n	8003c6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1cd      	bne.n	8003be0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	6839      	ldr	r1, [r7, #0]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fa45 	bl	80040d8 <SPI_EndRxTransaction>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
 8003c66:	e000      	b.n	8003c6a <HAL_SPI_Receive+0x208>
  }

error :
 8003c68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	; 0x30
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c92:	2301      	movs	r3, #1
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_SPI_TransmitReceive+0x26>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e18a      	b.n	8003fc0 <HAL_SPI_TransmitReceive+0x33c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb2:	f7fe fa09 	bl	80020c8 <HAL_GetTick>
 8003cb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00f      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x70>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cda:	d107      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d103      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x68>
 8003ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d003      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cf2:	e15b      	b.n	8003fac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x82>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x82>
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d0c:	e14e      	b.n	8003fac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d003      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	887a      	ldrh	r2, [r7, #2]
 8003d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d007      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d178      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_TransmitReceive+0x10a>
 8003d88:	8b7b      	ldrh	r3, [r7, #26]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d166      	bne.n	8003e5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	1c9a      	adds	r2, r3, #2
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db2:	e053      	b.n	8003e5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d11b      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x176>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d016      	beq.n	8003dfa <HAL_SPI_TransmitReceive+0x176>
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d113      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	881a      	ldrh	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d119      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x1b8>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d014      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	b292      	uxth	r2, r2
 8003e1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	1c9a      	adds	r2, r3, #2
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e3c:	f7fe f944 	bl	80020c8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d807      	bhi.n	8003e5c <HAL_SPI_TransmitReceive+0x1d8>
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d003      	beq.n	8003e5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e5a:	e0a7      	b.n	8003fac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1a6      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x130>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1a1      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x130>
 8003e70:	e07c      	b.n	8003f6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x1fc>
 8003e7a:	8b7b      	ldrh	r3, [r7, #26]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d16b      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea6:	e057      	b.n	8003f58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x26c>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d017      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x26c>
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d114      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d119      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x2ae>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d014      	beq.n	8003f32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f32:	f7fe f8c9 	bl	80020c8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d803      	bhi.n	8003f4a <HAL_SPI_TransmitReceive+0x2c6>
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d102      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x2cc>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d103      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f56:	e029      	b.n	8003fac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1a2      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x224>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d19d      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f917 	bl	80041a4 <SPI_EndRxTxTransaction>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f88:	e010      	b.n	8003fac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	e000      	b.n	8003fac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3730      	adds	r7, #48	; 0x30
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fd8:	f7fe f876 	bl	80020c8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fe8:	f7fe f86e 	bl	80020c8 <HAL_GetTick>
 8003fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	015b      	lsls	r3, r3, #5
 8003ff4:	0d1b      	lsrs	r3, r3, #20
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	fb02 f303 	mul.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffe:	e054      	b.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d050      	beq.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004008:	f7fe f85e 	bl	80020c8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	429a      	cmp	r2, r3
 8004016:	d902      	bls.n	800401e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d13d      	bne.n	800409a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800402c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d111      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d004      	beq.n	800404c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d107      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004064:	d10f      	bne.n	8004086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e017      	b.n	80040ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d19b      	bne.n	8004000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	2000000c 	.word	0x2000000c

080040d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ec:	d111      	bne.n	8004112 <SPI_EndRxTransaction+0x3a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f6:	d004      	beq.n	8004102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d107      	bne.n	8004112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411a:	d12a      	bne.n	8004172 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004124:	d012      	beq.n	800414c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff ff49 	bl	8003fc8 <SPI_WaitFlagStateUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02d      	beq.n	8004198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e026      	b.n	800419a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2200      	movs	r2, #0
 8004154:	2101      	movs	r1, #1
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff ff36 	bl	8003fc8 <SPI_WaitFlagStateUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01a      	beq.n	8004198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e013      	b.n	800419a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2200      	movs	r2, #0
 800417a:	2101      	movs	r1, #1
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff ff23 	bl	8003fc8 <SPI_WaitFlagStateUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e000      	b.n	800419a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041b0:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <SPI_EndRxTxTransaction+0x7c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <SPI_EndRxTxTransaction+0x80>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	0d5b      	lsrs	r3, r3, #21
 80041bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ce:	d112      	bne.n	80041f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff fef4 	bl	8003fc8 <SPI_WaitFlagStateUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e00f      	b.n	8004216 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3b01      	subs	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d0f2      	beq.n	80041f6 <SPI_EndRxTxTransaction+0x52>
 8004210:	e000      	b.n	8004214 <SPI_EndRxTxTransaction+0x70>
        break;
 8004212:	bf00      	nop
  }

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c
 8004224:	165e9f81 	.word	0x165e9f81

08004228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e03f      	b.n	80042ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fdb8 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f929 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b08a      	sub	sp, #40	; 0x28
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d17c      	bne.n	80043dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_UART_Transmit+0x2c>
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e075      	b.n	80043de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Transmit+0x3e>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e06e      	b.n	80043de <HAL_UART_Transmit+0x11c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2221      	movs	r2, #33	; 0x21
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004316:	f7fd fed7 	bl	80020c8 <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004330:	d108      	bne.n	8004344 <HAL_UART_Transmit+0x82>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	e003      	b.n	800434c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004354:	e02a      	b.n	80043ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f840 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e036      	b.n	80043de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	3302      	adds	r3, #2
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	e007      	b.n	800439e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	3301      	adds	r3, #1
 800439c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1cf      	bne.n	8004356 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2140      	movs	r1, #64	; 0x40
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f810 	bl	80043e6 <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e006      	b.n	80043de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b090      	sub	sp, #64	; 0x40
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f6:	e050      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d04c      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0x30>
 8004406:	f7fd fe5f 	bl	80020c8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004412:	429a      	cmp	r2, r3
 8004414:	d241      	bcs.n	800449a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800442c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004436:	637a      	str	r2, [r7, #52]	; 0x34
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800443c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446a:	623a      	str	r2, [r7, #32]
 800446c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	69f9      	ldr	r1, [r7, #28]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	61bb      	str	r3, [r7, #24]
   return(result);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e00f      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d09f      	beq.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3740      	adds	r7, #64	; 0x40
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b0c0      	sub	sp, #256	; 0x100
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	ea40 0301 	orr.w	r3, r0, r1
 80044ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800451c:	f021 010c 	bic.w	r1, r1, #12
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800452a:	430b      	orrs	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453e:	6999      	ldr	r1, [r3, #24]
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	ea40 0301 	orr.w	r3, r0, r1
 800454a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8f      	ldr	r3, [pc, #572]	; (8004790 <UART_SetConfig+0x2cc>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0xa0>
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8d      	ldr	r3, [pc, #564]	; (8004794 <UART_SetConfig+0x2d0>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d104      	bne.n	800456e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7ff f8a4 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8004568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800456c:	e003      	b.n	8004576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456e:	f7ff f88b 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8004572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004580:	f040 810c 	bne.w	800479c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800458e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	1891      	adds	r1, r2, r2
 800459c:	65b9      	str	r1, [r7, #88]	; 0x58
 800459e:	415b      	adcs	r3, r3
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a6:	4621      	mov	r1, r4
 80045a8:	eb12 0801 	adds.w	r8, r2, r1
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb43 0901 	adc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045d4:	462b      	mov	r3, r5
 80045d6:	eb49 0303 	adc.w	r3, r9, r3
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045f2:	460b      	mov	r3, r1
 80045f4:	18db      	adds	r3, r3, r3
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
 80045f8:	4613      	mov	r3, r2
 80045fa:	eb42 0303 	adc.w	r3, r2, r3
 80045fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004608:	f7fb fe42 	bl	8000290 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <UART_SetConfig+0x2d4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	64b9      	str	r1, [r7, #72]	; 0x48
 8004634:	415b      	adcs	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800463c:	4641      	mov	r1, r8
 800463e:	eb12 0a01 	adds.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0b01 	adc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	4692      	mov	sl, r2
 800465e:	469b      	mov	fp, r3
 8004660:	4643      	mov	r3, r8
 8004662:	eb1a 0303 	adds.w	r3, sl, r3
 8004666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800466a:	464b      	mov	r3, r9
 800466c:	eb4b 0303 	adc.w	r3, fp, r3
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800469a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800469e:	f7fb fdf7 	bl	8000290 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2301 	umull	r2, r3, r3, r1
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2264      	movs	r2, #100	; 0x64
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	1acb      	subs	r3, r1, r3
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <UART_SetConfig+0x2d4>)
 80046c0:	fba3 2302 	umull	r2, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046e8:	415b      	adcs	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6339      	str	r1, [r7, #48]	; 0x30
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004724:	464b      	mov	r3, r9
 8004726:	460a      	mov	r2, r1
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800473c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800475a:	f7fb fd99 	bl	8000290 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x2d4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x2d4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800478c:	e105      	b.n	800499a <UART_SetConfig+0x4d6>
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	6239      	str	r1, [r7, #32]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047be:	4641      	mov	r1, r8
 80047c0:	1854      	adds	r4, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0501 	adc.w	r5, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	00eb      	lsls	r3, r5, #3
 80047d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	4643      	mov	r3, r8
 80047de:	18e3      	adds	r3, r4, r3
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e4:	464b      	mov	r3, r9
 80047e6:	eb45 0303 	adc.w	r3, r5, r3
 80047ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800480a:	4629      	mov	r1, r5
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004814:	4621      	mov	r1, r4
 8004816:	008a      	lsls	r2, r1, #2
 8004818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800481c:	f7fb fd38 	bl	8000290 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800483c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	61b9      	str	r1, [r7, #24]
 8004848:	415b      	adcs	r3, r3
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6139      	str	r1, [r7, #16]
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	67bb      	str	r3, [r7, #120]	; 0x78
 800489a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ba:	f7fb fce9 	bl	8000290 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	; 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	; 0x32
 80048d6:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e2:	441c      	add	r4, r3
 80048e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e8:	2200      	movs	r2, #0
 80048ea:	673b      	str	r3, [r7, #112]	; 0x70
 80048ec:	677a      	str	r2, [r7, #116]	; 0x74
 80048ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048f2:	4642      	mov	r2, r8
 80048f4:	464b      	mov	r3, r9
 80048f6:	1891      	adds	r1, r2, r2
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	415b      	adcs	r3, r3
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004902:	4641      	mov	r1, r8
 8004904:	1851      	adds	r1, r2, r1
 8004906:	6039      	str	r1, [r7, #0]
 8004908:	4649      	mov	r1, r9
 800490a:	414b      	adcs	r3, r1
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800491a:	4659      	mov	r1, fp
 800491c:	00cb      	lsls	r3, r1, #3
 800491e:	4651      	mov	r1, sl
 8004920:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004924:	4651      	mov	r1, sl
 8004926:	00ca      	lsls	r2, r1, #3
 8004928:	4610      	mov	r0, r2
 800492a:	4619      	mov	r1, r3
 800492c:	4603      	mov	r3, r0
 800492e:	4642      	mov	r2, r8
 8004930:	189b      	adds	r3, r3, r2
 8004932:	66bb      	str	r3, [r7, #104]	; 0x68
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	663b      	str	r3, [r7, #96]	; 0x60
 8004948:	667a      	str	r2, [r7, #100]	; 0x64
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004956:	4649      	mov	r1, r9
 8004958:	008b      	lsls	r3, r1, #2
 800495a:	4641      	mov	r1, r8
 800495c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004960:	4641      	mov	r1, r8
 8004962:	008a      	lsls	r2, r1, #2
 8004964:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004968:	f7fb fc92 	bl	8000290 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004972:	fba3 1302 	umull	r1, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2164      	movs	r1, #100	; 0x64
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4422      	add	r2, r4
 8004998:	609a      	str	r2, [r3, #8]
}
 800499a:	bf00      	nop
 800499c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	; (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000018 	.word	0x20000018

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4d0d      	ldr	r5, [pc, #52]	; (80049f0 <__libc_init_array+0x38>)
 80049bc:	4c0d      	ldr	r4, [pc, #52]	; (80049f4 <__libc_init_array+0x3c>)
 80049be:	1b64      	subs	r4, r4, r5
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	2600      	movs	r6, #0
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	4d0b      	ldr	r5, [pc, #44]	; (80049f8 <__libc_init_array+0x40>)
 80049ca:	4c0c      	ldr	r4, [pc, #48]	; (80049fc <__libc_init_array+0x44>)
 80049cc:	f000 fc8e 	bl	80052ec <_init>
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	2600      	movs	r6, #0
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	080058f0 	.word	0x080058f0
 80049f4:	080058f0 	.word	0x080058f0
 80049f8:	080058f0 	.word	0x080058f0
 80049fc:	080058f4 	.word	0x080058f4

08004a00 <memcpy>:
 8004a00:	440a      	add	r2, r1
 8004a02:	4291      	cmp	r1, r2
 8004a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a08:	d100      	bne.n	8004a0c <memcpy+0xc>
 8004a0a:	4770      	bx	lr
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a16:	4291      	cmp	r1, r2
 8004a18:	d1f9      	bne.n	8004a0e <memcpy+0xe>
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <memset>:
 8004a1c:	4402      	add	r2, r0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d100      	bne.n	8004a26 <memset+0xa>
 8004a24:	4770      	bx	lr
 8004a26:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2a:	e7f9      	b.n	8004a20 <memset+0x4>

08004a2c <siprintf>:
 8004a2c:	b40e      	push	{r1, r2, r3}
 8004a2e:	b500      	push	{lr}
 8004a30:	b09c      	sub	sp, #112	; 0x70
 8004a32:	ab1d      	add	r3, sp, #116	; 0x74
 8004a34:	9002      	str	r0, [sp, #8]
 8004a36:	9006      	str	r0, [sp, #24]
 8004a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a3c:	4809      	ldr	r0, [pc, #36]	; (8004a64 <siprintf+0x38>)
 8004a3e:	9107      	str	r1, [sp, #28]
 8004a40:	9104      	str	r1, [sp, #16]
 8004a42:	4909      	ldr	r1, [pc, #36]	; (8004a68 <siprintf+0x3c>)
 8004a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a48:	9105      	str	r1, [sp, #20]
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	a902      	add	r1, sp, #8
 8004a50:	f000 f868 	bl	8004b24 <_svfiprintf_r>
 8004a54:	9b02      	ldr	r3, [sp, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	b01c      	add	sp, #112	; 0x70
 8004a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a60:	b003      	add	sp, #12
 8004a62:	4770      	bx	lr
 8004a64:	20000018 	.word	0x20000018
 8004a68:	ffff0208 	.word	0xffff0208

08004a6c <__ssputs_r>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	688e      	ldr	r6, [r1, #8]
 8004a72:	429e      	cmp	r6, r3
 8004a74:	4682      	mov	sl, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	4690      	mov	r8, r2
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	d838      	bhi.n	8004af0 <__ssputs_r+0x84>
 8004a7e:	898a      	ldrh	r2, [r1, #12]
 8004a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a84:	d032      	beq.n	8004aec <__ssputs_r+0x80>
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	6909      	ldr	r1, [r1, #16]
 8004a8a:	eba5 0901 	sub.w	r9, r5, r1
 8004a8e:	6965      	ldr	r5, [r4, #20]
 8004a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a98:	3301      	adds	r3, #1
 8004a9a:	444b      	add	r3, r9
 8004a9c:	106d      	asrs	r5, r5, #1
 8004a9e:	429d      	cmp	r5, r3
 8004aa0:	bf38      	it	cc
 8004aa2:	461d      	movcc	r5, r3
 8004aa4:	0553      	lsls	r3, r2, #21
 8004aa6:	d531      	bpl.n	8004b0c <__ssputs_r+0xa0>
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f000 fb55 	bl	8005158 <_malloc_r>
 8004aae:	4606      	mov	r6, r0
 8004ab0:	b950      	cbnz	r0, 8004ac8 <__ssputs_r+0x5c>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	f8ca 3000 	str.w	r3, [sl]
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	6921      	ldr	r1, [r4, #16]
 8004aca:	464a      	mov	r2, r9
 8004acc:	f7ff ff98 	bl	8004a00 <memcpy>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	6126      	str	r6, [r4, #16]
 8004ade:	6165      	str	r5, [r4, #20]
 8004ae0:	444e      	add	r6, r9
 8004ae2:	eba5 0509 	sub.w	r5, r5, r9
 8004ae6:	6026      	str	r6, [r4, #0]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	463e      	mov	r6, r7
 8004aec:	42be      	cmp	r6, r7
 8004aee:	d900      	bls.n	8004af2 <__ssputs_r+0x86>
 8004af0:	463e      	mov	r6, r7
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	4632      	mov	r2, r6
 8004af6:	4641      	mov	r1, r8
 8004af8:	f000 faa8 	bl	800504c <memmove>
 8004afc:	68a3      	ldr	r3, [r4, #8]
 8004afe:	1b9b      	subs	r3, r3, r6
 8004b00:	60a3      	str	r3, [r4, #8]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	4433      	add	r3, r6
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e7db      	b.n	8004ac4 <__ssputs_r+0x58>
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	f000 fb97 	bl	8005240 <_realloc_r>
 8004b12:	4606      	mov	r6, r0
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1e1      	bne.n	8004adc <__ssputs_r+0x70>
 8004b18:	6921      	ldr	r1, [r4, #16]
 8004b1a:	4650      	mov	r0, sl
 8004b1c:	f000 fab0 	bl	8005080 <_free_r>
 8004b20:	e7c7      	b.n	8004ab2 <__ssputs_r+0x46>
	...

08004b24 <_svfiprintf_r>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4698      	mov	r8, r3
 8004b2a:	898b      	ldrh	r3, [r1, #12]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	b09d      	sub	sp, #116	; 0x74
 8004b30:	4607      	mov	r7, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	d50e      	bpl.n	8004b56 <_svfiprintf_r+0x32>
 8004b38:	690b      	ldr	r3, [r1, #16]
 8004b3a:	b963      	cbnz	r3, 8004b56 <_svfiprintf_r+0x32>
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	f000 fb0b 	bl	8005158 <_malloc_r>
 8004b42:	6028      	str	r0, [r5, #0]
 8004b44:	6128      	str	r0, [r5, #16]
 8004b46:	b920      	cbnz	r0, 8004b52 <_svfiprintf_r+0x2e>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	e0d1      	b.n	8004cf6 <_svfiprintf_r+0x1d2>
 8004b52:	2340      	movs	r3, #64	; 0x40
 8004b54:	616b      	str	r3, [r5, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b64:	2330      	movs	r3, #48	; 0x30
 8004b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d10 <_svfiprintf_r+0x1ec>
 8004b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b6e:	f04f 0901 	mov.w	r9, #1
 8004b72:	4623      	mov	r3, r4
 8004b74:	469a      	mov	sl, r3
 8004b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7a:	b10a      	cbz	r2, 8004b80 <_svfiprintf_r+0x5c>
 8004b7c:	2a25      	cmp	r2, #37	; 0x25
 8004b7e:	d1f9      	bne.n	8004b74 <_svfiprintf_r+0x50>
 8004b80:	ebba 0b04 	subs.w	fp, sl, r4
 8004b84:	d00b      	beq.n	8004b9e <_svfiprintf_r+0x7a>
 8004b86:	465b      	mov	r3, fp
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff ff6d 	bl	8004a6c <__ssputs_r>
 8004b92:	3001      	adds	r0, #1
 8004b94:	f000 80aa 	beq.w	8004cec <_svfiprintf_r+0x1c8>
 8004b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b9a:	445a      	add	r2, fp
 8004b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80a2 	beq.w	8004cec <_svfiprintf_r+0x1c8>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb2:	f10a 0a01 	add.w	sl, sl, #1
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc0:	4654      	mov	r4, sl
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc8:	4851      	ldr	r0, [pc, #324]	; (8004d10 <_svfiprintf_r+0x1ec>)
 8004bca:	f7fb fb11 	bl	80001f0 <memchr>
 8004bce:	9a04      	ldr	r2, [sp, #16]
 8004bd0:	b9d8      	cbnz	r0, 8004c0a <_svfiprintf_r+0xe6>
 8004bd2:	06d0      	lsls	r0, r2, #27
 8004bd4:	bf44      	itt	mi
 8004bd6:	2320      	movmi	r3, #32
 8004bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bdc:	0711      	lsls	r1, r2, #28
 8004bde:	bf44      	itt	mi
 8004be0:	232b      	movmi	r3, #43	; 0x2b
 8004be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b2a      	cmp	r3, #42	; 0x2a
 8004bec:	d015      	beq.n	8004c1a <_svfiprintf_r+0xf6>
 8004bee:	9a07      	ldr	r2, [sp, #28]
 8004bf0:	4654      	mov	r4, sl
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f04f 0c0a 	mov.w	ip, #10
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfe:	3b30      	subs	r3, #48	; 0x30
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	d94e      	bls.n	8004ca2 <_svfiprintf_r+0x17e>
 8004c04:	b1b0      	cbz	r0, 8004c34 <_svfiprintf_r+0x110>
 8004c06:	9207      	str	r2, [sp, #28]
 8004c08:	e014      	b.n	8004c34 <_svfiprintf_r+0x110>
 8004c0a:	eba0 0308 	sub.w	r3, r0, r8
 8004c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	46a2      	mov	sl, r4
 8004c18:	e7d2      	b.n	8004bc0 <_svfiprintf_r+0x9c>
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9103      	str	r1, [sp, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bfbb      	ittet	lt
 8004c26:	425b      	neglt	r3, r3
 8004c28:	f042 0202 	orrlt.w	r2, r2, #2
 8004c2c:	9307      	strge	r3, [sp, #28]
 8004c2e:	9307      	strlt	r3, [sp, #28]
 8004c30:	bfb8      	it	lt
 8004c32:	9204      	strlt	r2, [sp, #16]
 8004c34:	7823      	ldrb	r3, [r4, #0]
 8004c36:	2b2e      	cmp	r3, #46	; 0x2e
 8004c38:	d10c      	bne.n	8004c54 <_svfiprintf_r+0x130>
 8004c3a:	7863      	ldrb	r3, [r4, #1]
 8004c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3e:	d135      	bne.n	8004cac <_svfiprintf_r+0x188>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	9203      	str	r2, [sp, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bfb8      	it	lt
 8004c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c50:	3402      	adds	r4, #2
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d20 <_svfiprintf_r+0x1fc>
 8004c58:	7821      	ldrb	r1, [r4, #0]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f7fb fac7 	bl	80001f0 <memchr>
 8004c62:	b140      	cbz	r0, 8004c76 <_svfiprintf_r+0x152>
 8004c64:	2340      	movs	r3, #64	; 0x40
 8004c66:	eba0 000a 	sub.w	r0, r0, sl
 8004c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c6e:	9b04      	ldr	r3, [sp, #16]
 8004c70:	4303      	orrs	r3, r0
 8004c72:	3401      	adds	r4, #1
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7a:	4826      	ldr	r0, [pc, #152]	; (8004d14 <_svfiprintf_r+0x1f0>)
 8004c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c80:	2206      	movs	r2, #6
 8004c82:	f7fb fab5 	bl	80001f0 <memchr>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d038      	beq.n	8004cfc <_svfiprintf_r+0x1d8>
 8004c8a:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <_svfiprintf_r+0x1f4>)
 8004c8c:	bb1b      	cbnz	r3, 8004cd6 <_svfiprintf_r+0x1b2>
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	3307      	adds	r3, #7
 8004c92:	f023 0307 	bic.w	r3, r3, #7
 8004c96:	3308      	adds	r3, #8
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9c:	4433      	add	r3, r6
 8004c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca0:	e767      	b.n	8004b72 <_svfiprintf_r+0x4e>
 8004ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	2001      	movs	r0, #1
 8004caa:	e7a5      	b.n	8004bf8 <_svfiprintf_r+0xd4>
 8004cac:	2300      	movs	r3, #0
 8004cae:	3401      	adds	r4, #1
 8004cb0:	9305      	str	r3, [sp, #20]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 0c0a 	mov.w	ip, #10
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cbe:	3a30      	subs	r2, #48	; 0x30
 8004cc0:	2a09      	cmp	r2, #9
 8004cc2:	d903      	bls.n	8004ccc <_svfiprintf_r+0x1a8>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0c5      	beq.n	8004c54 <_svfiprintf_r+0x130>
 8004cc8:	9105      	str	r1, [sp, #20]
 8004cca:	e7c3      	b.n	8004c54 <_svfiprintf_r+0x130>
 8004ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e7f0      	b.n	8004cb8 <_svfiprintf_r+0x194>
 8004cd6:	ab03      	add	r3, sp, #12
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	462a      	mov	r2, r5
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <_svfiprintf_r+0x1f8>)
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f3af 8000 	nop.w
 8004ce6:	1c42      	adds	r2, r0, #1
 8004ce8:	4606      	mov	r6, r0
 8004cea:	d1d6      	bne.n	8004c9a <_svfiprintf_r+0x176>
 8004cec:	89ab      	ldrh	r3, [r5, #12]
 8004cee:	065b      	lsls	r3, r3, #25
 8004cf0:	f53f af2c 	bmi.w	8004b4c <_svfiprintf_r+0x28>
 8004cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf6:	b01d      	add	sp, #116	; 0x74
 8004cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfc:	ab03      	add	r3, sp, #12
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	462a      	mov	r2, r5
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <_svfiprintf_r+0x1f8>)
 8004d04:	a904      	add	r1, sp, #16
 8004d06:	4638      	mov	r0, r7
 8004d08:	f000 f87a 	bl	8004e00 <_printf_i>
 8004d0c:	e7eb      	b.n	8004ce6 <_svfiprintf_r+0x1c2>
 8004d0e:	bf00      	nop
 8004d10:	080058b4 	.word	0x080058b4
 8004d14:	080058be 	.word	0x080058be
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	08004a6d 	.word	0x08004a6d
 8004d20:	080058ba 	.word	0x080058ba

08004d24 <_printf_common>:
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	4616      	mov	r6, r2
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	688a      	ldr	r2, [r1, #8]
 8004d2e:	690b      	ldr	r3, [r1, #16]
 8004d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bfb8      	it	lt
 8004d38:	4613      	movlt	r3, r2
 8004d3a:	6033      	str	r3, [r6, #0]
 8004d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d40:	4607      	mov	r7, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	b10a      	cbz	r2, 8004d4a <_printf_common+0x26>
 8004d46:	3301      	adds	r3, #1
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	0699      	lsls	r1, r3, #26
 8004d4e:	bf42      	ittt	mi
 8004d50:	6833      	ldrmi	r3, [r6, #0]
 8004d52:	3302      	addmi	r3, #2
 8004d54:	6033      	strmi	r3, [r6, #0]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d106      	bne.n	8004d6c <_printf_common+0x48>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	dc26      	bgt.n	8004dba <_printf_common+0x96>
 8004d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d70:	1e13      	subs	r3, r2, #0
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	bf18      	it	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	0692      	lsls	r2, r2, #26
 8004d7a:	d42b      	bmi.n	8004dd4 <_printf_common+0xb0>
 8004d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d80:	4649      	mov	r1, r9
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d01e      	beq.n	8004dc8 <_printf_common+0xa4>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	68e5      	ldr	r5, [r4, #12]
 8004d8e:	6832      	ldr	r2, [r6, #0]
 8004d90:	f003 0306 	and.w	r3, r3, #6
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	bf08      	it	eq
 8004d98:	1aad      	subeq	r5, r5, r2
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	bf0c      	ite	eq
 8004da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da4:	2500      	movne	r5, #0
 8004da6:	4293      	cmp	r3, r2
 8004da8:	bfc4      	itt	gt
 8004daa:	1a9b      	subgt	r3, r3, r2
 8004dac:	18ed      	addgt	r5, r5, r3
 8004dae:	2600      	movs	r6, #0
 8004db0:	341a      	adds	r4, #26
 8004db2:	42b5      	cmp	r5, r6
 8004db4:	d11a      	bne.n	8004dec <_printf_common+0xc8>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e008      	b.n	8004dcc <_printf_common+0xa8>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	47c0      	blx	r8
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d103      	bne.n	8004dd0 <_printf_common+0xac>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	e7c6      	b.n	8004d62 <_printf_common+0x3e>
 8004dd4:	18e1      	adds	r1, r4, r3
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	2030      	movs	r0, #48	; 0x30
 8004dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dde:	4422      	add	r2, r4
 8004de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de8:	3302      	adds	r3, #2
 8004dea:	e7c7      	b.n	8004d7c <_printf_common+0x58>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4622      	mov	r2, r4
 8004df0:	4649      	mov	r1, r9
 8004df2:	4638      	mov	r0, r7
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d0e6      	beq.n	8004dc8 <_printf_common+0xa4>
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7d9      	b.n	8004db2 <_printf_common+0x8e>
	...

08004e00 <_printf_i>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	7e0f      	ldrb	r7, [r1, #24]
 8004e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e08:	2f78      	cmp	r7, #120	; 0x78
 8004e0a:	4691      	mov	r9, r2
 8004e0c:	4680      	mov	r8, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	469a      	mov	sl, r3
 8004e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e16:	d807      	bhi.n	8004e28 <_printf_i+0x28>
 8004e18:	2f62      	cmp	r7, #98	; 0x62
 8004e1a:	d80a      	bhi.n	8004e32 <_printf_i+0x32>
 8004e1c:	2f00      	cmp	r7, #0
 8004e1e:	f000 80d8 	beq.w	8004fd2 <_printf_i+0x1d2>
 8004e22:	2f58      	cmp	r7, #88	; 0x58
 8004e24:	f000 80a3 	beq.w	8004f6e <_printf_i+0x16e>
 8004e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e30:	e03a      	b.n	8004ea8 <_printf_i+0xa8>
 8004e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e36:	2b15      	cmp	r3, #21
 8004e38:	d8f6      	bhi.n	8004e28 <_printf_i+0x28>
 8004e3a:	a101      	add	r1, pc, #4	; (adr r1, 8004e40 <_printf_i+0x40>)
 8004e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004e29 	.word	0x08004e29
 8004e4c:	08004e29 	.word	0x08004e29
 8004e50:	08004e29 	.word	0x08004e29
 8004e54:	08004e29 	.word	0x08004e29
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004e29 	.word	0x08004e29
 8004e60:	08004e29 	.word	0x08004e29
 8004e64:	08004e29 	.word	0x08004e29
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	08004fb9 	.word	0x08004fb9
 8004e70:	08004edd 	.word	0x08004edd
 8004e74:	08004f9b 	.word	0x08004f9b
 8004e78:	08004e29 	.word	0x08004e29
 8004e7c:	08004e29 	.word	0x08004e29
 8004e80:	08004fdb 	.word	0x08004fdb
 8004e84:	08004e29 	.word	0x08004e29
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004e29 	.word	0x08004e29
 8004e90:	08004e29 	.word	0x08004e29
 8004e94:	08004fa3 	.word	0x08004fa3
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	602a      	str	r2, [r5, #0]
 8004ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0a3      	b.n	8004ff4 <_printf_i+0x1f4>
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	6829      	ldr	r1, [r5, #0]
 8004eb0:	0606      	lsls	r6, r0, #24
 8004eb2:	f101 0304 	add.w	r3, r1, #4
 8004eb6:	d50a      	bpl.n	8004ece <_printf_i+0xce>
 8004eb8:	680e      	ldr	r6, [r1, #0]
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	2e00      	cmp	r6, #0
 8004ebe:	da03      	bge.n	8004ec8 <_printf_i+0xc8>
 8004ec0:	232d      	movs	r3, #45	; 0x2d
 8004ec2:	4276      	negs	r6, r6
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec8:	485e      	ldr	r0, [pc, #376]	; (8005044 <_printf_i+0x244>)
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e019      	b.n	8004f02 <_printf_i+0x102>
 8004ece:	680e      	ldr	r6, [r1, #0]
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ed6:	bf18      	it	ne
 8004ed8:	b236      	sxthne	r6, r6
 8004eda:	e7ef      	b.n	8004ebc <_printf_i+0xbc>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	1d19      	adds	r1, r3, #4
 8004ee2:	6029      	str	r1, [r5, #0]
 8004ee4:	0601      	lsls	r1, r0, #24
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0xec>
 8004ee8:	681e      	ldr	r6, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0xf2>
 8004eec:	0646      	lsls	r6, r0, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0xe8>
 8004ef0:	881e      	ldrh	r6, [r3, #0]
 8004ef2:	4854      	ldr	r0, [pc, #336]	; (8005044 <_printf_i+0x244>)
 8004ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2308      	moveq	r3, #8
 8004efa:	230a      	movne	r3, #10
 8004efc:	2100      	movs	r1, #0
 8004efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f02:	6865      	ldr	r5, [r4, #4]
 8004f04:	60a5      	str	r5, [r4, #8]
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	bfa2      	ittt	ge
 8004f0a:	6821      	ldrge	r1, [r4, #0]
 8004f0c:	f021 0104 	bicge.w	r1, r1, #4
 8004f10:	6021      	strge	r1, [r4, #0]
 8004f12:	b90e      	cbnz	r6, 8004f18 <_printf_i+0x118>
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	d04d      	beq.n	8004fb4 <_printf_i+0x1b4>
 8004f18:	4615      	mov	r5, r2
 8004f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f22:	5dc7      	ldrb	r7, [r0, r7]
 8004f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f28:	4637      	mov	r7, r6
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	460e      	mov	r6, r1
 8004f2e:	d9f4      	bls.n	8004f1a <_printf_i+0x11a>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <_printf_i+0x14c>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07de      	lsls	r6, r3, #31
 8004f38:	d508      	bpl.n	8004f4c <_printf_i+0x14c>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	bfde      	ittt	le
 8004f42:	2330      	movle	r3, #48	; 0x30
 8004f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f4c:	1b52      	subs	r2, r2, r5
 8004f4e:	6122      	str	r2, [r4, #16]
 8004f50:	f8cd a000 	str.w	sl, [sp]
 8004f54:	464b      	mov	r3, r9
 8004f56:	aa03      	add	r2, sp, #12
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7ff fee2 	bl	8004d24 <_printf_common>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d14c      	bne.n	8004ffe <_printf_i+0x1fe>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	b004      	add	sp, #16
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	4835      	ldr	r0, [pc, #212]	; (8005044 <_printf_i+0x244>)
 8004f70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f74:	6829      	ldr	r1, [r5, #0]
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f7c:	6029      	str	r1, [r5, #0]
 8004f7e:	061d      	lsls	r5, r3, #24
 8004f80:	d514      	bpl.n	8004fac <_printf_i+0x1ac>
 8004f82:	07df      	lsls	r7, r3, #31
 8004f84:	bf44      	itt	mi
 8004f86:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8a:	6023      	strmi	r3, [r4, #0]
 8004f8c:	b91e      	cbnz	r6, 8004f96 <_printf_i+0x196>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f023 0320 	bic.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2310      	movs	r3, #16
 8004f98:	e7b0      	b.n	8004efc <_printf_i+0xfc>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	2378      	movs	r3, #120	; 0x78
 8004fa4:	4828      	ldr	r0, [pc, #160]	; (8005048 <_printf_i+0x248>)
 8004fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004faa:	e7e3      	b.n	8004f74 <_printf_i+0x174>
 8004fac:	0659      	lsls	r1, r3, #25
 8004fae:	bf48      	it	mi
 8004fb0:	b2b6      	uxthmi	r6, r6
 8004fb2:	e7e6      	b.n	8004f82 <_printf_i+0x182>
 8004fb4:	4615      	mov	r5, r2
 8004fb6:	e7bb      	b.n	8004f30 <_printf_i+0x130>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	6826      	ldr	r6, [r4, #0]
 8004fbc:	6961      	ldr	r1, [r4, #20]
 8004fbe:	1d18      	adds	r0, r3, #4
 8004fc0:	6028      	str	r0, [r5, #0]
 8004fc2:	0635      	lsls	r5, r6, #24
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0x1cc>
 8004fc8:	6019      	str	r1, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0x1d2>
 8004fcc:	0670      	lsls	r0, r6, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0x1c8>
 8004fd0:	8019      	strh	r1, [r3, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	4615      	mov	r5, r2
 8004fd8:	e7ba      	b.n	8004f50 <_printf_i+0x150>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	602a      	str	r2, [r5, #0]
 8004fe0:	681d      	ldr	r5, [r3, #0]
 8004fe2:	6862      	ldr	r2, [r4, #4]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7fb f902 	bl	80001f0 <memchr>
 8004fec:	b108      	cbz	r0, 8004ff2 <_printf_i+0x1f2>
 8004fee:	1b40      	subs	r0, r0, r5
 8004ff0:	6060      	str	r0, [r4, #4]
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	e7a8      	b.n	8004f50 <_printf_i+0x150>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	462a      	mov	r2, r5
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d0ab      	beq.n	8004f64 <_printf_i+0x164>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	079b      	lsls	r3, r3, #30
 8005010:	d413      	bmi.n	800503a <_printf_i+0x23a>
 8005012:	68e0      	ldr	r0, [r4, #12]
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	4298      	cmp	r0, r3
 8005018:	bfb8      	it	lt
 800501a:	4618      	movlt	r0, r3
 800501c:	e7a4      	b.n	8004f68 <_printf_i+0x168>
 800501e:	2301      	movs	r3, #1
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d09b      	beq.n	8004f64 <_printf_i+0x164>
 800502c:	3501      	adds	r5, #1
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	9903      	ldr	r1, [sp, #12]
 8005032:	1a5b      	subs	r3, r3, r1
 8005034:	42ab      	cmp	r3, r5
 8005036:	dcf2      	bgt.n	800501e <_printf_i+0x21e>
 8005038:	e7eb      	b.n	8005012 <_printf_i+0x212>
 800503a:	2500      	movs	r5, #0
 800503c:	f104 0619 	add.w	r6, r4, #25
 8005040:	e7f5      	b.n	800502e <_printf_i+0x22e>
 8005042:	bf00      	nop
 8005044:	080058c5 	.word	0x080058c5
 8005048:	080058d6 	.word	0x080058d6

0800504c <memmove>:
 800504c:	4288      	cmp	r0, r1
 800504e:	b510      	push	{r4, lr}
 8005050:	eb01 0402 	add.w	r4, r1, r2
 8005054:	d902      	bls.n	800505c <memmove+0x10>
 8005056:	4284      	cmp	r4, r0
 8005058:	4623      	mov	r3, r4
 800505a:	d807      	bhi.n	800506c <memmove+0x20>
 800505c:	1e43      	subs	r3, r0, #1
 800505e:	42a1      	cmp	r1, r4
 8005060:	d008      	beq.n	8005074 <memmove+0x28>
 8005062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800506a:	e7f8      	b.n	800505e <memmove+0x12>
 800506c:	4402      	add	r2, r0
 800506e:	4601      	mov	r1, r0
 8005070:	428a      	cmp	r2, r1
 8005072:	d100      	bne.n	8005076 <memmove+0x2a>
 8005074:	bd10      	pop	{r4, pc}
 8005076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800507a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800507e:	e7f7      	b.n	8005070 <memmove+0x24>

08005080 <_free_r>:
 8005080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005082:	2900      	cmp	r1, #0
 8005084:	d044      	beq.n	8005110 <_free_r+0x90>
 8005086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508a:	9001      	str	r0, [sp, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f1a1 0404 	sub.w	r4, r1, #4
 8005092:	bfb8      	it	lt
 8005094:	18e4      	addlt	r4, r4, r3
 8005096:	f000 f913 	bl	80052c0 <__malloc_lock>
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <_free_r+0x94>)
 800509c:	9801      	ldr	r0, [sp, #4]
 800509e:	6813      	ldr	r3, [r2, #0]
 80050a0:	b933      	cbnz	r3, 80050b0 <_free_r+0x30>
 80050a2:	6063      	str	r3, [r4, #4]
 80050a4:	6014      	str	r4, [r2, #0]
 80050a6:	b003      	add	sp, #12
 80050a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050ac:	f000 b90e 	b.w	80052cc <__malloc_unlock>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d908      	bls.n	80050c6 <_free_r+0x46>
 80050b4:	6825      	ldr	r5, [r4, #0]
 80050b6:	1961      	adds	r1, r4, r5
 80050b8:	428b      	cmp	r3, r1
 80050ba:	bf01      	itttt	eq
 80050bc:	6819      	ldreq	r1, [r3, #0]
 80050be:	685b      	ldreq	r3, [r3, #4]
 80050c0:	1949      	addeq	r1, r1, r5
 80050c2:	6021      	streq	r1, [r4, #0]
 80050c4:	e7ed      	b.n	80050a2 <_free_r+0x22>
 80050c6:	461a      	mov	r2, r3
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	b10b      	cbz	r3, 80050d0 <_free_r+0x50>
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d9fa      	bls.n	80050c6 <_free_r+0x46>
 80050d0:	6811      	ldr	r1, [r2, #0]
 80050d2:	1855      	adds	r5, r2, r1
 80050d4:	42a5      	cmp	r5, r4
 80050d6:	d10b      	bne.n	80050f0 <_free_r+0x70>
 80050d8:	6824      	ldr	r4, [r4, #0]
 80050da:	4421      	add	r1, r4
 80050dc:	1854      	adds	r4, r2, r1
 80050de:	42a3      	cmp	r3, r4
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	d1e0      	bne.n	80050a6 <_free_r+0x26>
 80050e4:	681c      	ldr	r4, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	6053      	str	r3, [r2, #4]
 80050ea:	4421      	add	r1, r4
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	e7da      	b.n	80050a6 <_free_r+0x26>
 80050f0:	d902      	bls.n	80050f8 <_free_r+0x78>
 80050f2:	230c      	movs	r3, #12
 80050f4:	6003      	str	r3, [r0, #0]
 80050f6:	e7d6      	b.n	80050a6 <_free_r+0x26>
 80050f8:	6825      	ldr	r5, [r4, #0]
 80050fa:	1961      	adds	r1, r4, r5
 80050fc:	428b      	cmp	r3, r1
 80050fe:	bf04      	itt	eq
 8005100:	6819      	ldreq	r1, [r3, #0]
 8005102:	685b      	ldreq	r3, [r3, #4]
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	bf04      	itt	eq
 8005108:	1949      	addeq	r1, r1, r5
 800510a:	6021      	streq	r1, [r4, #0]
 800510c:	6054      	str	r4, [r2, #4]
 800510e:	e7ca      	b.n	80050a6 <_free_r+0x26>
 8005110:	b003      	add	sp, #12
 8005112:	bd30      	pop	{r4, r5, pc}
 8005114:	20000230 	.word	0x20000230

08005118 <sbrk_aligned>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4e0e      	ldr	r6, [pc, #56]	; (8005154 <sbrk_aligned+0x3c>)
 800511c:	460c      	mov	r4, r1
 800511e:	6831      	ldr	r1, [r6, #0]
 8005120:	4605      	mov	r5, r0
 8005122:	b911      	cbnz	r1, 800512a <sbrk_aligned+0x12>
 8005124:	f000 f8bc 	bl	80052a0 <_sbrk_r>
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	4621      	mov	r1, r4
 800512c:	4628      	mov	r0, r5
 800512e:	f000 f8b7 	bl	80052a0 <_sbrk_r>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d00a      	beq.n	800514c <sbrk_aligned+0x34>
 8005136:	1cc4      	adds	r4, r0, #3
 8005138:	f024 0403 	bic.w	r4, r4, #3
 800513c:	42a0      	cmp	r0, r4
 800513e:	d007      	beq.n	8005150 <sbrk_aligned+0x38>
 8005140:	1a21      	subs	r1, r4, r0
 8005142:	4628      	mov	r0, r5
 8005144:	f000 f8ac 	bl	80052a0 <_sbrk_r>
 8005148:	3001      	adds	r0, #1
 800514a:	d101      	bne.n	8005150 <sbrk_aligned+0x38>
 800514c:	f04f 34ff 	mov.w	r4, #4294967295
 8005150:	4620      	mov	r0, r4
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	20000234 	.word	0x20000234

08005158 <_malloc_r>:
 8005158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515c:	1ccd      	adds	r5, r1, #3
 800515e:	f025 0503 	bic.w	r5, r5, #3
 8005162:	3508      	adds	r5, #8
 8005164:	2d0c      	cmp	r5, #12
 8005166:	bf38      	it	cc
 8005168:	250c      	movcc	r5, #12
 800516a:	2d00      	cmp	r5, #0
 800516c:	4607      	mov	r7, r0
 800516e:	db01      	blt.n	8005174 <_malloc_r+0x1c>
 8005170:	42a9      	cmp	r1, r5
 8005172:	d905      	bls.n	8005180 <_malloc_r+0x28>
 8005174:	230c      	movs	r3, #12
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	2600      	movs	r6, #0
 800517a:	4630      	mov	r0, r6
 800517c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005180:	4e2e      	ldr	r6, [pc, #184]	; (800523c <_malloc_r+0xe4>)
 8005182:	f000 f89d 	bl	80052c0 <__malloc_lock>
 8005186:	6833      	ldr	r3, [r6, #0]
 8005188:	461c      	mov	r4, r3
 800518a:	bb34      	cbnz	r4, 80051da <_malloc_r+0x82>
 800518c:	4629      	mov	r1, r5
 800518e:	4638      	mov	r0, r7
 8005190:	f7ff ffc2 	bl	8005118 <sbrk_aligned>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	4604      	mov	r4, r0
 8005198:	d14d      	bne.n	8005236 <_malloc_r+0xde>
 800519a:	6834      	ldr	r4, [r6, #0]
 800519c:	4626      	mov	r6, r4
 800519e:	2e00      	cmp	r6, #0
 80051a0:	d140      	bne.n	8005224 <_malloc_r+0xcc>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	4631      	mov	r1, r6
 80051a6:	4638      	mov	r0, r7
 80051a8:	eb04 0803 	add.w	r8, r4, r3
 80051ac:	f000 f878 	bl	80052a0 <_sbrk_r>
 80051b0:	4580      	cmp	r8, r0
 80051b2:	d13a      	bne.n	800522a <_malloc_r+0xd2>
 80051b4:	6821      	ldr	r1, [r4, #0]
 80051b6:	3503      	adds	r5, #3
 80051b8:	1a6d      	subs	r5, r5, r1
 80051ba:	f025 0503 	bic.w	r5, r5, #3
 80051be:	3508      	adds	r5, #8
 80051c0:	2d0c      	cmp	r5, #12
 80051c2:	bf38      	it	cc
 80051c4:	250c      	movcc	r5, #12
 80051c6:	4629      	mov	r1, r5
 80051c8:	4638      	mov	r0, r7
 80051ca:	f7ff ffa5 	bl	8005118 <sbrk_aligned>
 80051ce:	3001      	adds	r0, #1
 80051d0:	d02b      	beq.n	800522a <_malloc_r+0xd2>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	442b      	add	r3, r5
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	e00e      	b.n	80051f8 <_malloc_r+0xa0>
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	1b52      	subs	r2, r2, r5
 80051de:	d41e      	bmi.n	800521e <_malloc_r+0xc6>
 80051e0:	2a0b      	cmp	r2, #11
 80051e2:	d916      	bls.n	8005212 <_malloc_r+0xba>
 80051e4:	1961      	adds	r1, r4, r5
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	6025      	str	r5, [r4, #0]
 80051ea:	bf18      	it	ne
 80051ec:	6059      	strne	r1, [r3, #4]
 80051ee:	6863      	ldr	r3, [r4, #4]
 80051f0:	bf08      	it	eq
 80051f2:	6031      	streq	r1, [r6, #0]
 80051f4:	5162      	str	r2, [r4, r5]
 80051f6:	604b      	str	r3, [r1, #4]
 80051f8:	4638      	mov	r0, r7
 80051fa:	f104 060b 	add.w	r6, r4, #11
 80051fe:	f000 f865 	bl	80052cc <__malloc_unlock>
 8005202:	f026 0607 	bic.w	r6, r6, #7
 8005206:	1d23      	adds	r3, r4, #4
 8005208:	1af2      	subs	r2, r6, r3
 800520a:	d0b6      	beq.n	800517a <_malloc_r+0x22>
 800520c:	1b9b      	subs	r3, r3, r6
 800520e:	50a3      	str	r3, [r4, r2]
 8005210:	e7b3      	b.n	800517a <_malloc_r+0x22>
 8005212:	6862      	ldr	r2, [r4, #4]
 8005214:	42a3      	cmp	r3, r4
 8005216:	bf0c      	ite	eq
 8005218:	6032      	streq	r2, [r6, #0]
 800521a:	605a      	strne	r2, [r3, #4]
 800521c:	e7ec      	b.n	80051f8 <_malloc_r+0xa0>
 800521e:	4623      	mov	r3, r4
 8005220:	6864      	ldr	r4, [r4, #4]
 8005222:	e7b2      	b.n	800518a <_malloc_r+0x32>
 8005224:	4634      	mov	r4, r6
 8005226:	6876      	ldr	r6, [r6, #4]
 8005228:	e7b9      	b.n	800519e <_malloc_r+0x46>
 800522a:	230c      	movs	r3, #12
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4638      	mov	r0, r7
 8005230:	f000 f84c 	bl	80052cc <__malloc_unlock>
 8005234:	e7a1      	b.n	800517a <_malloc_r+0x22>
 8005236:	6025      	str	r5, [r4, #0]
 8005238:	e7de      	b.n	80051f8 <_malloc_r+0xa0>
 800523a:	bf00      	nop
 800523c:	20000230 	.word	0x20000230

08005240 <_realloc_r>:
 8005240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005244:	4680      	mov	r8, r0
 8005246:	4614      	mov	r4, r2
 8005248:	460e      	mov	r6, r1
 800524a:	b921      	cbnz	r1, 8005256 <_realloc_r+0x16>
 800524c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	4611      	mov	r1, r2
 8005252:	f7ff bf81 	b.w	8005158 <_malloc_r>
 8005256:	b92a      	cbnz	r2, 8005264 <_realloc_r+0x24>
 8005258:	f7ff ff12 	bl	8005080 <_free_r>
 800525c:	4625      	mov	r5, r4
 800525e:	4628      	mov	r0, r5
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	f000 f838 	bl	80052d8 <_malloc_usable_size_r>
 8005268:	4284      	cmp	r4, r0
 800526a:	4607      	mov	r7, r0
 800526c:	d802      	bhi.n	8005274 <_realloc_r+0x34>
 800526e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005272:	d812      	bhi.n	800529a <_realloc_r+0x5a>
 8005274:	4621      	mov	r1, r4
 8005276:	4640      	mov	r0, r8
 8005278:	f7ff ff6e 	bl	8005158 <_malloc_r>
 800527c:	4605      	mov	r5, r0
 800527e:	2800      	cmp	r0, #0
 8005280:	d0ed      	beq.n	800525e <_realloc_r+0x1e>
 8005282:	42bc      	cmp	r4, r7
 8005284:	4622      	mov	r2, r4
 8005286:	4631      	mov	r1, r6
 8005288:	bf28      	it	cs
 800528a:	463a      	movcs	r2, r7
 800528c:	f7ff fbb8 	bl	8004a00 <memcpy>
 8005290:	4631      	mov	r1, r6
 8005292:	4640      	mov	r0, r8
 8005294:	f7ff fef4 	bl	8005080 <_free_r>
 8005298:	e7e1      	b.n	800525e <_realloc_r+0x1e>
 800529a:	4635      	mov	r5, r6
 800529c:	e7df      	b.n	800525e <_realloc_r+0x1e>
	...

080052a0 <_sbrk_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	; (80052bc <_sbrk_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fc fdfc 	bl	8001ea8 <_sbrk>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_sbrk_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_sbrk_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20000238 	.word	0x20000238

080052c0 <__malloc_lock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__malloc_lock+0x8>)
 80052c2:	f000 b811 	b.w	80052e8 <__retarget_lock_acquire_recursive>
 80052c6:	bf00      	nop
 80052c8:	2000023c 	.word	0x2000023c

080052cc <__malloc_unlock>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__malloc_unlock+0x8>)
 80052ce:	f000 b80c 	b.w	80052ea <__retarget_lock_release_recursive>
 80052d2:	bf00      	nop
 80052d4:	2000023c 	.word	0x2000023c

080052d8 <_malloc_usable_size_r>:
 80052d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052dc:	1f18      	subs	r0, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	bfbc      	itt	lt
 80052e2:	580b      	ldrlt	r3, [r1, r0]
 80052e4:	18c0      	addlt	r0, r0, r3
 80052e6:	4770      	bx	lr

080052e8 <__retarget_lock_acquire_recursive>:
 80052e8:	4770      	bx	lr

080052ea <__retarget_lock_release_recursive>:
 80052ea:	4770      	bx	lr

080052ec <_init>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr

080052f8 <_fini>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr
